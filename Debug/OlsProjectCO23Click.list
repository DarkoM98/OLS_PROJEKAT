
OlsProjectCO23Click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f944  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000475c  0800fb14  0800fb14  0001fb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014270  08014270  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08014270  08014270  00024270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014278  08014278  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014278  08014278  00024278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801427c  0801427c  0002427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08014280  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ae3c  20000234  080144b4  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b070  080144b4  0003b070  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f08  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000426e  00000000  00000000  0005516a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ce29  00000000  00000000  000593d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001070  00000000  00000000  00066208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ef8  00000000  00000000  00067278  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002b912  00000000  00000000  00068170  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000118bf  00000000  00000000  00093a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f6c10  00000000  00000000  000a5341  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fd  00000000  00000000  0019bf51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003044  00000000  00000000  0019c050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000234 	.word	0x20000234
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fafc 	.word	0x0800fafc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000238 	.word	0x20000238
 800020c:	0800fafc 	.word	0x0800fafc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b972 	b.w	8000e38 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	4688      	mov	r8, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14b      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4615      	mov	r5, r2
 8000b7e:	d967      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0720 	rsb	r7, r2, #32
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b92:	4095      	lsls	r5, r2
 8000b94:	ea47 0803 	orr.w	r8, r7, r3
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba4:	fa1f fc85 	uxth.w	ip, r5
 8000ba8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bbe:	f080 811b 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8118 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bc8:	3f02      	subs	r7, #2
 8000bca:	442b      	add	r3, r5
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be0:	45a4      	cmp	ip, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	192c      	adds	r4, r5, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8107 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	f240 8104 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	442c      	add	r4, r5
 8000bf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfc:	eba4 040c 	sub.w	r4, r4, ip
 8000c00:	2700      	movs	r7, #0
 8000c02:	b11e      	cbz	r6, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0xbe>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80eb 	beq.w	8000df2 <__udivmoddi4+0x286>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c22:	4638      	mov	r0, r7
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f783 	clz	r7, r3
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d147      	bne.n	8000cc2 <__udivmoddi4+0x156>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xd0>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2c4>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e0      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000c4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c4e:	e7dd      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xe8>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f040 808f 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5e:	1b49      	subs	r1, r1, r5
 8000c60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c64:	fa1f f885 	uxth.w	r8, r5
 8000c68:	2701      	movs	r7, #1
 8000c6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb08 f10c 	mul.w	r1, r8, ip
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x14c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x14a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80b6 	bhi.w	8000e22 <__udivmoddi4+0x2b6>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e79f      	b.n	8000c02 <__udivmoddi4+0x96>
 8000cc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cc6:	40bb      	lsls	r3, r7
 8000cc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ccc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ce6:	0c2c      	lsrs	r4, r5, #16
 8000ce8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cec:	fa1f fa8e 	uxth.w	sl, lr
 8000cf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1e 0303 	adds.w	r3, lr, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d0c:	f080 8087 	bcs.w	8000e1e <__udivmoddi4+0x2b2>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f240 8084 	bls.w	8000e1e <__udivmoddi4+0x2b2>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4473      	add	r3, lr
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d30:	45a2      	cmp	sl, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1e 0404 	adds.w	r4, lr, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	d26b      	bcs.n	8000e16 <__udivmoddi4+0x2aa>
 8000d3e:	45a2      	cmp	sl, r4
 8000d40:	d969      	bls.n	8000e16 <__udivmoddi4+0x2aa>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4474      	add	r4, lr
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	eba4 040a 	sub.w	r4, r4, sl
 8000d52:	454c      	cmp	r4, r9
 8000d54:	46c2      	mov	sl, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	d354      	bcc.n	8000e04 <__udivmoddi4+0x298>
 8000d5a:	d051      	beq.n	8000e00 <__udivmoddi4+0x294>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d069      	beq.n	8000e34 <__udivmoddi4+0x2c8>
 8000d60:	ebb1 050a 	subs.w	r5, r1, sl
 8000d64:	eb64 0403 	sbc.w	r4, r4, r3
 8000d68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d6c:	40fd      	lsrs	r5, r7
 8000d6e:	40fc      	lsrs	r4, r7
 8000d70:	ea4c 0505 	orr.w	r5, ip, r5
 8000d74:	e9c6 5400 	strd	r5, r4, [r6]
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e747      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f703 	lsr.w	r7, r0, r3
 8000d84:	4095      	lsls	r5, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d92:	4338      	orrs	r0, r7
 8000d94:	0c01      	lsrs	r1, r0, #16
 8000d96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9a:	fa1f f885 	uxth.w	r8, r5
 8000d9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb07 f308 	mul.w	r3, r7, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	fa04 f402 	lsl.w	r4, r4, r2
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x256>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000db8:	d22f      	bcs.n	8000e1a <__udivmoddi4+0x2ae>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d92d      	bls.n	8000e1a <__udivmoddi4+0x2ae>
 8000dbe:	3f02      	subs	r7, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	b281      	uxth	r1, r0
 8000dc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb00 f308 	mul.w	r3, r0, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x27e>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de0:	d217      	bcs.n	8000e12 <__udivmoddi4+0x2a6>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d915      	bls.n	8000e12 <__udivmoddi4+0x2a6>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df0:	e73b      	b.n	8000c6a <__udivmoddi4+0xfe>
 8000df2:	4637      	mov	r7, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e709      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	e6e7      	b.n	8000bcc <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fb      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000e00:	4541      	cmp	r1, r8
 8000e02:	d2ab      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e08:	eb69 020e 	sbc.w	r2, r9, lr
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	4613      	mov	r3, r2
 8000e10:	e7a4      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e12:	4660      	mov	r0, ip
 8000e14:	e7e9      	b.n	8000dea <__udivmoddi4+0x27e>
 8000e16:	4618      	mov	r0, r3
 8000e18:	e795      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	e7d1      	b.n	8000dc2 <__udivmoddi4+0x256>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	e77c      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	442c      	add	r4, r5
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0x14c>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	442b      	add	r3, r5
 8000e2e:	e72f      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e30:	4638      	mov	r0, r7
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xda>
 8000e34:	4637      	mov	r7, r6
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0xa0>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <Init_LCD_GPIO>:

//=============================================================================
// GPIO setup 
//=============================================================================
void Init_LCD_GPIO(void)
{
 8000e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e40:	b08b      	sub	sp, #44	; 0x2c
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <Init_LCD_GPIO+0xe0>)
 8000e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	9a01      	ldr	r2, [sp, #4]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e58:	f042 0210 	orr.w	r2, r2, #16
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	f002 0210 	and.w	r2, r2, #16
 8000e64:	9202      	str	r2, [sp, #8]
 8000e66:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e72:	f002 0220 	and.w	r2, r2, #32
 8000e76:	9203      	str	r2, [sp, #12]
 8000e78:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e80:	631a      	str	r2, [r3, #48]	; 0x30
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e88:	9304      	str	r3, [sp, #16]
 8000e8a:	9b04      	ldr	r3, [sp, #16]


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8000e8c:	4c24      	ldr	r4, [pc, #144]	; (8000f20 <Init_LCD_GPIO+0xe4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000e94:	4620      	mov	r0, r4
 8000e96:	f000 fc7d 	bl	8001794 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8000e9a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000f24 <Init_LCD_GPIO+0xe8>
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	21ff      	movs	r1, #255	; 0xff
 8000ea2:	4648      	mov	r0, r9
 8000ea4:	f000 fc76 	bl	8001794 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8000ea8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000f28 <Init_LCD_GPIO+0xec>
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000eb2:	4640      	mov	r0, r8
 8000eb4:	f000 fc6e 	bl	8001794 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GCMD;
 8000eb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ebc:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2701      	movs	r7, #1
 8000ec0:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2503      	movs	r5, #3
 8000ec8:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8000eca:	a905      	add	r1, sp, #20
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f000 fb6d 	bl	80015ac <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8000edc:	a905      	add	r1, sp, #20
 8000ede:	4648      	mov	r0, r9
 8000ee0:	f000 fb64 	bl	80015ac <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8000ee4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000ee8:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9607      	str	r6, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	9508      	str	r5, [sp, #32]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8000ef0:	a905      	add	r1, sp, #20
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	f000 fb5a 	bl	80015ac <HAL_GPIO_Init>

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efc:	61a3      	str	r3, [r4, #24]
 8000efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f02:	61a3      	str	r3, [r4, #24]
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	61a3      	str	r3, [r4, #24]
 8000f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0e:	61a3      	str	r3, [r4, #24]
 8000f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f14:	61a3      	str	r3, [r4, #24]
}
 8000f16:	b00b      	add	sp, #44	; 0x2c
 8000f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021400 	.word	0x40021400
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40021000 	.word	0x40021000

08000f2c <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
 8000f2c:	b410      	push	{r4}
	uint16_t _Data=~Data;
 8000f2e:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000f30:	4911      	ldr	r1, [pc, #68]	; (8000f78 <SSD1963_WriteCommand+0x4c>)
 8000f32:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f36:	618a      	str	r2, [r1, #24]

	CLR_CS;
 8000f38:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <SSD1963_WriteCommand+0x50>)
 8000f3a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000f3e:	6194      	str	r4, [r2, #24]
	CLR_DC;
 8000f40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8000f44:	6194      	str	r4, [r2, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f4c:	b2c4      	uxtb	r4, r0
 8000f4e:	4323      	orrs	r3, r4
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <SSD1963_WriteCommand+0x54>)
 8000f52:	61a3      	str	r3, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000f54:	694b      	ldr	r3, [r1, #20]
 8000f56:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000f5a:	4318      	orrs	r0, r3
 8000f5c:	6148      	str	r0, [r1, #20]
	writeStrobe;
 8000f5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f68:	6193      	str	r3, [r2, #24]
	SET_CS;
 8000f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6e:	6193      	str	r3, [r2, #24]
}
 8000f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40021400 	.word	0x40021400
 8000f80:	40021800 	.word	0x40021800

08000f84 <SSD1963_WriteData>:
//=============================================================================
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
 8000f84:	b410      	push	{r4}
	uint16_t _Data=~Data;
 8000f86:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000f88:	4911      	ldr	r1, [pc, #68]	; (8000fd0 <SSD1963_WriteData+0x4c>)
 8000f8a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f8e:	618a      	str	r2, [r1, #24]

	CLR_CS;
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <SSD1963_WriteData+0x50>)
 8000f92:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000f96:	6194      	str	r4, [r2, #24]
	SET_DC;
 8000f98:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8000f9c:	6194      	str	r4, [r2, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000f9e:	041b      	lsls	r3, r3, #16
 8000fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000fa4:	b2c4      	uxtb	r4, r0
 8000fa6:	4323      	orrs	r3, r4
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <SSD1963_WriteData+0x54>)
 8000faa:	61a3      	str	r3, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000fac:	694b      	ldr	r3, [r1, #20]
 8000fae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8000fb2:	4318      	orrs	r0, r3
 8000fb4:	6148      	str	r0, [r1, #20]
	writeStrobe;
 8000fb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc0:	6193      	str	r3, [r2, #24]
	SET_CS;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	6193      	str	r3, [r2, #24]

}
 8000fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800

08000fdc <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4605      	mov	r5, r0
 8000fe0:	460c      	mov	r4, r1
  while (NumItems)
 8000fe2:	e004      	b.n	8000fee <SSD1963_WriteDataMultiple+0x12>
  {
	  SSD1963_WriteData(*Data);
 8000fe4:	f835 0b02 	ldrh.w	r0, [r5], #2
 8000fe8:	f7ff ffcc 	bl	8000f84 <SSD1963_WriteData>
	  Data++;
	  NumItems--;
 8000fec:	3c01      	subs	r4, #1
  while (NumItems)
 8000fee:	2c00      	cmp	r4, #0
 8000ff0:	d1f8      	bne.n	8000fe4 <SSD1963_WriteDataMultiple+0x8>
  }
}
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}

08000ff4 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8000ff4:	b510      	push	{r4, lr}
	CLR_RST;  // reset
 8000ff6:	4c54      	ldr	r4, [pc, #336]	; (8001148 <SSD1963_Init+0x154>)
 8000ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffc:	61a3      	str	r3, [r4, #24]
	HAL_Delay(500);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001002:	f000 fa53 	bl	80014ac <HAL_Delay>
	SET_RST;
 8001006:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800100a:	61a3      	str	r3, [r4, #24]
	HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f000 fa4d 	bl	80014ac <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ff8a 	bl	8000f2c <SSD1963_WriteCommand>
	HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f000 fa47 	bl	80014ac <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PLL_MN);
 800101e:	20e2      	movs	r0, #226	; 0xe2
 8001020:	f7ff ff84 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(29);	// PLLclk = REFclk * 30 (300MHz)
 8001024:	201d      	movs	r0, #29
 8001026:	f7ff ffad 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(2);	// SYSclk = PLLclk / 3  (100MHz)
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff ffaa 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(4);  	// dummy
 8001030:	2004      	movs	r0, #4
 8001032:	f7ff ffa7 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8001036:	20e0      	movs	r0, #224	; 0xe0
 8001038:	f7ff ff78 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0001);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ffa1 	bl	8000f84 <SSD1963_WriteData>

	HAL_Delay(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f000 fa32 	bl	80014ac <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8001048:	20e0      	movs	r0, #224	; 0xe0
 800104a:	f7ff ff6f 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0003);
 800104e:	2003      	movs	r0, #3
 8001050:	f7ff ff98 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LCD_MODE);
 8001054:	20b0      	movs	r0, #176	; 0xb0
 8001056:	f7ff ff69 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0020);
 800105a:	2020      	movs	r0, #32
 800105c:	f7ff ff92 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff8f 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_WIDTH-1)));
 8001066:	2003      	movs	r0, #3
 8001068:	f7ff ff8c 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_WIDTH-1)));
 800106c:	201f      	movs	r0, #31
 800106e:	f7ff ff89 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HEIGHT-1)));
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff86 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HEIGHT-1)));
 8001078:	20df      	movs	r0, #223	; 0xdf
 800107a:	f7ff ff83 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ff80 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PIXEL_DATA_INTERFACE);
 8001084:	20f0      	movs	r0, #240	; 0xf0
 8001086:	f7ff ff51 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(SSD1963_PDI_16BIT565);
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff ff7a 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LSHIFT_FREQ);
 8001090:	20e6      	movs	r0, #230	; 0xe6
 8001092:	f7ff ff4b 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData((LCD_FPR >> 16) & 0x00FF);
 8001096:	2004      	movs	r0, #4
 8001098:	f7ff ff74 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData((LCD_FPR >> 8) & 0x00FF);
 800109c:	200a      	movs	r0, #10
 800109e:	f7ff ff71 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(LCD_FPR & 0x00FF);
 80010a2:	205f      	movs	r0, #95	; 0x5f
 80010a4:	f7ff ff6e 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_HORI_PERIOD);
 80010a8:	20b4      	movs	r0, #180	; 0xb4
 80010aa:	f7ff ff3f 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_HSYNC_PERIOD));
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff ff68 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_HSYNC_PERIOD));
 80010b4:	2054      	movs	r0, #84	; 0x54
 80010b6:	f7ff ff65 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ff62 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 80010c0:	202c      	movs	r0, #44	; 0x2c
 80010c2:	f7ff ff5f 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_HSYNC_PULSE);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff ff5c 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff59 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff ff56 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff53 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_VERT_PERIOD);
 80010de:	20b6      	movs	r0, #182	; 0xb6
 80010e0:	f7ff ff24 	bl	8000f2c <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_VSYNC_PERIOD));
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff ff4d 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_VSYNC_PERIOD));
 80010ea:	20ee      	movs	r0, #238	; 0xee
 80010ec:	f7ff ff4a 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff47 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ff44 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(TFT_VSYNC_PULSE);
 80010fc:	2006      	movs	r0, #6
 80010fe:	f7ff ff41 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff3e 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff3b 	bl	8000f84 <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on
 800110e:	2029      	movs	r0, #41	; 0x29
 8001110:	f7ff ff0c 	bl	8000f2c <SSD1963_WriteCommand>

	HAL_Delay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f000 f9c9 	bl	80014ac <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); //set PWM for Backlight. Manual p.53
 800111a:	20be      	movs	r0, #190	; 0xbe
 800111c:	f7ff ff06 	bl	8000f2c <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 					// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 8001120:	2004      	movs	r0, #4
 8001122:	f7ff ff2f 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x00C0); 					// PWM duty cycle(50%)
 8001126:	20c0      	movs	r0, #192	; 0xc0
 8001128:	f7ff ff2c 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 					// PWM controlled by host, PWM enabled
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ff29 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
 8001132:	2040      	movs	r0, #64	; 0x40
 8001134:	f7ff ff26 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ff23 	bl	8000f84 <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff ff20 	bl	8000f84 <SSD1963_WriteData>


}
 8001144:	bd10      	pop	{r4, pc}
 8001146:	bf00      	nop
 8001148:	40021400 	.word	0x40021400

0800114c <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 800114c:	b084      	sub	sp, #16
 800114e:	b508      	push	{r3, lr}
 8001150:	f10d 0c08 	add.w	ip, sp, #8
 8001154:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8001158:	224c      	movs	r2, #76	; 0x4c
 800115a:	4661      	mov	r1, ip
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <Init_TOUCH_GPIO+0x20>)
 800115e:	f00e f8be 	bl	800f2de <memcpy>
}
 8001162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001166:	b004      	add	sp, #16
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20019524 	.word	0x20019524

08001170 <STMPE610_Write>:
		return FALSE;
}


void STMPE610_Write(uint8_t reg, uint8_t val)
{
 8001170:	b500      	push	{lr}
 8001172:	b085      	sub	sp, #20
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 8001174:	f88d 000c 	strb.w	r0, [sp, #12]
	txbuf[1]=val;
 8001178:	f88d 100d 	strb.w	r1, [sp, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800117c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2302      	movs	r3, #2
 8001184:	aa03      	add	r2, sp, #12
 8001186:	2188      	movs	r1, #136	; 0x88
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <STMPE610_Write+0x28>)
 800118a:	f000 fcfd 	bl	8001b88 <HAL_I2C_Master_Transmit>
 800118e:	2800      	cmp	r0, #0
 8001190:	d1f4      	bne.n	800117c <STMPE610_Write+0xc>
}
 8001192:	b005      	add	sp, #20
 8001194:	f85d fb04 	ldr.w	pc, [sp], #4
 8001198:	20019524 	.word	0x20019524

0800119c <STMPE610_ReadByte>:

uint8_t STMPE610_ReadByte(uint8_t reg)
{
 800119c:	b500      	push	{lr}
 800119e:	b087      	sub	sp, #28
 80011a0:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f88d 3014 	strb.w	r3, [sp, #20]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, STMPE610_TIMEOUT)!= HAL_OK);
 80011aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	f10d 020f 	add.w	r2, sp, #15
 80011b6:	2188      	movs	r1, #136	; 0x88
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <STMPE610_ReadByte+0x48>)
 80011ba:	f000 fce5 	bl	8001b88 <HAL_I2C_Master_Transmit>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d1f3      	bne.n	80011aa <STMPE610_ReadByte+0xe>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 1, STMPE610_TIMEOUT) != HAL_OK);
 80011c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	aa05      	add	r2, sp, #20
 80011cc:	2188      	movs	r1, #136	; 0x88
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <STMPE610_ReadByte+0x48>)
 80011d0:	f000 fd98 	bl	8001d04 <HAL_I2C_Master_Receive>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d1f4      	bne.n	80011c2 <STMPE610_ReadByte+0x26>

	return rxbuf[0];
}
 80011d8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80011dc:	b007      	add	sp, #28
 80011de:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e2:	bf00      	nop
 80011e4:	20019524 	.word	0x20019524

080011e8 <STMPE610_ReadWord>:

uint16_t STMPE610_ReadWord(uint8_t reg)
{
 80011e8:	b500      	push	{lr}
 80011ea:	b087      	sub	sp, #28
 80011ec:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	rxbuf[2];
	
	rxbuf[0] = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f88d 3014 	strb.w	r3, [sp, #20]
	rxbuf[1] = 0;
 80011f6:	f88d 3015 	strb.w	r3, [sp, #21]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, 10000)!= HAL_OK);
 80011fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	f10d 020f 	add.w	r2, sp, #15
 8001206:	2188      	movs	r1, #136	; 0x88
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <STMPE610_ReadWord+0x54>)
 800120a:	f000 fcbd 	bl	8001b88 <HAL_I2C_Master_Transmit>
 800120e:	2800      	cmp	r0, #0
 8001210:	d1f3      	bne.n	80011fa <STMPE610_ReadWord+0x12>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 2, 10000) != HAL_OK);
 8001212:	f242 7310 	movw	r3, #10000	; 0x2710
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2302      	movs	r3, #2
 800121a:	aa05      	add	r2, sp, #20
 800121c:	2188      	movs	r1, #136	; 0x88
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <STMPE610_ReadWord+0x54>)
 8001220:	f000 fd70 	bl	8001d04 <HAL_I2C_Master_Receive>
 8001224:	2800      	cmp	r0, #0
 8001226:	d1f4      	bne.n	8001212 <STMPE610_ReadWord+0x2a>

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
 8001228:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800122c:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8001230:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001234:	b007      	add	sp, #28
 8001236:	f85d fb04 	ldr.w	pc, [sp], #4
 800123a:	bf00      	nop
 800123c:	20019524 	.word	0x20019524

08001240 <STMPE610_Init>:

void STMPE610_Init(void)
{
 8001240:	b508      	push	{r3, lr}
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
 8001242:	2102      	movs	r1, #2
 8001244:	2003      	movs	r0, #3
 8001246:	f7ff ff93 	bl	8001170 <STMPE610_Write>
	HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f000 f92e 	bl	80014ac <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
 8001250:	2104      	movs	r1, #4
 8001252:	4608      	mov	r0, r1
 8001254:	f7ff ff8c 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
 8001258:	2103      	movs	r1, #3
 800125a:	200a      	movs	r0, #10
 800125c:	f7ff ff88 	bl	8001170 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
 8001260:	2148      	movs	r1, #72	; 0x48
 8001262:	2020      	movs	r0, #32
 8001264:	f7ff ff84 	bl	8001170 <STMPE610_Write>
	HAL_Delay(2);
 8001268:	2002      	movs	r0, #2
 800126a:	f000 f91f 	bl	80014ac <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_ADC_CTRL2, 0x01);		// ADC speed 3.25MHz
 800126e:	2101      	movs	r1, #1
 8001270:	2021      	movs	r0, #33	; 0x21
 8001272:	f7ff ff7d 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_GPIO_AF, 0x00);			// GPIO alternate function - OFF
 8001276:	2100      	movs	r1, #0
 8001278:	2017      	movs	r0, #23
 800127a:	f7ff ff79 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CFG, 0xA3);			// Averaging 4, touch detect delay 1ms, panel driver settling time 1ms
 800127e:	21a3      	movs	r1, #163	; 0xa3
 8001280:	2041      	movs	r0, #65	; 0x41
 8001282:	f7ff ff75 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_TH, 0x01);			// FIFO threshold = 1
 8001286:	2101      	movs	r1, #1
 8001288:	204a      	movs	r0, #74	; 0x4a
 800128a:	f7ff ff71 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);			// FIFO reset enable
 800128e:	2101      	movs	r1, #1
 8001290:	204b      	movs	r0, #75	; 0x4b
 8001292:	f7ff ff6d 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);			// FIFO reset disable
 8001296:	2100      	movs	r1, #0
 8001298:	204b      	movs	r0, #75	; 0x4b
 800129a:	f7ff ff69 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_FRACT_XYZ, 0x07);	// Z axis data format
 800129e:	2107      	movs	r1, #7
 80012a0:	2056      	movs	r0, #86	; 0x56
 80012a2:	f7ff ff65 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_I_DRIVE, 0x01);		// max 50mA touchscreen line current
 80012a6:	2101      	movs	r1, #1
 80012a8:	2058      	movs	r0, #88	; 0x58
 80012aa:	f7ff ff61 	bl	8001170 <STMPE610_Write>

	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x30);			// X&Y&Z, 16 reading window
 80012ae:	2130      	movs	r1, #48	; 0x30
 80012b0:	2040      	movs	r0, #64	; 0x40
 80012b2:	f7ff ff5d 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x31);			// X&Y&Z, 16 reading window, TSC enable
 80012b6:	2131      	movs	r1, #49	; 0x31
 80012b8:	2040      	movs	r0, #64	; 0x40
 80012ba:	f7ff ff59 	bl	8001170 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
 80012be:	21ff      	movs	r1, #255	; 0xff
 80012c0:	200b      	movs	r0, #11
 80012c2:	f7ff ff55 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
 80012c6:	2101      	movs	r1, #1
 80012c8:	2009      	movs	r0, #9
 80012ca:	f7ff ff51 	bl	8001170 <STMPE610_Write>
}
 80012ce:	bd08      	pop	{r3, pc}

080012d0 <STMPE610_read_xyz>:

uint8_t STMPE610_read_xyz(void)
{
 80012d0:	b508      	push	{r3, lr}
	uint8_t	status;

	// Is there something in the fifo
	status = STMPE610_ReadByte(STMPE610_REG_FIFO_STA);
 80012d2:	204b      	movs	r0, #75	; 0x4b
 80012d4:	f7ff ff62 	bl	800119c <STMPE610_ReadByte>
	if ((status & 0x20))
 80012d8:	f010 0f20 	tst.w	r0, #32
 80012dc:	d012      	beq.n	8001304 <STMPE610_read_xyz+0x34>
	{
		STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	200b      	movs	r0, #11
 80012e2:	f7ff ff45 	bl	8001170 <STMPE610_Write>
		if (!(STMPE610_ReadByte(STMPE610_REG_TSC_CTRL) & 0x80))
 80012e6:	2040      	movs	r0, #64	; 0x40
 80012e8:	f7ff ff58 	bl	800119c <STMPE610_ReadByte>
 80012ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80012f0:	d125      	bne.n	800133e <STMPE610_read_xyz+0x6e>
		{
			x=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <STMPE610_read_xyz+0x74>)
 80012f6:	8013      	strh	r3, [r2, #0]
			y=0;
 80012f8:	4a13      	ldr	r2, [pc, #76]	; (8001348 <STMPE610_read_xyz+0x78>)
 80012fa:	8013      	strh	r3, [r2, #0]
			z=0;
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <STMPE610_read_xyz+0x7c>)
 80012fe:	8013      	strh	r3, [r2, #0]
	//		UART8_printf("true");
			return TRUE;
 8001300:	2001      	movs	r0, #1
 8001302:	e01b      	b.n	800133c <STMPE610_read_xyz+0x6c>
		return FALSE;

	}

	// Time to get some readings
	x = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_X);
 8001304:	204d      	movs	r0, #77	; 0x4d
 8001306:	f7ff ff6f 	bl	80011e8 <STMPE610_ReadWord>
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <STMPE610_read_xyz+0x74>)
 800130c:	8018      	strh	r0, [r3, #0]
	y = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_Y);
 800130e:	204f      	movs	r0, #79	; 0x4f
 8001310:	f7ff ff6a 	bl	80011e8 <STMPE610_ReadWord>
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <STMPE610_read_xyz+0x78>)
 8001316:	8018      	strh	r0, [r3, #0]
	z = STMPE610_ReadByte(STMPE610_REG_TSC_DATA_Z);
 8001318:	2051      	movs	r0, #81	; 0x51
 800131a:	f7ff ff3f 	bl	800119c <STMPE610_ReadByte>
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <STMPE610_read_xyz+0x7c>)
 8001320:	8018      	strh	r0, [r3, #0]

//	UART8_printf("%d, %d, %d\n\r", x,y,z );

	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);		// FIFO reset enable
 8001322:	2101      	movs	r1, #1
 8001324:	204b      	movs	r0, #75	; 0x4b
 8001326:	f7ff ff23 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);		// FIFO reset disable
 800132a:	2100      	movs	r1, #0
 800132c:	204b      	movs	r0, #75	; 0x4b
 800132e:	f7ff ff1f 	bl	8001170 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8001332:	21ff      	movs	r1, #255	; 0xff
 8001334:	200b      	movs	r0, #11
 8001336:	f7ff ff1b 	bl	8001170 <STMPE610_Write>


	return TRUE;
 800133a:	2001      	movs	r0, #1
}
 800133c:	bd08      	pop	{r3, pc}
		return FALSE;
 800133e:	2000      	movs	r0, #0
 8001340:	e7fc      	b.n	800133c <STMPE610_read_xyz+0x6c>
 8001342:	bf00      	nop
 8001344:	20000250 	.word	0x20000250
 8001348:	20000252 	.word	0x20000252
 800134c:	20000254 	.word	0x20000254

08001350 <STMPE610_GetX_TOUCH>:

uint16_t STMPE610_GetX_TOUCH(void)
{
 8001350:	b508      	push	{r3, lr}
	float pom=0;

	pom=(float)x;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <STMPE610_GetX_TOUCH+0x50>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pom=800.0*(pom-GUI_TOUCH_AD_LEFT)/(GUI_TOUCH_AD_RIGHT-GUI_TOUCH_AD_LEFT);
 800135e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013a4 <STMPE610_GetX_TOUCH+0x54>
 8001362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001366:	ee17 0a90 	vmov	r0, s15
 800136a:	f7ff f905 	bl	8000578 <__aeabi_f2d>
 800136e:	2200      	movs	r2, #0
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <STMPE610_GetX_TOUCH+0x58>)
 8001372:	f7ff f959 	bl	8000628 <__aeabi_dmul>
 8001376:	a308      	add	r3, pc, #32	; (adr r3, 8001398 <STMPE610_GetX_TOUCH+0x48>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fa7e 	bl	800087c <__aeabi_ddiv>
 8001380:	f7ff fb8c 	bl	8000a9c <__aeabi_d2f>
	return (uint16_t)pom;
 8001384:	ee07 0a90 	vmov	s15, r0
 8001388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 800138c:	ee17 3a90 	vmov	r3, s15
 8001390:	b298      	uxth	r0, r3
 8001392:	bd08      	pop	{r3, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	40adc400 	.word	0x40adc400
 80013a0:	20000250 	.word	0x20000250
 80013a4:	42dc0000 	.word	0x42dc0000
 80013a8:	40890000 	.word	0x40890000
 80013ac:	00000000 	.word	0x00000000

080013b0 <STMPE610_GetY_TOUCH>:
uint16_t STMPE610_GetY_TOUCH(void)
{
 80013b0:	b508      	push	{r3, lr}
	float pom=0;

	pom=(float)y;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <STMPE610_GetY_TOUCH+0x50>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pom=480.0*(pom-GUI_TOUCH_AD_TOP)/(GUI_TOUCH_AD_BOTTOM-GUI_TOUCH_AD_TOP);
 80013be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001404 <STMPE610_GetY_TOUCH+0x54>
 80013c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013c6:	ee17 0a90 	vmov	r0, s15
 80013ca:	f7ff f8d5 	bl	8000578 <__aeabi_f2d>
 80013ce:	2200      	movs	r2, #0
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <STMPE610_GetY_TOUCH+0x58>)
 80013d2:	f7ff f929 	bl	8000628 <__aeabi_dmul>
 80013d6:	a308      	add	r3, pc, #32	; (adr r3, 80013f8 <STMPE610_GetY_TOUCH+0x48>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa4e 	bl	800087c <__aeabi_ddiv>
 80013e0:	f7ff fb5c 	bl	8000a9c <__aeabi_d2f>
	return (uint16_t)pom;
 80013e4:	ee07 0a90 	vmov	s15, r0
 80013e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
}
 80013ec:	ee17 3a90 	vmov	r3, s15
 80013f0:	b298      	uxth	r0, r3
 80013f2:	bd08      	pop	{r3, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40abea00 	.word	0x40abea00
 8001400:	20000252 	.word	0x20000252
 8001404:	43c80000 	.word	0x43c80000
 8001408:	407e0000 	.word	0x407e0000

0800140c <STMPE610_GetX_TOUCH_RAW>:
}

uint16_t STMPE610_GetX_TOUCH_RAW(void)
{
	return x;
}
 800140c:	4b01      	ldr	r3, [pc, #4]	; (8001414 <STMPE610_GetX_TOUCH_RAW+0x8>)
 800140e:	8818      	ldrh	r0, [r3, #0]
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000250 	.word	0x20000250

08001418 <STMPE610_GetY_TOUCH_RAW>:
uint16_t STMPE610_GetY_TOUCH_RAW(void)
{
	return y;
}
 8001418:	4b01      	ldr	r3, [pc, #4]	; (8001420 <STMPE610_GetY_TOUCH_RAW+0x8>)
 800141a:	8818      	ldrh	r0, [r3, #0]
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000252 	.word	0x20000252

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b510      	push	{r4, lr}
 8001426:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_InitTick+0x40>)
 800142a:	7818      	ldrb	r0, [r3, #0]
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	fbb3 f3f0 	udiv	r3, r3, r0
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_InitTick+0x44>)
 8001436:	6810      	ldr	r0, [r2, #0]
 8001438:	fbb0 f0f3 	udiv	r0, r0, r3
 800143c:	f000 f89c 	bl	8001578 <HAL_SYSTICK_Config>
 8001440:	b968      	cbnz	r0, 800145e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	2c0f      	cmp	r4, #15
 8001444:	d901      	bls.n	800144a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
 8001448:	e00a      	b.n	8001460 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144a:	2200      	movs	r2, #0
 800144c:	4621      	mov	r1, r4
 800144e:	f04f 30ff 	mov.w	r0, #4294967295
 8001452:	f000 f851 	bl	80014f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_InitTick+0x48>)
 8001458:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2000      	movs	r0, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
}
 8001460:	bd10      	pop	{r4, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	20000118 	.word	0x20000118
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_Init>:
{
 8001470:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 f82e 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffd3 	bl	8001424 <HAL_InitTick>
  HAL_MspInit();
 800147e:	f003 fff9 	bl	8005474 <HAL_MspInit>
}
 8001482:	2000      	movs	r0, #0
 8001484:	bd08      	pop	{r3, pc}
	...

08001488 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_IncTick+0x10>)
 800148a:	6811      	ldr	r1, [r2, #0]
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_IncTick+0x14>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	440b      	add	r3, r1
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20019570 	.word	0x20019570
 800149c:	20000000 	.word	0x20000000

080014a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014a0:	4b01      	ldr	r3, [pc, #4]	; (80014a8 <HAL_GetTick+0x8>)
 80014a2:	6818      	ldr	r0, [r3, #0]
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20019570 	.word	0x20019570

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fff6 	bl	80014a0 <HAL_GetTick>
 80014b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014ba:	d002      	beq.n	80014c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_Delay+0x24>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	f7ff ffed 	bl	80014a0 <HAL_GetTick>
 80014c6:	1b40      	subs	r0, r0, r5
 80014c8:	42a0      	cmp	r0, r4
 80014ca:	d3fa      	bcc.n	80014c2 <HAL_Delay+0x16>
  {
  }
}
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	20000000 	.word	0x20000000

080014d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4906      	ldr	r1, [pc, #24]	; (80014f0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80014d6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	0200      	lsls	r0, r0, #8
 80014e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80014e8:	4a02      	ldr	r2, [pc, #8]	; (80014f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014ea:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80014ec:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	05fa0000 	.word	0x05fa0000

080014f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_NVIC_SetPriority+0x58>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001502:	f1c3 0407 	rsb	r4, r3, #7
 8001506:	2c04      	cmp	r4, #4
 8001508:	bf28      	it	cs
 800150a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150c:	1d1d      	adds	r5, r3, #4
 800150e:	2d06      	cmp	r5, #6
 8001510:	d914      	bls.n	800153c <HAL_NVIC_SetPriority+0x44>
 8001512:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 35ff 	mov.w	r5, #4294967295
 8001518:	fa05 f404 	lsl.w	r4, r5, r4
 800151c:	ea21 0104 	bic.w	r1, r1, r4
 8001520:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001522:	fa05 f303 	lsl.w	r3, r5, r3
 8001526:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800152c:	2800      	cmp	r0, #0
 800152e:	db07      	blt.n	8001540 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	0109      	lsls	r1, r1, #4
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_NVIC_SetPriority+0x5c>)
 8001536:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001538:	bc30      	pop	{r4, r5}
 800153a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153c:	2300      	movs	r3, #0
 800153e:	e7e9      	b.n	8001514 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	f000 000f 	and.w	r0, r0, #15
 8001544:	0109      	lsls	r1, r1, #4
 8001546:	b2c9      	uxtb	r1, r1
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_NVIC_SetPriority+0x60>)
 800154a:	5419      	strb	r1, [r3, r0]
 800154c:	e7f4      	b.n	8001538 <HAL_NVIC_SetPriority+0x40>
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	e000e400 	.word	0xe000e400
 8001558:	e000ed14 	.word	0xe000ed14

0800155c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800155c:	2800      	cmp	r0, #0
 800155e:	db07      	blt.n	8001570 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001560:	f000 021f 	and.w	r2, r0, #31
 8001564:	0940      	lsrs	r0, r0, #5
 8001566:	2301      	movs	r3, #1
 8001568:	4093      	lsls	r3, r2
 800156a:	4a02      	ldr	r2, [pc, #8]	; (8001574 <HAL_NVIC_EnableIRQ+0x18>)
 800156c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	3801      	subs	r0, #1
 800157a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800157e:	d20a      	bcs.n	8001596 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_SYSTICK_Config+0x24>)
 8001582:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_SYSTICK_Config+0x28>)
 8001586:	21f0      	movs	r1, #240	; 0xf0
 8001588:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	2000      	movs	r0, #0
 800158e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80015a4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015a6:	f003 fe89 	bl	80052bc <HAL_SYSTICK_Callback>
}
 80015aa:	bd08      	pop	{r3, pc}

080015ac <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	2b0f      	cmp	r3, #15
 80015b0:	f200 80e7 	bhi.w	8001782 <HAL_GPIO_Init+0x1d6>
{
 80015b4:	b4f0      	push	{r4, r5, r6, r7}
 80015b6:	b082      	sub	sp, #8
 80015b8:	e05e      	b.n	8001678 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015bc:	005f      	lsls	r7, r3, #1
 80015be:	2403      	movs	r4, #3
 80015c0:	40bc      	lsls	r4, r7
 80015c2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80015c6:	68cc      	ldr	r4, [r1, #12]
 80015c8:	40bc      	lsls	r4, r7
 80015ca:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80015cc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	684c      	ldr	r4, [r1, #4]
 80015d6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80015de:	6042      	str	r2, [r0, #4]
 80015e0:	e057      	b.n	8001692 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015e2:	08dc      	lsrs	r4, r3, #3
 80015e4:	3408      	adds	r4, #8
 80015e6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015ea:	f003 0207 	and.w	r2, r3, #7
 80015ee:	0096      	lsls	r6, r2, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	40b2      	lsls	r2, r6
 80015f4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015f8:	690a      	ldr	r2, [r1, #16]
 80015fa:	40b2      	lsls	r2, r6
 80015fc:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3] = temp;
 80015fe:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001602:	e05a      	b.n	80016ba <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001604:	2209      	movs	r2, #9
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001608:	2200      	movs	r2, #0
 800160a:	40b2      	lsls	r2, r6
 800160c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800160e:	3402      	adds	r4, #2
 8001610:	4e5c      	ldr	r6, [pc, #368]	; (8001784 <HAL_GPIO_Init+0x1d8>)
 8001612:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4a5c      	ldr	r2, [pc, #368]	; (8001788 <HAL_GPIO_Init+0x1dc>)
 8001618:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800161a:	43ea      	mvns	r2, r5
 800161c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001620:	684f      	ldr	r7, [r1, #4]
 8001622:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001626:	d001      	beq.n	800162c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8001628:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800162c:	4c56      	ldr	r4, [pc, #344]	; (8001788 <HAL_GPIO_Init+0x1dc>)
 800162e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001630:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001632:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001636:	684f      	ldr	r7, [r1, #4]
 8001638:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800163c:	d001      	beq.n	8001642 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800163e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->FTSR = temp;
 8001642:	4c51      	ldr	r4, [pc, #324]	; (8001788 <HAL_GPIO_Init+0x1dc>)
 8001644:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 8001646:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001648:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800164c:	684f      	ldr	r7, [r1, #4]
 800164e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001652:	d001      	beq.n	8001658 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001654:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001658:	4c4b      	ldr	r4, [pc, #300]	; (8001788 <HAL_GPIO_Init+0x1dc>)
 800165a:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800165e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001660:	684e      	ldr	r6, [r1, #4]
 8001662:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001666:	d001      	beq.n	800166c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001668:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->IMR = temp;
 800166c:	4c46      	ldr	r4, [pc, #280]	; (8001788 <HAL_GPIO_Init+0x1dc>)
 800166e:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001670:	3301      	adds	r3, #1
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f200 8082 	bhi.w	800177c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8001678:	2201      	movs	r2, #1
 800167a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167c:	680c      	ldr	r4, [r1, #0]
 800167e:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001682:	42aa      	cmp	r2, r5
 8001684:	d1f4      	bne.n	8001670 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001686:	684c      	ldr	r4, [r1, #4]
 8001688:	f004 0403 	and.w	r4, r4, #3
 800168c:	3c01      	subs	r4, #1
 800168e:	2c01      	cmp	r4, #1
 8001690:	d993      	bls.n	80015ba <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	684a      	ldr	r2, [r1, #4]
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	2a03      	cmp	r2, #3
 800169a:	d009      	beq.n	80016b0 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 800169c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800169e:	005e      	lsls	r6, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	40b2      	lsls	r2, r6
 80016a4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016a8:	688a      	ldr	r2, [r1, #8]
 80016aa:	40b2      	lsls	r2, r6
 80016ac:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80016ae:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	684a      	ldr	r2, [r1, #4]
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	2a02      	cmp	r2, #2
 80016b8:	d093      	beq.n	80015e2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80016ba:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016bc:	005e      	lsls	r6, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	40b2      	lsls	r2, r6
 80016c2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016c6:	684a      	ldr	r2, [r1, #4]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	40b2      	lsls	r2, r6
 80016ce:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80016d0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d2:	684a      	ldr	r2, [r1, #4]
 80016d4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80016d8:	d0ca      	beq.n	8001670 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4a2c      	ldr	r2, [pc, #176]	; (800178c <HAL_GPIO_Init+0x1e0>)
 80016dc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80016de:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80016e2:	6454      	str	r4, [r2, #68]	; 0x44
 80016e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016ea:	9201      	str	r2, [sp, #4]
 80016ec:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80016ee:	089c      	lsrs	r4, r3, #2
 80016f0:	1ca6      	adds	r6, r4, #2
 80016f2:	4a24      	ldr	r2, [pc, #144]	; (8001784 <HAL_GPIO_Init+0x1d8>)
 80016f4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	0096      	lsls	r6, r2, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	40b2      	lsls	r2, r6
 8001702:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_GPIO_Init+0x1e4>)
 8001708:	4290      	cmp	r0, r2
 800170a:	f43f af7d 	beq.w	8001608 <HAL_GPIO_Init+0x5c>
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	4290      	cmp	r0, r2
 8001714:	d022      	beq.n	800175c <HAL_GPIO_Init+0x1b0>
 8001716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800171a:	4290      	cmp	r0, r2
 800171c:	d020      	beq.n	8001760 <HAL_GPIO_Init+0x1b4>
 800171e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001722:	4290      	cmp	r0, r2
 8001724:	d01e      	beq.n	8001764 <HAL_GPIO_Init+0x1b8>
 8001726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172a:	4290      	cmp	r0, r2
 800172c:	d01c      	beq.n	8001768 <HAL_GPIO_Init+0x1bc>
 800172e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001732:	4290      	cmp	r0, r2
 8001734:	d01a      	beq.n	800176c <HAL_GPIO_Init+0x1c0>
 8001736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173a:	4290      	cmp	r0, r2
 800173c:	d018      	beq.n	8001770 <HAL_GPIO_Init+0x1c4>
 800173e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001742:	4290      	cmp	r0, r2
 8001744:	d016      	beq.n	8001774 <HAL_GPIO_Init+0x1c8>
 8001746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174a:	4290      	cmp	r0, r2
 800174c:	d014      	beq.n	8001778 <HAL_GPIO_Init+0x1cc>
 800174e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001752:	4290      	cmp	r0, r2
 8001754:	f43f af56 	beq.w	8001604 <HAL_GPIO_Init+0x58>
 8001758:	220a      	movs	r2, #10
 800175a:	e756      	b.n	800160a <HAL_GPIO_Init+0x5e>
 800175c:	2201      	movs	r2, #1
 800175e:	e754      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001760:	2202      	movs	r2, #2
 8001762:	e752      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001764:	2203      	movs	r2, #3
 8001766:	e750      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001768:	2204      	movs	r2, #4
 800176a:	e74e      	b.n	800160a <HAL_GPIO_Init+0x5e>
 800176c:	2205      	movs	r2, #5
 800176e:	e74c      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001770:	2206      	movs	r2, #6
 8001772:	e74a      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001774:	2207      	movs	r2, #7
 8001776:	e748      	b.n	800160a <HAL_GPIO_Init+0x5e>
 8001778:	2208      	movs	r2, #8
 800177a:	e746      	b.n	800160a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800177c:	b002      	add	sp, #8
 800177e:	bcf0      	pop	{r4, r5, r6, r7}
 8001780:	4770      	bx	lr
 8001782:	4770      	bx	lr
 8001784:	40013800 	.word	0x40013800
 8001788:	40013c00 	.word	0x40013c00
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001794:	b912      	cbnz	r2, 800179c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001796:	0409      	lsls	r1, r1, #16
 8001798:	6181      	str	r1, [r0, #24]
  }
}
 800179a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800179c:	6181      	str	r1, [r0, #24]
 800179e:	4770      	bx	lr

080017a0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	f012 0f02 	tst.w	r2, #2
 80017a8:	d001      	beq.n	80017ae <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ae:	6803      	ldr	r3, [r0, #0]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	f012 0f01 	tst.w	r2, #1
 80017b6:	d103      	bne.n	80017c0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	619a      	str	r2, [r3, #24]
  }
}
 80017c0:	4770      	bx	lr

080017c2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017c2:	b410      	push	{r4}
 80017c4:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017c6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80017ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017ce:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017d0:	4321      	orrs	r1, r4
 80017d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017d6:	6802      	ldr	r2, [r0, #0]
 80017d8:	6853      	ldr	r3, [r2, #4]
 80017da:	0d64      	lsrs	r4, r4, #21
 80017dc:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80017e0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80017e4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80017e8:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80017ec:	f044 0403 	orr.w	r4, r4, #3
 80017f0:	ea23 0404 	bic.w	r4, r3, r4
 80017f4:	4321      	orrs	r1, r4
 80017f6:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80017f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <I2C_IsErrorOccurred>:
{
 80017fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001800:	4604      	mov	r4, r0
 8001802:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001804:	6803      	ldr	r3, [r0, #0]
 8001806:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001808:	f012 0f10 	tst.w	r2, #16
 800180c:	d04a      	beq.n	80018a4 <I2C_IsErrorOccurred+0xa6>
 800180e:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001810:	2210      	movs	r2, #16
 8001812:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	f012 0f20 	tst.w	r2, #32
 800181e:	d13a      	bne.n	8001896 <I2C_IsErrorOccurred+0x98>
 8001820:	2d00      	cmp	r5, #0
 8001822:	d138      	bne.n	8001896 <I2C_IsErrorOccurred+0x98>
      if (Timeout != HAL_MAX_DELAY)
 8001824:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001828:	d0f5      	beq.n	8001816 <I2C_IsErrorOccurred+0x18>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff fe39 	bl	80014a0 <HAL_GetTick>
 800182e:	1bc0      	subs	r0, r0, r7
 8001830:	42b0      	cmp	r0, r6
 8001832:	d801      	bhi.n	8001838 <I2C_IsErrorOccurred+0x3a>
 8001834:	2e00      	cmp	r6, #0
 8001836:	d1ee      	bne.n	8001816 <I2C_IsErrorOccurred+0x18>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001838:	6821      	ldr	r1, [r4, #0]
 800183a:	684a      	ldr	r2, [r1, #4]
 800183c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001840:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001844:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001846:	6988      	ldr	r0, [r1, #24]
 8001848:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800184c:	d00b      	beq.n	8001866 <I2C_IsErrorOccurred+0x68>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800184e:	3b20      	subs	r3, #32
 8001850:	bf18      	it	ne
 8001852:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8001854:	b93a      	cbnz	r2, 8001866 <I2C_IsErrorOccurred+0x68>
 8001856:	b133      	cbz	r3, 8001866 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001858:	684b      	ldr	r3, [r1, #4]
 800185a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8001860:	f7ff fe1e 	bl	80014a0 <HAL_GetTick>
 8001864:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f013 0f20 	tst.w	r3, #32
 800186e:	d1d2      	bne.n	8001816 <I2C_IsErrorOccurred+0x18>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001870:	f7ff fe16 	bl	80014a0 <HAL_GetTick>
 8001874:	1bc0      	subs	r0, r0, r7
 8001876:	2819      	cmp	r0, #25
 8001878:	d9f5      	bls.n	8001866 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800187a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001882:	2320      	movs	r3, #32
 8001884:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800188e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8001892:	2501      	movs	r5, #1
 8001894:	e7e7      	b.n	8001866 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8001896:	2d00      	cmp	r5, #0
 8001898:	d140      	bne.n	800191c <I2C_IsErrorOccurred+0x11e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189a:	2220      	movs	r2, #32
 800189c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800189e:	2604      	movs	r6, #4
    status = HAL_ERROR;
 80018a0:	2501      	movs	r5, #1
 80018a2:	e001      	b.n	80018a8 <I2C_IsErrorOccurred+0xaa>
  uint32_t error_code = 0;
 80018a4:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	4635      	mov	r5, r6
  itflag = hi2c->Instance->ISR;
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018b0:	d005      	beq.n	80018be <I2C_IsErrorOccurred+0xc0>
    error_code |= HAL_I2C_ERROR_BERR;
 80018b2:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ba:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80018bc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80018c2:	d006      	beq.n	80018d2 <I2C_IsErrorOccurred+0xd4>
    error_code |= HAL_I2C_ERROR_OVR;
 80018c4:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80018d0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80018d6:	d023      	beq.n	8001920 <I2C_IsErrorOccurred+0x122>
    error_code |= HAL_I2C_ERROR_ARLO;
 80018d8:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80018e4:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff ff5a 	bl	80017a0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	6853      	ldr	r3, [r2, #4]
 80018f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80018f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80018f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001902:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001904:	431e      	orrs	r6, r3
 8001906:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	2320      	movs	r3, #32
 800190a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001914:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001918:	4628      	mov	r0, r5
 800191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800191c:	2604      	movs	r6, #4
 800191e:	e7c3      	b.n	80018a8 <I2C_IsErrorOccurred+0xaa>
  if (status != HAL_OK)
 8001920:	2d00      	cmp	r5, #0
 8001922:	d1e0      	bne.n	80018e6 <I2C_IsErrorOccurred+0xe8>
 8001924:	e7f8      	b.n	8001918 <I2C_IsErrorOccurred+0x11a>

08001926 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	4604      	mov	r4, r0
 800192a:	460d      	mov	r5, r1
 800192c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f013 0f02 	tst.w	r3, #2
 8001936:	d11d      	bne.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001938:	4632      	mov	r2, r6
 800193a:	4629      	mov	r1, r5
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff ff5e 	bl	80017fe <I2C_IsErrorOccurred>
 8001942:	b9c8      	cbnz	r0, 8001978 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001944:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001948:	d0f1      	beq.n	800192e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fda9 	bl	80014a0 <HAL_GetTick>
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	42a8      	cmp	r0, r5
 8001952:	d801      	bhi.n	8001958 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001954:	2d00      	cmp	r5, #0
 8001956:	d1ea      	bne.n	800192e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001960:	2320      	movs	r3, #32
 8001962:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800196c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001970:	2001      	movs	r0, #1
 8001972:	e000      	b.n	8001976 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001974:	2000      	movs	r0, #0
}
 8001976:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
 800197a:	e7fc      	b.n	8001976 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800197c <I2C_WaitOnFlagUntilTimeout>:
{
 800197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197e:	4605      	mov	r5, r0
 8001980:	460f      	mov	r7, r1
 8001982:	4616      	mov	r6, r2
 8001984:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	ea37 0303 	bics.w	r3, r7, r3
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	42b3      	cmp	r3, r6
 8001996:	d118      	bne.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001998:	f1b4 3fff 	cmp.w	r4, #4294967295
 800199c:	d0f3      	beq.n	8001986 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199e:	f7ff fd7f 	bl	80014a0 <HAL_GetTick>
 80019a2:	9b06      	ldr	r3, [sp, #24]
 80019a4:	1ac0      	subs	r0, r0, r3
 80019a6:	42a0      	cmp	r0, r4
 80019a8:	d801      	bhi.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x32>
 80019aa:	2c00      	cmp	r4, #0
 80019ac:	d1eb      	bne.n	8001986 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80019b0:	f043 0320 	orr.w	r3, r3, #32
 80019b4:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	2320      	movs	r3, #32
 80019b8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80019c2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
 80019c8:	e000      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80019ca:	2000      	movs	r0, #0
}
 80019cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019ce <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80019ce:	b570      	push	{r4, r5, r6, lr}
 80019d0:	4605      	mov	r5, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019d6:	682b      	ldr	r3, [r5, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f013 0f20 	tst.w	r3, #32
 80019de:	d11a      	bne.n	8001a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e0:	4632      	mov	r2, r6
 80019e2:	4621      	mov	r1, r4
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff ff0a 	bl	80017fe <I2C_IsErrorOccurred>
 80019ea:	b9b0      	cbnz	r0, 8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ec:	f7ff fd58 	bl	80014a0 <HAL_GetTick>
 80019f0:	1b80      	subs	r0, r0, r6
 80019f2:	42a0      	cmp	r0, r4
 80019f4:	d801      	bhi.n	80019fa <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d1ed      	bne.n	80019d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	2320      	movs	r3, #32
 8001a04:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001a0e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
}
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7fc      	b.n	8001a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e7fa      	b.n	8001a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001a1e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001a1e:	b570      	push	{r4, r5, r6, lr}
 8001a20:	4604      	mov	r4, r0
 8001a22:	460d      	mov	r5, r1
 8001a24:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f013 0f04 	tst.w	r3, #4
 8001a2e:	d149      	bne.n	8001ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a30:	4632      	mov	r2, r6
 8001a32:	4629      	mov	r1, r5
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff fee2 	bl	80017fe <I2C_IsErrorOccurred>
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d143      	bne.n	8001ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	f012 0f20 	tst.w	r2, #32
 8001a48:	d113      	bne.n	8001a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4a:	f7ff fd29 	bl	80014a0 <HAL_GetTick>
 8001a4e:	1b80      	subs	r0, r0, r6
 8001a50:	42a8      	cmp	r0, r5
 8001a52:	d801      	bhi.n	8001a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001a54:	2d00      	cmp	r5, #0
 8001a56:	d1e6      	bne.n	8001a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	2320      	movs	r3, #32
 8001a62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a6c:	2101      	movs	r1, #1
}
 8001a6e:	4608      	mov	r0, r1
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	f012 0f04 	tst.w	r2, #4
 8001a78:	d002      	beq.n	8001a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001a7a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	d1f6      	bne.n	8001a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	f012 0f10 	tst.w	r2, #16
 8001a86:	d01a      	beq.n	8001abe <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a88:	2210      	movs	r2, #16
 8001a8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001a96:	6821      	ldr	r1, [r4, #0]
 8001a98:	684b      	ldr	r3, [r1, #4]
 8001a9a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001a9e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001aa2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001aac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001ab6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001aba:	2101      	movs	r1, #1
 8001abc:	e7d7      	b.n	8001a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	6463      	str	r3, [r4, #68]	; 0x44
 8001ac2:	e7e5      	b.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	e7d2      	b.n	8001a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001ac8:	2101      	movs	r1, #1
 8001aca:	e7d0      	b.n	8001a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08001acc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d057      	beq.n	8001b80 <HAL_I2C_Init+0xb4>
{
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d041      	beq.n	8001b60 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	2324      	movs	r3, #36	; 0x24
 8001ade:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aec:	6863      	ldr	r3, [r4, #4]
 8001aee:	6822      	ldr	r2, [r4, #0]
 8001af0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001af4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001af6:	6822      	ldr	r2, [r4, #0]
 8001af8:	6893      	ldr	r3, [r2, #8]
 8001afa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001afe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b00:	68e3      	ldr	r3, [r4, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d031      	beq.n	8001b6a <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b06:	68a3      	ldr	r3, [r4, #8]
 8001b08:	6822      	ldr	r2, [r4, #0]
 8001b0a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001b0e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b10:	68e3      	ldr	r3, [r4, #12]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d02f      	beq.n	8001b76 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	6851      	ldr	r1, [r2, #4]
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_I2C_Init+0xb8>)
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b20:	6822      	ldr	r2, [r4, #0]
 8001b22:	68d3      	ldr	r3, [r2, #12]
 8001b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b28:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b2a:	6923      	ldr	r3, [r4, #16]
 8001b2c:	6962      	ldr	r2, [r4, #20]
 8001b2e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b30:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b38:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b3a:	69e3      	ldr	r3, [r4, #28]
 8001b3c:	6a21      	ldr	r1, [r4, #32]
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b44:	6822      	ldr	r2, [r4, #0]
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b4e:	2000      	movs	r0, #0
 8001b50:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	2320      	movs	r3, #32
 8001b54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b58:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001b5e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001b60:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001b64:	f003 fc9e 	bl	80054a4 <HAL_I2C_MspInit>
 8001b68:	e7b8      	b.n	8001adc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b6a:	68a3      	ldr	r3, [r4, #8]
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	6093      	str	r3, [r2, #8]
 8001b74:	e7cc      	b.n	8001b10 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	e7ca      	b.n	8001b16 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
}
 8001b82:	4770      	bx	lr
 8001b84:	02008000 	.word	0x02008000

08001b88 <HAL_I2C_Master_Transmit>:
{
 8001b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b8c:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001b92:	b2ed      	uxtb	r5, r5
 8001b94:	2d20      	cmp	r5, #32
 8001b96:	f040 80a4 	bne.w	8001ce2 <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8001b9a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001b9e:	2c01      	cmp	r4, #1
 8001ba0:	f000 80a4 	beq.w	8001cec <HAL_I2C_Master_Transmit+0x164>
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	4617      	mov	r7, r2
 8001ba8:	460e      	mov	r6, r1
 8001baa:	4604      	mov	r4, r0
 8001bac:	f04f 0901 	mov.w	r9, #1
 8001bb0:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001bb4:	f7ff fc74 	bl	80014a0 <HAL_GetTick>
 8001bb8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bba:	9000      	str	r0, [sp, #0]
 8001bbc:	2319      	movs	r3, #25
 8001bbe:	464a      	mov	r2, r9
 8001bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fed9 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f040 8090 	bne.w	8001cf0 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd0:	2321      	movs	r3, #33	; 0x21
 8001bd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001be0:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001be2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001be6:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2bff      	cmp	r3, #255	; 0xff
 8001bee:	d90a      	bls.n	8001c06 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf0:	22ff      	movs	r2, #255	; 0xff
 8001bf2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_I2C_Master_Transmit+0x178>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bfc:	4631      	mov	r1, r6
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7ff fddf 	bl	80017c2 <I2C_TransferConfig>
 8001c04:	e018      	b.n	8001c38 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001c06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_I2C_Master_Transmit+0x178>)
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	4631      	mov	r1, r6
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff fdd2 	bl	80017c2 <I2C_TransferConfig>
 8001c1e:	e00b      	b.n	8001c38 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001c20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c22:	b292      	uxth	r2, r2
 8001c24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	4631      	mov	r1, r6
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff fdc5 	bl	80017c2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d033      	beq.n	8001ca8 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c40:	462a      	mov	r2, r5
 8001c42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff fe6e 	bl	8001926 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d152      	bne.n	8001cf4 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	7812      	ldrb	r2, [r2, #0]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d0e1      	beq.n	8001c38 <HAL_I2C_Master_Transmit+0xb0>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1df      	bne.n	8001c38 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c78:	9500      	str	r5, [sp, #0]
 8001c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fe7b 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d136      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d9c6      	bls.n	8001c20 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c92:	22ff      	movs	r2, #255	; 0xff
 8001c94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c9e:	4631      	mov	r1, r6
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fd8e 	bl	80017c2 <I2C_TransferConfig>
 8001ca6:	e7c7      	b.n	8001c38 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	462a      	mov	r2, r5
 8001caa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fe8e 	bl	80019ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	bb10      	cbnz	r0, 8001cfc <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb6:	6822      	ldr	r2, [r4, #0]
 8001cb8:	2120      	movs	r1, #32
 8001cba:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	6842      	ldr	r2, [r0, #4]
 8001cc0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001cc4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001cc8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001cdc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001ce0:	e000      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	b003      	add	sp, #12
 8001ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001cec:	2302      	movs	r3, #2
 8001cee:	e7f9      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e7f7      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e7f5      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e7f3      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e7f1      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0x15c>
 8001d00:	80002000 	.word	0x80002000

08001d04 <HAL_I2C_Master_Receive>:
{
 8001d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d08:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8001d0e:	b2ed      	uxtb	r5, r5
 8001d10:	2d20      	cmp	r5, #32
 8001d12:	f040 80a4 	bne.w	8001e5e <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 8001d16:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001d1a:	2c01      	cmp	r4, #1
 8001d1c:	f000 80a4 	beq.w	8001e68 <HAL_I2C_Master_Receive+0x164>
 8001d20:	4698      	mov	r8, r3
 8001d22:	4617      	mov	r7, r2
 8001d24:	460e      	mov	r6, r1
 8001d26:	4604      	mov	r4, r0
 8001d28:	f04f 0901 	mov.w	r9, #1
 8001d2c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001d30:	f7ff fbb6 	bl	80014a0 <HAL_GetTick>
 8001d34:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d36:	9000      	str	r0, [sp, #0]
 8001d38:	2319      	movs	r3, #25
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff fe1b 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	f040 8090 	bne.w	8001e6c <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d4c:	2322      	movs	r3, #34	; 0x22
 8001d4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d52:	2310      	movs	r3, #16
 8001d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001d5c:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d5e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d62:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2bff      	cmp	r3, #255	; 0xff
 8001d6a:	d90a      	bls.n	8001d82 <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_I2C_Master_Receive+0x178>)
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d78:	4631      	mov	r1, r6
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff fd21 	bl	80017c2 <I2C_TransferConfig>
 8001d80:	e018      	b.n	8001db4 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8001d82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d84:	b292      	uxth	r2, r2
 8001d86:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_I2C_Master_Receive+0x178>)
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4631      	mov	r1, r6
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff fd14 	bl	80017c2 <I2C_TransferConfig>
 8001d9a:	e00b      	b.n	8001db4 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8001d9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001da2:	2300      	movs	r3, #0
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	4631      	mov	r1, r6
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff fd07 	bl	80017c2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001db4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d033      	beq.n	8001e24 <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fe2c 	bl	8001a1e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d152      	bne.n	8001e70 <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dd0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001dd8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001de0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001de2:	3a01      	subs	r2, #1
 8001de4:	b292      	uxth	r2, r2
 8001de6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001de8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dea:	b292      	uxth	r2, r2
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	d0e1      	beq.n	8001db4 <HAL_I2C_Master_Receive+0xb0>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1df      	bne.n	8001db4 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001df4:	9500      	str	r5, [sp, #0]
 8001df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fdbd 	bl	800197c <I2C_WaitOnFlagUntilTimeout>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d136      	bne.n	8001e74 <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d9c6      	bls.n	8001d9c <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1a:	4631      	mov	r1, r6
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff fcd0 	bl	80017c2 <I2C_TransferConfig>
 8001e22:	e7c7      	b.n	8001db4 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e24:	462a      	mov	r2, r5
 8001e26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff fdd0 	bl	80019ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	bb10      	cbnz	r0, 8001e78 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	2120      	movs	r1, #32
 8001e36:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001e38:	6820      	ldr	r0, [r4, #0]
 8001e3a:	6842      	ldr	r2, [r0, #4]
 8001e3c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001e40:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001e44:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e52:	2200      	movs	r2, #0
 8001e54:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001e58:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001e5c:	e000      	b.n	8001e60 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	b003      	add	sp, #12
 8001e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e7f9      	b.n	8001e60 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e7f7      	b.n	8001e60 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e7f5      	b.n	8001e60 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e7f3      	b.n	8001e60 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e7f1      	b.n	8001e60 <HAL_I2C_Master_Receive+0x15c>
 8001e7c:	80002400 	.word	0x80002400

08001e80 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d124      	bne.n	8001ed4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d022      	beq.n	8001ed8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001e92:	2301      	movs	r3, #1
 8001e94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	2324      	movs	r3, #36	; 0x24
 8001e9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9e:	6802      	ldr	r2, [r0, #0]
 8001ea0:	6813      	ldr	r3, [r2, #0]
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea8:	6802      	ldr	r2, [r0, #0]
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb2:	6802      	ldr	r2, [r0, #0]
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	4319      	orrs	r1, r3
 8001eb8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eba:	6802      	ldr	r2, [r0, #0]
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001ed8:	2002      	movs	r0, #2
  }
}
 8001eda:	4770      	bx	lr

08001edc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001edc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d122      	bne.n	8001f2c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d020      	beq.n	8001f30 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	2324      	movs	r3, #36	; 0x24
 8001ef6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efa:	6802      	ldr	r2, [r0, #0]
 8001efc:	6813      	ldr	r3, [r2, #0]
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f0c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f10:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f12:	6802      	ldr	r2, [r0, #0]
 8001f14:	6813      	ldr	r3, [r2, #0]
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f22:	2300      	movs	r3, #0
 8001f24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f30:	2002      	movs	r0, #2
  }
}
 8001f32:	4770      	bx	lr

08001f34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f38:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3a:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001f3c:	00ca      	lsls	r2, r1, #3
 8001f3e:	1a52      	subs	r2, r2, r1
 8001f40:	0093      	lsls	r3, r2, #2
 8001f42:	4403      	add	r3, r0
 8001f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d857      	bhi.n	8001ffc <PCD_WriteEmptyTxFifo+0xc8>
 8001f4c:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f4e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001f50:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001f54:	00a2      	lsls	r2, r4, #2
 8001f56:	4402      	add	r2, r0
 8001f58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d300      	bcc.n	8001f60 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8001f5e:	461a      	mov	r2, r3
 8001f60:	460c      	mov	r4, r1
 8001f62:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001f64:	f102 0a03 	add.w	sl, r2, #3
 8001f68:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f6c:	e016      	b.n	8001f9c <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001f6e:	f109 0a03 	add.w	sl, r9, #3
 8001f72:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f76:	00e3      	lsls	r3, r4, #3
 8001f78:	1b1b      	subs	r3, r3, r4
 8001f7a:	009d      	lsls	r5, r3, #2
 8001f7c:	4435      	add	r5, r6
 8001f7e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001f80:	7c33      	ldrb	r3, [r6, #16]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	fa1f f389 	uxth.w	r3, r9
 8001f88:	b2e2      	uxtb	r2, r4
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	f001 ff28 	bl	8003de0 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001f90:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001f92:	444b      	add	r3, r9
 8001f94:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001f96:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001f98:	444b      	add	r3, r9
 8001f9a:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f9c:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4553      	cmp	r3, sl
 8001faa:	d313      	bcc.n	8001fd4 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fac:	00e3      	lsls	r3, r4, #3
 8001fae:	1b1b      	subs	r3, r3, r4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	4432      	add	r2, r6
 8001fb4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001fb6:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fb8:	4299      	cmp	r1, r3
 8001fba:	d20b      	bcs.n	8001fd4 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fbc:	b153      	cbz	r3, 8001fd4 <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 8001fbe:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8001fc0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001fc4:	008a      	lsls	r2, r1, #2
 8001fc6:	4432      	add	r2, r6
 8001fc8:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 8001fcc:	4599      	cmp	r9, r3
 8001fce:	d3ce      	bcc.n	8001f6e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	e7cc      	b.n	8001f6e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fd4:	00e3      	lsls	r3, r4, #3
 8001fd6:	1b1b      	subs	r3, r3, r4
 8001fd8:	0098      	lsls	r0, r3, #2
 8001fda:	4406      	add	r6, r0
 8001fdc:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8001fde:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d80f      	bhi.n	8002004 <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fe4:	f004 040f 	and.w	r4, r4, #15
 8001fe8:	2101      	movs	r1, #1
 8001fea:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fec:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 8001ff0:	ea24 0401 	bic.w	r4, r4, r1
 8001ff4:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	e000      	b.n	8001ffe <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 8001ffc:	2001      	movs	r0, #1
}
 8001ffe:	b002      	add	sp, #8
 8002000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8002004:	2000      	movs	r0, #0
 8002006:	e7fa      	b.n	8001ffe <PCD_WriteEmptyTxFifo+0xca>

08002008 <HAL_PCD_Init>:
{
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800200c:	2800      	cmp	r0, #0
 800200e:	f000 8091 	beq.w	8002134 <HAL_PCD_Init+0x12c>
 8002012:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8002014:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002016:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800201a:	b323      	cbz	r3, 8002066 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 800201c:	2303      	movs	r3, #3
 800201e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002022:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002024:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002028:	d101      	bne.n	800202e <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800202e:	6820      	ldr	r0, [r4, #0]
 8002030:	f001 fc68 	bl	8003904 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002034:	4625      	mov	r5, r4
 8002036:	f855 7b10 	ldr.w	r7, [r5], #16
 800203a:	466e      	mov	r6, sp
 800203c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002042:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002044:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002048:	e886 0003 	stmia.w	r6, {r0, r1}
 800204c:	1d23      	adds	r3, r4, #4
 800204e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002050:	4638      	mov	r0, r7
 8002052:	f001 fb9d 	bl	8003790 <USB_CoreInit>
 8002056:	b158      	cbz	r0, 8002070 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002058:	2302      	movs	r3, #2
 800205a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800205e:	2501      	movs	r5, #1
}
 8002060:	4628      	mov	r0, r5
 8002062:	b00b      	add	sp, #44	; 0x2c
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002066:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800206a:	f003 fb0d 	bl	8005688 <HAL_PCD_MspInit>
 800206e:	e7d5      	b.n	800201c <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002070:	2100      	movs	r1, #0
 8002072:	6820      	ldr	r0, [r4, #0]
 8002074:	f002 f8b7 	bl	80041e6 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	e015      	b.n	80020a8 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 800207c:	00d9      	lsls	r1, r3, #3
 800207e:	1ac8      	subs	r0, r1, r3
 8002080:	0082      	lsls	r2, r0, #2
 8002082:	4422      	add	r2, r4
 8002084:	2001      	movs	r0, #1
 8002086:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800208a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800208e:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002092:	2000      	movs	r0, #0
 8002094:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8002098:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800209a:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 800209c:	1aca      	subs	r2, r1, r3
 800209e:	0091      	lsls	r1, r2, #2
 80020a0:	4421      	add	r1, r4
 80020a2:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	6865      	ldr	r5, [r4, #4]
 80020aa:	42ab      	cmp	r3, r5
 80020ac:	d3e6      	bcc.n	800207c <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	e015      	b.n	80020de <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 80020b2:	00d8      	lsls	r0, r3, #3
 80020b4:	1ac1      	subs	r1, r0, r3
 80020b6:	008a      	lsls	r2, r1, #2
 80020b8:	4422      	add	r2, r4
 80020ba:	2100      	movs	r1, #0
 80020bc:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80020c0:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020c8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020cc:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d0:	1ac2      	subs	r2, r0, r3
 80020d2:	0090      	lsls	r0, r2, #2
 80020d4:	4420      	add	r0, r4
 80020d6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	3301      	adds	r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	429d      	cmp	r5, r3
 80020e0:	d8e7      	bhi.n	80020b2 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e2:	4625      	mov	r5, r4
 80020e4:	f855 7b10 	ldr.w	r7, [r5], #16
 80020e8:	466e      	mov	r6, sp
 80020ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020f6:	e886 0003 	stmia.w	r6, {r0, r1}
 80020fa:	1d23      	adds	r3, r4, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	4638      	mov	r0, r7
 8002100:	f001 fc58 	bl	80039b4 <USB_DevInit>
 8002104:	4605      	mov	r5, r0
 8002106:	b960      	cbnz	r0, 8002122 <HAL_PCD_Init+0x11a>
  hpcd->USB_Address = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800210e:	2301      	movs	r3, #1
 8002110:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8002114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002116:	2b01      	cmp	r3, #1
 8002118:	d008      	beq.n	800212c <HAL_PCD_Init+0x124>
  (void)USB_DevDisconnect(hpcd->Instance);
 800211a:	6820      	ldr	r0, [r4, #0]
 800211c:	f002 f820 	bl	8004160 <USB_DevDisconnect>
  return HAL_OK;
 8002120:	e79e      	b.n	8002060 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002122:	2302      	movs	r3, #2
 8002124:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002128:	2501      	movs	r5, #1
 800212a:	e799      	b.n	8002060 <HAL_PCD_Init+0x58>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800212c:	4620      	mov	r0, r4
 800212e:	f000 fcbd 	bl	8002aac <HAL_PCDEx_ActivateLPM>
 8002132:	e7f2      	b.n	800211a <HAL_PCD_Init+0x112>
    return HAL_ERROR;
 8002134:	2501      	movs	r5, #1
 8002136:	e793      	b.n	8002060 <HAL_PCD_Init+0x58>

08002138 <HAL_PCD_Start>:
  __HAL_LOCK(hpcd);
 8002138:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800213c:	2b01      	cmp	r3, #1
 800213e:	d00e      	beq.n	800215e <HAL_PCD_Start+0x26>
{
 8002140:	b510      	push	{r4, lr}
 8002142:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002144:	2301      	movs	r3, #1
 8002146:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800214a:	6800      	ldr	r0, [r0, #0]
 800214c:	f001 fbd4 	bl	80038f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002150:	6820      	ldr	r0, [r4, #0]
 8002152:	f001 fff7 	bl	8004144 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002156:	2000      	movs	r0, #0
 8002158:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800215c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800215e:	2002      	movs	r0, #2
}
 8002160:	4770      	bx	lr
	...

08002164 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800216c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800216e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002178:	6921      	ldr	r1, [r4, #16]
 800217a:	2901      	cmp	r1, #1
 800217c:	d011      	beq.n	80021a2 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800217e:	4937      	ldr	r1, [pc, #220]	; (800225c <PCD_EP_OutXfrComplete_int+0xf8>)
 8002180:	428e      	cmp	r6, r1
 8002182:	d054      	beq.n	800222e <PCD_EP_OutXfrComplete_int+0xca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002184:	b93d      	cbnz	r5, 8002196 <PCD_EP_OutXfrComplete_int+0x32>
 8002186:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800218a:	0093      	lsls	r3, r2, #2
 800218c:	4423      	add	r3, r4
 800218e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002192:	2b00      	cmp	r3, #0
 8002194:	d05c      	beq.n	8002250 <PCD_EP_OutXfrComplete_int+0xec>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002196:	b2e9      	uxtb	r1, r5
 8002198:	4620      	mov	r0, r4
 800219a:	f003 fac1 	bl	8005720 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800219e:	2000      	movs	r0, #0
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021a2:	f012 0f08 	tst.w	r2, #8
 80021a6:	d009      	beq.n	80021bc <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a8:	492d      	ldr	r1, [pc, #180]	; (8002260 <PCD_EP_OutXfrComplete_int+0xfc>)
 80021aa:	428e      	cmp	r6, r1
 80021ac:	d9f7      	bls.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
 80021ae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021b2:	d0f4      	beq.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	e7f0      	b.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021bc:	f012 0f20 	tst.w	r2, #32
 80021c0:	d128      	bne.n	8002214 <PCD_EP_OutXfrComplete_int+0xb0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021c2:	f012 0f28 	tst.w	r2, #40	; 0x28
 80021c6:	d1ea      	bne.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	4925      	ldr	r1, [pc, #148]	; (8002260 <PCD_EP_OutXfrComplete_int+0xfc>)
 80021ca:	428e      	cmp	r6, r1
 80021cc:	d902      	bls.n	80021d4 <PCD_EP_OutXfrComplete_int+0x70>
 80021ce:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80021d2:	d122      	bne.n	800221a <PCD_EP_OutXfrComplete_int+0xb6>
          hpcd->OUT_ep[epnum].maxpacket -
 80021d4:	00e9      	lsls	r1, r5, #3
 80021d6:	1b49      	subs	r1, r1, r5
 80021d8:	008a      	lsls	r2, r1, #2
 80021da:	4422      	add	r2, r4
 80021dc:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021e6:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021e8:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021ec:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80021f0:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 80021f4:	440b      	add	r3, r1
 80021f6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021fa:	b935      	cbnz	r5, 800220a <PCD_EP_OutXfrComplete_int+0xa6>
 80021fc:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002200:	0093      	lsls	r3, r2, #2
 8002202:	4423      	add	r3, r4
 8002204:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002208:	b15b      	cbz	r3, 8002222 <PCD_EP_OutXfrComplete_int+0xbe>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800220a:	b2e9      	uxtb	r1, r5
 800220c:	4620      	mov	r0, r4
 800220e:	f003 fa87 	bl	8005720 <HAL_PCD_DataOutStageCallback>
 8002212:	e7c4      	b.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002214:	2220      	movs	r2, #32
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e7c1      	b.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800221a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e7bd      	b.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002222:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002226:	2101      	movs	r1, #1
 8002228:	f002 f81e 	bl	8004268 <USB_EP0_OutStart>
 800222c:	e7ed      	b.n	800220a <PCD_EP_OutXfrComplete_int+0xa6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800222e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002232:	d109      	bne.n	8002248 <PCD_EP_OutXfrComplete_int+0xe4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002234:	f012 0f20 	tst.w	r2, #32
 8002238:	d001      	beq.n	800223e <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800223a:	2220      	movs	r2, #32
 800223c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800223e:	b2e9      	uxtb	r1, r5
 8002240:	4620      	mov	r0, r4
 8002242:	f003 fa6d 	bl	8005720 <HAL_PCD_DataOutStageCallback>
 8002246:	e7aa      	b.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002248:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	e7a6      	b.n	800219e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002250:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002254:	2100      	movs	r1, #0
 8002256:	f002 f807 	bl	8004268 <USB_EP0_OutStart>
 800225a:	e79c      	b.n	8002196 <PCD_EP_OutXfrComplete_int+0x32>
 800225c:	4f54310a 	.word	0x4f54310a
 8002260:	4f54300a 	.word	0x4f54300a

08002264 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002268:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800226a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002270:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002276:	429d      	cmp	r5, r3
 8002278:	d907      	bls.n	800228a <PCD_EP_OutSetupPacket_int+0x26>
 800227a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800227e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002282:	d002      	beq.n	800228a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002288:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800228a:	4620      	mov	r0, r4
 800228c:	f003 fa40 	bl	8005710 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002292:	429d      	cmp	r5, r3
 8002294:	d902      	bls.n	800229c <PCD_EP_OutSetupPacket_int+0x38>
 8002296:	6923      	ldr	r3, [r4, #16]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d001      	beq.n	80022a0 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800229c:	2000      	movs	r0, #0
 800229e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022a0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80022a4:	2101      	movs	r1, #1
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	f001 ffde 	bl	8004268 <USB_EP0_OutStart>
 80022ac:	e7f6      	b.n	800229c <PCD_EP_OutSetupPacket_int+0x38>
 80022ae:	bf00      	nop
 80022b0:	4f54300a 	.word	0x4f54300a

080022b4 <HAL_PCD_IRQHandler>:
{
 80022b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ba:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022bc:	4628      	mov	r0, r5
 80022be:	f001 ff8e 	bl	80041de <USB_GetMode>
 80022c2:	b108      	cbz	r0, 80022c8 <HAL_PCD_IRQHandler+0x14>
}
 80022c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c8:	462f      	mov	r7, r5
 80022ca:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	f001 ff55 	bl	800417c <USB_ReadInterrupts>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d0f6      	beq.n	80022c4 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022d6:	6820      	ldr	r0, [r4, #0]
 80022d8:	f001 ff50 	bl	800417c <USB_ReadInterrupts>
 80022dc:	f010 0f02 	tst.w	r0, #2
 80022e0:	d004      	beq.n	80022ec <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	6953      	ldr	r3, [r2, #20]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022ec:	6820      	ldr	r0, [r4, #0]
 80022ee:	f001 ff45 	bl	800417c <USB_ReadInterrupts>
 80022f2:	f010 0f10 	tst.w	r0, #16
 80022f6:	d015      	beq.n	8002324 <HAL_PCD_IRQHandler+0x70>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	6993      	ldr	r3, [r2, #24]
 80022fc:	f023 0310 	bic.w	r3, r3, #16
 8002300:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8002302:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002306:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800230a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800230e:	2b02      	cmp	r3, #2
 8002310:	f000 8085 	beq.w	800241e <HAL_PCD_IRQHandler+0x16a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002314:	2b06      	cmp	r3, #6
 8002316:	f000 80a5 	beq.w	8002464 <HAL_PCD_IRQHandler+0x1b0>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	6993      	ldr	r3, [r2, #24]
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002324:	6820      	ldr	r0, [r4, #0]
 8002326:	f001 ff29 	bl	800417c <USB_ReadInterrupts>
 800232a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800232e:	f040 80ad 	bne.w	800248c <HAL_PCD_IRQHandler+0x1d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002332:	6820      	ldr	r0, [r4, #0]
 8002334:	f001 ff22 	bl	800417c <USB_ReadInterrupts>
 8002338:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800233c:	f040 80f1 	bne.w	8002522 <HAL_PCD_IRQHandler+0x26e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	f001 ff1b 	bl	800417c <USB_ReadInterrupts>
 8002346:	2800      	cmp	r0, #0
 8002348:	f2c0 815f 	blt.w	800260a <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800234c:	6820      	ldr	r0, [r4, #0]
 800234e:	f001 ff15 	bl	800417c <USB_ReadInterrupts>
 8002352:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002356:	d00a      	beq.n	800236e <HAL_PCD_IRQHandler+0xba>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002358:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800235c:	f013 0f01 	tst.w	r3, #1
 8002360:	f040 816d 	bne.w	800263e <HAL_PCD_IRQHandler+0x38a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002364:	6822      	ldr	r2, [r4, #0]
 8002366:	6953      	ldr	r3, [r2, #20]
 8002368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800236e:	6820      	ldr	r0, [r4, #0]
 8002370:	f001 ff04 	bl	800417c <USB_ReadInterrupts>
 8002374:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8002378:	d015      	beq.n	80023a6 <HAL_PCD_IRQHandler+0xf2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	6953      	ldr	r3, [r2, #20]
 800237e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002382:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8002384:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 815c 	bne.w	8002646 <HAL_PCD_IRQHandler+0x392>
        hpcd->LPM_State = LPM_L1;
 800238e:	2101      	movs	r1, #1
 8002390:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800239c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023a0:	4620      	mov	r0, r4
 80023a2:	f003 fa79 	bl	8005898 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023a6:	6820      	ldr	r0, [r4, #0]
 80023a8:	f001 fee8 	bl	800417c <USB_ReadInterrupts>
 80023ac:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80023b0:	f040 814d 	bne.w	800264e <HAL_PCD_IRQHandler+0x39a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	f001 fee1 	bl	800417c <USB_ReadInterrupts>
 80023ba:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80023be:	f040 81a5 	bne.w	800270c <HAL_PCD_IRQHandler+0x458>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	f001 feda 	bl	800417c <USB_ReadInterrupts>
 80023c8:	f010 0f08 	tst.w	r0, #8
 80023cc:	f040 81b6 	bne.w	800273c <HAL_PCD_IRQHandler+0x488>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023d0:	6820      	ldr	r0, [r4, #0]
 80023d2:	f001 fed3 	bl	800417c <USB_ReadInterrupts>
 80023d6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80023da:	f040 81b8 	bne.w	800274e <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023de:	6820      	ldr	r0, [r4, #0]
 80023e0:	f001 fecc 	bl	800417c <USB_ReadInterrupts>
 80023e4:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80023e8:	f040 81bb 	bne.w	8002762 <HAL_PCD_IRQHandler+0x4ae>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	f001 fec5 	bl	800417c <USB_ReadInterrupts>
 80023f2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80023f6:	f040 81be 	bne.w	8002776 <HAL_PCD_IRQHandler+0x4c2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	f001 febe 	bl	800417c <USB_ReadInterrupts>
 8002400:	f010 0f04 	tst.w	r0, #4
 8002404:	f43f af5e 	beq.w	80022c4 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800240c:	f015 0f04 	tst.w	r5, #4
 8002410:	f040 81ba 	bne.w	8002788 <HAL_PCD_IRQHandler+0x4d4>
      hpcd->Instance->GOTGINT |= temp;
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	6853      	ldr	r3, [r2, #4]
 8002418:	432b      	orrs	r3, r5
 800241a:	6053      	str	r3, [r2, #4]
 800241c:	e752      	b.n	80022c4 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800241e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002422:	ea18 0f03 	tst.w	r8, r3
 8002426:	f43f af78 	beq.w	800231a <HAL_PCD_IRQHandler+0x66>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800242a:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 800242e:	ebab 0309 	sub.w	r3, fp, r9
 8002432:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002436:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002438:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800243c:	f3c8 020a 	ubfx	r2, r8, #0, #11
 8002440:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8002444:	4628      	mov	r0, r5
 8002446:	f001 fdeb 	bl	8004020 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244a:	f3c8 080a 	ubfx	r8, r8, #0, #11
 800244e:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8002452:	4443      	add	r3, r8
 8002454:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002458:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 800245c:	4443      	add	r3, r8
 800245e:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8002462:	e75a      	b.n	800231a <HAL_PCD_IRQHandler+0x66>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002464:	2208      	movs	r2, #8
 8002466:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800246a:	4628      	mov	r0, r5
 800246c:	f001 fdd8 	bl	8004020 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002470:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8002474:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002478:	eba3 0109 	sub.w	r1, r3, r9
 800247c:	008a      	lsls	r2, r1, #2
 800247e:	4422      	add	r2, r4
 8002480:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8002484:	4443      	add	r3, r8
 8002486:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800248a:	e746      	b.n	800231a <HAL_PCD_IRQHandler+0x66>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	f001 fe79 	bl	8004184 <USB_ReadDevAllOutEpInterrupt>
 8002492:	4680      	mov	r8, r0
      epnum = 0U;
 8002494:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002496:	e017      	b.n	80024c8 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002498:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800249c:	2201      	movs	r2, #1
 800249e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024a2:	4649      	mov	r1, r9
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fe5d 	bl	8002164 <PCD_EP_OutXfrComplete_int>
 80024aa:	e01d      	b.n	80024e8 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024ac:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024b0:	2208      	movs	r2, #8
 80024b2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024b6:	4649      	mov	r1, r9
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff fed3 	bl	8002264 <PCD_EP_OutSetupPacket_int>
 80024be:	e016      	b.n	80024ee <HAL_PCD_IRQHandler+0x23a>
        epnum++;
 80024c0:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80024c4:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80024c8:	f1b8 0f00 	cmp.w	r8, #0
 80024cc:	f43f af31 	beq.w	8002332 <HAL_PCD_IRQHandler+0x7e>
        if ((ep_intr & 0x1U) != 0U)
 80024d0:	f018 0f01 	tst.w	r8, #1
 80024d4:	d0f4      	beq.n	80024c0 <HAL_PCD_IRQHandler+0x20c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d6:	fa5f f189 	uxtb.w	r1, r9
 80024da:	6820      	ldr	r0, [r4, #0]
 80024dc:	f001 fe62 	bl	80041a4 <USB_ReadDevOutEPInterrupt>
 80024e0:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024e2:	f010 0f01 	tst.w	r0, #1
 80024e6:	d1d7      	bne.n	8002498 <HAL_PCD_IRQHandler+0x1e4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024e8:	f01a 0f08 	tst.w	sl, #8
 80024ec:	d1de      	bne.n	80024ac <HAL_PCD_IRQHandler+0x1f8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024ee:	f01a 0f10 	tst.w	sl, #16
 80024f2:	d004      	beq.n	80024fe <HAL_PCD_IRQHandler+0x24a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024f4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024f8:	2210      	movs	r2, #16
 80024fa:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fe:	f01a 0f20 	tst.w	sl, #32
 8002502:	d004      	beq.n	800250e <HAL_PCD_IRQHandler+0x25a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002504:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002508:	2220      	movs	r2, #32
 800250a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800250e:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002512:	d0d5      	beq.n	80024c0 <HAL_PCD_IRQHandler+0x20c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002514:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800251c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002520:	e7ce      	b.n	80024c0 <HAL_PCD_IRQHandler+0x20c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002522:	6820      	ldr	r0, [r4, #0]
 8002524:	f001 fe36 	bl	8004194 <USB_ReadDevAllInEpInterrupt>
 8002528:	4680      	mov	r8, r0
      epnum = 0U;
 800252a:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800252c:	e02a      	b.n	8002584 <HAL_PCD_IRQHandler+0x2d0>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800252e:	4659      	mov	r1, fp
 8002530:	4620      	mov	r0, r4
 8002532:	f003 f901 	bl	8005738 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002536:	f01a 0f08 	tst.w	sl, #8
 800253a:	d004      	beq.n	8002546 <HAL_PCD_IRQHandler+0x292>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800253c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002540:	2208      	movs	r2, #8
 8002542:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002546:	f01a 0f10 	tst.w	sl, #16
 800254a:	d004      	beq.n	8002556 <HAL_PCD_IRQHandler+0x2a2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800254c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002550:	2210      	movs	r2, #16
 8002552:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002556:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800255a:	d004      	beq.n	8002566 <HAL_PCD_IRQHandler+0x2b2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800255c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002566:	f01a 0f02 	tst.w	sl, #2
 800256a:	d004      	beq.n	8002576 <HAL_PCD_IRQHandler+0x2c2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800256c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002570:	2202      	movs	r2, #2
 8002572:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002576:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800257a:	d141      	bne.n	8002600 <HAL_PCD_IRQHandler+0x34c>
        epnum++;
 800257c:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002580:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002584:	f1b8 0f00 	cmp.w	r8, #0
 8002588:	f43f aeda 	beq.w	8002340 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800258c:	f018 0f01 	tst.w	r8, #1
 8002590:	d0f4      	beq.n	800257c <HAL_PCD_IRQHandler+0x2c8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002592:	fa5f fb89 	uxtb.w	fp, r9
 8002596:	4659      	mov	r1, fp
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	f001 fe0c 	bl	80041b6 <USB_ReadDevInEPInterrupt>
 800259e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025a0:	f010 0f01 	tst.w	r0, #1
 80025a4:	d0c7      	beq.n	8002536 <HAL_PCD_IRQHandler+0x282>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025a6:	f009 030f 	and.w	r3, r9, #15
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025b0:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80025b4:	ea23 0302 	bic.w	r3, r3, r2
 80025b8:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025bc:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80025c0:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80025c4:	6923      	ldr	r3, [r4, #16]
 80025c6:	428b      	cmp	r3, r1
 80025c8:	d1b1      	bne.n	800252e <HAL_PCD_IRQHandler+0x27a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025ce:	eba2 0209 	sub.w	r2, r2, r9
 80025d2:	0093      	lsls	r3, r2, #2
 80025d4:	4423      	add	r3, r4
 80025d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025da:	440a      	add	r2, r1
 80025dc:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025de:	f1b9 0f00 	cmp.w	r9, #0
 80025e2:	d1a4      	bne.n	800252e <HAL_PCD_IRQHandler+0x27a>
 80025e4:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 80025e8:	0093      	lsls	r3, r2, #2
 80025ea:	4423      	add	r3, r4
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d19d      	bne.n	800252e <HAL_PCD_IRQHandler+0x27a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80025f6:	2101      	movs	r1, #1
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	f001 fe35 	bl	8004268 <USB_EP0_OutStart>
 80025fe:	e796      	b.n	800252e <HAL_PCD_IRQHandler+0x27a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002600:	4649      	mov	r1, r9
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff fc96 	bl	8001f34 <PCD_WriteEmptyTxFifo>
 8002608:	e7b8      	b.n	800257c <HAL_PCD_IRQHandler+0x2c8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800260a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002616:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800261a:	2b01      	cmp	r3, #1
 800261c:	d008      	beq.n	8002630 <HAL_PCD_IRQHandler+0x37c>
        HAL_PCD_ResumeCallback(hpcd);
 800261e:	4620      	mov	r0, r4
 8002620:	f003 f8ca 	bl	80057b8 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	6953      	ldr	r3, [r2, #20]
 8002628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800262c:	6153      	str	r3, [r2, #20]
 800262e:	e68d      	b.n	800234c <HAL_PCD_IRQHandler+0x98>
        hpcd->LPM_State = LPM_L0;
 8002630:	2100      	movs	r1, #0
 8002632:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002636:	4620      	mov	r0, r4
 8002638:	f003 f92e 	bl	8005898 <HAL_PCDEx_LPM_Callback>
 800263c:	e7f2      	b.n	8002624 <HAL_PCD_IRQHandler+0x370>
        HAL_PCD_SuspendCallback(hpcd);
 800263e:	4620      	mov	r0, r4
 8002640:	f003 f8a2 	bl	8005788 <HAL_PCD_SuspendCallback>
 8002644:	e68e      	b.n	8002364 <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 8002646:	4620      	mov	r0, r4
 8002648:	f003 f89e 	bl	8005788 <HAL_PCD_SuspendCallback>
 800264c:	e6ab      	b.n	80023a6 <HAL_PCD_IRQHandler+0xf2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800264e:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8002652:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800265e:	2110      	movs	r1, #16
 8002660:	6820      	ldr	r0, [r4, #0]
 8002662:	f001 f955 	bl	8003910 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002666:	e01a      	b.n	800269e <HAL_PCD_IRQHandler+0x3ea>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002668:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800266c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8002670:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002674:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002678:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800267c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002680:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002684:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002688:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800268c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002690:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002694:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002698:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	3601      	adds	r6, #1
 800269e:	6863      	ldr	r3, [r4, #4]
 80026a0:	42b3      	cmp	r3, r6
 80026a2:	d8e1      	bhi.n	8002668 <HAL_PCD_IRQHandler+0x3b4>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80026a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026ac:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026b2:	b1eb      	cbz	r3, 80026f0 <HAL_PCD_IRQHandler+0x43c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026b4:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80026b8:	f043 030b 	orr.w	r3, r3, #11
 80026bc:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026c0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80026c4:	f043 030b 	orr.w	r3, r3, #11
 80026c8:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026cc:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80026d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026d4:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026d8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80026dc:	7c21      	ldrb	r1, [r4, #16]
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f001 fdc2 	bl	8004268 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	6953      	ldr	r3, [r2, #20]
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	6153      	str	r3, [r2, #20]
 80026ee:	e661      	b.n	80023b4 <HAL_PCD_IRQHandler+0x100>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026f0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80026f4:	f242 032b 	movw	r3, #8235	; 0x202b
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002702:	f043 030b 	orr.w	r3, r3, #11
 8002706:	f8c8 3010 	str.w	r3, [r8, #16]
 800270a:	e7df      	b.n	80026cc <HAL_PCD_IRQHandler+0x418>
      (void)USB_ActivateSetup(hpcd->Instance);
 800270c:	6820      	ldr	r0, [r4, #0]
 800270e:	f001 fd9b 	bl	8004248 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	f001 fa12 	bl	8003b3c <USB_GetDevSpeed>
 8002718:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800271a:	6825      	ldr	r5, [r4, #0]
 800271c:	f000 fd3a 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 8002720:	7b22      	ldrb	r2, [r4, #12]
 8002722:	4601      	mov	r1, r0
 8002724:	4628      	mov	r0, r5
 8002726:	f001 f871 	bl	800380c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800272a:	4620      	mov	r0, r4
 800272c:	f003 f815 	bl	800575a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	6953      	ldr	r3, [r2, #20]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	6153      	str	r3, [r2, #20]
 800273a:	e642      	b.n	80023c2 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_SOFCallback(hpcd);
 800273c:	4620      	mov	r0, r4
 800273e:	f003 f806 	bl	800574e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	6953      	ldr	r3, [r2, #20]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	6153      	str	r3, [r2, #20]
 800274c:	e640      	b.n	80023d0 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800274e:	2100      	movs	r1, #0
 8002750:	4620      	mov	r0, r4
 8002752:	f003 f83d 	bl	80057d0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002756:	6822      	ldr	r2, [r4, #0]
 8002758:	6953      	ldr	r3, [r2, #20]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275e:	6153      	str	r3, [r2, #20]
 8002760:	e63d      	b.n	80023de <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002762:	2100      	movs	r1, #0
 8002764:	4620      	mov	r0, r4
 8002766:	f003 f82d 	bl	80057c4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	6953      	ldr	r3, [r2, #20]
 800276e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002772:	6153      	str	r3, [r2, #20]
 8002774:	e63a      	b.n	80023ec <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 8002776:	4620      	mov	r0, r4
 8002778:	f003 f830 	bl	80057dc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	6953      	ldr	r3, [r2, #20]
 8002780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002784:	6153      	str	r3, [r2, #20]
 8002786:	e638      	b.n	80023fa <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 8002788:	4620      	mov	r0, r4
 800278a:	f003 f82d 	bl	80057e8 <HAL_PCD_DisconnectCallback>
 800278e:	e641      	b.n	8002414 <HAL_PCD_IRQHandler+0x160>

08002790 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002790:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002794:	2b01      	cmp	r3, #1
 8002796:	d00d      	beq.n	80027b4 <HAL_PCD_SetAddress+0x24>
{
 8002798:	b510      	push	{r4, lr}
 800279a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800279c:	2301      	movs	r3, #1
 800279e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027a2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f001 fcbc 	bl	8004124 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80027b2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80027b4:	2002      	movs	r0, #2
}
 80027b6:	4770      	bx	lr

080027b8 <HAL_PCD_EP_Open>:
{
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80027ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027be:	d128      	bne.n	8002812 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c0:	f001 060f 	and.w	r6, r1, #15
 80027c4:	00f5      	lsls	r5, r6, #3
 80027c6:	1baf      	subs	r7, r5, r6
 80027c8:	00bc      	lsls	r4, r7, #2
 80027ca:	4627      	mov	r7, r4
 80027cc:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80027d0:	4404      	add	r4, r0
 80027d2:	3404      	adds	r4, #4
    ep->is_in = 0U;
 80027d4:	463e      	mov	r6, r7
 80027d6:	4406      	add	r6, r0
 80027d8:	2500      	movs	r5, #0
 80027da:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80027de:	f001 010f 	and.w	r1, r1, #15
 80027e2:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 80027e4:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 80027e6:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 80027e8:	7862      	ldrb	r2, [r4, #1]
 80027ea:	b102      	cbz	r2, 80027ee <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80027ec:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d01e      	beq.n	8002830 <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 80027f2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d01d      	beq.n	8002836 <HAL_PCD_EP_Open+0x7e>
 80027fa:	4605      	mov	r5, r0
 80027fc:	2301      	movs	r3, #1
 80027fe:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002802:	4621      	mov	r1, r4
 8002804:	6800      	ldr	r0, [r0, #0]
 8002806:	f001 f9a9 	bl	8003b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800280a:	2000      	movs	r0, #0
 800280c:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8002810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002812:	f001 060f 	and.w	r6, r1, #15
 8002816:	00f5      	lsls	r5, r6, #3
 8002818:	1baf      	subs	r7, r5, r6
 800281a:	00bc      	lsls	r4, r7, #2
 800281c:	4627      	mov	r7, r4
 800281e:	3438      	adds	r4, #56	; 0x38
 8002820:	4404      	add	r4, r0
 8002822:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8002824:	463e      	mov	r6, r7
 8002826:	4406      	add	r6, r0
 8002828:	2501      	movs	r5, #1
 800282a:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 800282e:	e7d6      	b.n	80027de <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	7123      	strb	r3, [r4, #4]
 8002834:	e7dd      	b.n	80027f2 <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 8002836:	2002      	movs	r0, #2
 8002838:	e7ea      	b.n	8002810 <HAL_PCD_EP_Open+0x58>

0800283a <HAL_PCD_EP_Close>:
{
 800283a:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800283c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002840:	d121      	bne.n	8002886 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002842:	f001 050f 	and.w	r5, r1, #15
 8002846:	00ea      	lsls	r2, r5, #3
 8002848:	1b54      	subs	r4, r2, r5
 800284a:	00a3      	lsls	r3, r4, #2
 800284c:	461c      	mov	r4, r3
 800284e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002852:	4403      	add	r3, r0
 8002854:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8002856:	4625      	mov	r5, r4
 8002858:	4405      	add	r5, r0
 800285a:	2200      	movs	r2, #0
 800285c:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002860:	f001 010f 	and.w	r1, r1, #15
 8002864:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8002866:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800286a:	2a01      	cmp	r2, #1
 800286c:	d01a      	beq.n	80028a4 <HAL_PCD_EP_Close+0x6a>
 800286e:	4604      	mov	r4, r0
 8002870:	2201      	movs	r2, #1
 8002872:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002876:	4619      	mov	r1, r3
 8002878:	6800      	ldr	r0, [r0, #0]
 800287a:	f001 f9b7 	bl	8003bec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800287e:	2000      	movs	r0, #0
 8002880:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002884:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	f001 040f 	and.w	r4, r1, #15
 800288a:	00e2      	lsls	r2, r4, #3
 800288c:	1b15      	subs	r5, r2, r4
 800288e:	00ab      	lsls	r3, r5, #2
 8002890:	461d      	mov	r5, r3
 8002892:	3338      	adds	r3, #56	; 0x38
 8002894:	4403      	add	r3, r0
 8002896:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8002898:	462c      	mov	r4, r5
 800289a:	4404      	add	r4, r0
 800289c:	2201      	movs	r2, #1
 800289e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80028a2:	e7dd      	b.n	8002860 <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 80028a4:	2002      	movs	r0, #2
 80028a6:	e7ed      	b.n	8002884 <HAL_PCD_EP_Close+0x4a>

080028a8 <HAL_PCD_EP_Receive>:
{
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	00ee      	lsls	r6, r5, #3
 80028b0:	1b71      	subs	r1, r6, r5
 80028b2:	008c      	lsls	r4, r1, #2
 80028b4:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80028b8:	4404      	add	r4, r0
 80028ba:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 80028bc:	1b76      	subs	r6, r6, r5
 80028be:	00b4      	lsls	r4, r6, #2
 80028c0:	4404      	add	r4, r0
 80028c2:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 80028c6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80028d0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80028d8:	6903      	ldr	r3, [r0, #16]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d006      	beq.n	80028ec <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028de:	b165      	cbz	r5, 80028fa <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	6800      	ldr	r0, [r0, #0]
 80028e4:	f001 fa90 	bl	8003e08 <USB_EPStartXfer>
}
 80028e8:	2000      	movs	r0, #0
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80028ec:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80028f0:	00b4      	lsls	r4, r6, #2
 80028f2:	4404      	add	r4, r0
 80028f4:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 80028f8:	e7f1      	b.n	80028de <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	6800      	ldr	r0, [r0, #0]
 80028fe:	f001 f9e3 	bl	8003cc8 <USB_EP0StartXfer>
 8002902:	e7f1      	b.n	80028e8 <HAL_PCD_EP_Receive+0x40>

08002904 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002904:	f001 010f 	and.w	r1, r1, #15
 8002908:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800290c:	008b      	lsls	r3, r1, #2
 800290e:	4418      	add	r0, r3
}
 8002910:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8002914:	4770      	bx	lr

08002916 <HAL_PCD_EP_Transmit>:
{
 8002916:	b570      	push	{r4, r5, r6, lr}
 8002918:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291c:	00ee      	lsls	r6, r5, #3
 800291e:	1b71      	subs	r1, r6, r5
 8002920:	008c      	lsls	r4, r1, #2
 8002922:	3438      	adds	r4, #56	; 0x38
 8002924:	4404      	add	r4, r0
 8002926:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8002928:	1b76      	subs	r6, r6, r5
 800292a:	00b4      	lsls	r4, r6, #2
 800292c:	4404      	add	r4, r0
 800292e:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8002930:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8002936:	2301      	movs	r3, #1
 8002938:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002940:	6903      	ldr	r3, [r0, #16]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d006      	beq.n	8002954 <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002946:	b15d      	cbz	r5, 8002960 <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002948:	b2da      	uxtb	r2, r3
 800294a:	6800      	ldr	r0, [r0, #0]
 800294c:	f001 fa5c 	bl	8003e08 <USB_EPStartXfer>
}
 8002950:	2000      	movs	r0, #0
 8002952:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002954:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8002958:	00b4      	lsls	r4, r6, #2
 800295a:	4404      	add	r4, r0
 800295c:	64e2      	str	r2, [r4, #76]	; 0x4c
 800295e:	e7f2      	b.n	8002946 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002960:	b2da      	uxtb	r2, r3
 8002962:	6800      	ldr	r0, [r0, #0]
 8002964:	f001 f9b0 	bl	8003cc8 <USB_EP0StartXfer>
 8002968:	e7f2      	b.n	8002950 <HAL_PCD_EP_Transmit+0x3a>

0800296a <HAL_PCD_EP_SetStall>:
{
 800296a:	b538      	push	{r3, r4, r5, lr}
 800296c:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002970:	6843      	ldr	r3, [r0, #4]
 8002972:	429d      	cmp	r5, r3
 8002974:	d836      	bhi.n	80029e4 <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 8002976:	f011 0f80 	tst.w	r1, #128	; 0x80
 800297a:	d120      	bne.n	80029be <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800297c:	00ca      	lsls	r2, r1, #3
 800297e:	1a54      	subs	r4, r2, r1
 8002980:	00a3      	lsls	r3, r4, #2
 8002982:	461c      	mov	r4, r3
 8002984:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002988:	4403      	add	r3, r0
 800298a:	3304      	adds	r3, #4
    ep->is_in = 0U;
 800298c:	4622      	mov	r2, r4
 800298e:	4402      	add	r2, r0
 8002990:	2100      	movs	r1, #0
 8002992:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 8002996:	2201      	movs	r2, #1
 8002998:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 800299c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80029a0:	2a01      	cmp	r2, #1
 80029a2:	d021      	beq.n	80029e8 <HAL_PCD_EP_SetStall+0x7e>
 80029a4:	4604      	mov	r4, r0
 80029a6:	2201      	movs	r2, #1
 80029a8:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ac:	4619      	mov	r1, r3
 80029ae:	6800      	ldr	r0, [r0, #0]
 80029b0:	f001 fb5d 	bl	800406e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029b4:	b17d      	cbz	r5, 80029d6 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80029bc:	e013      	b.n	80029e6 <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029be:	00ea      	lsls	r2, r5, #3
 80029c0:	1b51      	subs	r1, r2, r5
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4619      	mov	r1, r3
 80029c6:	3338      	adds	r3, #56	; 0x38
 80029c8:	4403      	add	r3, r0
 80029ca:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80029cc:	4401      	add	r1, r0
 80029ce:	2201      	movs	r2, #1
 80029d0:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 80029d4:	e7df      	b.n	8002996 <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029d6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80029da:	7c21      	ldrb	r1, [r4, #16]
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	f001 fc43 	bl	8004268 <USB_EP0_OutStart>
 80029e2:	e7e8      	b.n	80029b6 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80029e4:	2001      	movs	r0, #1
}
 80029e6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80029e8:	2002      	movs	r0, #2
 80029ea:	e7fc      	b.n	80029e6 <HAL_PCD_EP_SetStall+0x7c>

080029ec <HAL_PCD_EP_ClrStall>:
{
 80029ec:	b510      	push	{r4, lr}
 80029ee:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029f2:	6843      	ldr	r3, [r0, #4]
 80029f4:	429c      	cmp	r4, r3
 80029f6:	d82c      	bhi.n	8002a52 <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 80029f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029fc:	d11d      	bne.n	8002a3a <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fe:	00e3      	lsls	r3, r4, #3
 8002a00:	1b1a      	subs	r2, r3, r4
 8002a02:	0091      	lsls	r1, r2, #2
 8002a04:	460a      	mov	r2, r1
 8002a06:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002a0a:	4401      	add	r1, r0
 8002a0c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8002a0e:	4402      	add	r2, r0
 8002a10:	2300      	movs	r3, #0
 8002a12:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1a:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8002a1c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d018      	beq.n	8002a56 <HAL_PCD_EP_ClrStall+0x6a>
 8002a24:	4604      	mov	r4, r0
 8002a26:	2301      	movs	r3, #1
 8002a28:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a2c:	6800      	ldr	r0, [r0, #0]
 8002a2e:	f001 fb4b 	bl	80040c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002a38:	e00c      	b.n	8002a54 <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3a:	00e3      	lsls	r3, r4, #3
 8002a3c:	1b1a      	subs	r2, r3, r4
 8002a3e:	0091      	lsls	r1, r2, #2
 8002a40:	460a      	mov	r2, r1
 8002a42:	3138      	adds	r1, #56	; 0x38
 8002a44:	4401      	add	r1, r0
 8002a46:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002a48:	4402      	add	r2, r0
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8002a50:	e7e1      	b.n	8002a16 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
}
 8002a54:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002a56:	2002      	movs	r0, #2
 8002a58:	e7fc      	b.n	8002a54 <HAL_PCD_EP_ClrStall+0x68>

08002a5a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a5a:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a5c:	6804      	ldr	r4, [r0, #0]
 8002a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8002a60:	b129      	cbz	r1, 8002a6e <HAL_PCDEx_SetTxFiFo+0x14>
 8002a62:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a66:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e00c      	b.n	8002a88 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a6e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002a72:	62a0      	str	r0, [r4, #40]	; 0x28
 8002a74:	e012      	b.n	8002a9c <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a76:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002a7a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002a7e:	6849      	ldr	r1, [r1, #4]
 8002a80:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002a84:	3301      	adds	r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	1e69      	subs	r1, r5, #1
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d3f3      	bcc.n	8002a76 <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a8e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002a92:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002a96:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002a9a:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	bc30      	pop	{r4, r5}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002aa2:	6803      	ldr	r3, [r0, #0]
 8002aa4:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aac:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aae:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002ac2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ac6:	4a02      	ldr	r2, [pc, #8]	; (8002ad0 <HAL_PCDEx_ActivateLPM+0x24>)
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	10000003 	.word	0x10000003

08002ad4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_PWREx_EnableOverDrive+0x74>)
 8002ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x78>)
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af6:	f7fe fcd3 	bl	80014a0 <HAL_GetTick>
 8002afa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x78>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002b04:	d108      	bne.n	8002b18 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b06:	f7fe fccb 	bl	80014a0 <HAL_GetTick>
 8002b0a:	1b00      	subs	r0, r0, r4
 8002b0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b10:	d9f4      	bls.n	8002afc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002b12:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002b14:	b002      	add	sp, #8
 8002b16:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x78>)
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002b22:	f7fe fcbd 	bl	80014a0 <HAL_GetTick>
 8002b26:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x78>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b30:	d107      	bne.n	8002b42 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b32:	f7fe fcb5 	bl	80014a0 <HAL_GetTick>
 8002b36:	1b00      	subs	r0, r0, r4
 8002b38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b3c:	d9f4      	bls.n	8002b28 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
 8002b40:	e7e8      	b.n	8002b14 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002b42:	2000      	movs	r0, #0
 8002b44:	e7e6      	b.n	8002b14 <HAL_PWREx_EnableOverDrive+0x40>
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f000 8209 	beq.w	8002f68 <HAL_RCC_OscConfig+0x418>
{
 8002b56:	b570      	push	{r4, r5, r6, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5c:	6803      	ldr	r3, [r0, #0]
 8002b5e:	f013 0f01 	tst.w	r3, #1
 8002b62:	d029      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b64:	4ba2      	ldr	r3, [pc, #648]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b70:	4b9f      	ldr	r3, [pc, #636]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d00f      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	6863      	ldr	r3, [r4, #4]
 8002b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b82:	d040      	beq.n	8002c06 <HAL_RCC_OscConfig+0xb6>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d154      	bne.n	8002c32 <HAL_RCC_OscConfig+0xe2>
 8002b88:	4b99      	ldr	r3, [pc, #612]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e039      	b.n	8002c10 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9c:	4b94      	ldr	r3, [pc, #592]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ba4:	d0ea      	beq.n	8002b7c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x68>
 8002bb0:	6863      	ldr	r3, [r4, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 81da 	beq.w	8002f6c <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	f013 0f02 	tst.w	r3, #2
 8002bbe:	d075      	beq.n	8002cac <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc0:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f013 0f0c 	tst.w	r3, #12
 8002bc8:	d05e      	beq.n	8002c88 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bca:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d053      	beq.n	8002c7e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd6:	68e3      	ldr	r3, [r4, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 808a 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bde:	4a84      	ldr	r2, [pc, #528]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc5a 	bl	80014a0 <HAL_GetTick>
 8002bec:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f013 0f02 	tst.w	r3, #2
 8002bf6:	d173      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fc52 	bl	80014a0 <HAL_GetTick>
 8002bfc:	1b40      	subs	r0, r0, r5
 8002bfe:	2802      	cmp	r0, #2
 8002c00:	d9f5      	bls.n	8002bee <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002c02:	2003      	movs	r0, #3
 8002c04:	e1b5      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	4a7a      	ldr	r2, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	b32b      	cbz	r3, 8002c60 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc44 	bl	80014a0 <HAL_GetTick>
 8002c18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b75      	ldr	r3, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c22:	d1c9      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fc3c 	bl	80014a0 <HAL_GetTick>
 8002c28:	1b40      	subs	r0, r0, r5
 8002c2a:	2864      	cmp	r0, #100	; 0x64
 8002c2c:	d9f5      	bls.n	8002c1a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002c2e:	2003      	movs	r0, #3
 8002c30:	e19f      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c36:	d009      	beq.n	8002c4c <HAL_RCC_OscConfig+0xfc>
 8002c38:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e7e1      	b.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e7d7      	b.n	8002c10 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002c60:	f7fe fc1e 	bl	80014a0 <HAL_GetTick>
 8002c64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c6e:	d0a3      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fc16 	bl	80014a0 <HAL_GetTick>
 8002c74:	1b40      	subs	r0, r0, r5
 8002c76:	2864      	cmp	r0, #100	; 0x64
 8002c78:	d9f5      	bls.n	8002c66 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8002c7a:	2003      	movs	r0, #3
 8002c7c:	e179      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b5c      	ldr	r3, [pc, #368]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c86:	d1a6      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f013 0f02 	tst.w	r3, #2
 8002c90:	d004      	beq.n	8002c9c <HAL_RCC_OscConfig+0x14c>
 8002c92:	68e3      	ldr	r3, [r4, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8002c98:	2001      	movs	r0, #1
 8002c9a:	e16a      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4a54      	ldr	r2, [pc, #336]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002caa:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	f013 0f08 	tst.w	r3, #8
 8002cb2:	d046      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cb4:	6963      	ldr	r3, [r4, #20]
 8002cb6:	b383      	cbz	r3, 8002d1a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002cba:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fbed 	bl	80014a0 <HAL_GetTick>
 8002cc6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc8:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f013 0f02 	tst.w	r3, #2
 8002cd0:	d137      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fbe5 	bl	80014a0 <HAL_GetTick>
 8002cd6:	1b40      	subs	r0, r0, r5
 8002cd8:	2802      	cmp	r0, #2
 8002cda:	d9f5      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002cdc:	2003      	movs	r0, #3
 8002cde:	e148      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ce8:	6921      	ldr	r1, [r4, #16]
 8002cea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e7dc      	b.n	8002cac <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4a3f      	ldr	r2, [pc, #252]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fbd0 	bl	80014a0 <HAL_GetTick>
 8002d00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f013 0f02 	tst.w	r3, #2
 8002d0a:	d0cf      	beq.n	8002cac <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fbc8 	bl	80014a0 <HAL_GetTick>
 8002d10:	1b40      	subs	r0, r0, r5
 8002d12:	2802      	cmp	r0, #2
 8002d14:	d9f5      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8002d16:	2003      	movs	r0, #3
 8002d18:	e12b      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002d1c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fbbc 	bl	80014a0 <HAL_GetTick>
 8002d28:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	f013 0f02 	tst.w	r3, #2
 8002d32:	d006      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fbb4 	bl	80014a0 <HAL_GetTick>
 8002d38:	1b40      	subs	r0, r0, r5
 8002d3a:	2802      	cmp	r0, #2
 8002d3c:	d9f5      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8002d3e:	2003      	movs	r0, #3
 8002d40:	e117      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f013 0f04 	tst.w	r3, #4
 8002d48:	d07e      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d52:	d11e      	bne.n	8002d92 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d68:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_OscConfig+0x2a4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	68a3      	ldr	r3, [r4, #8]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d021      	beq.n	8002dbe <HAL_RCC_OscConfig+0x26e>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d13c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x2a8>
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	671a      	str	r2, [r3, #112]	; 0x70
 8002d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8a:	f022 0204 	bic.w	r2, r2, #4
 8002d8e:	671a      	str	r2, [r3, #112]	; 0x70
 8002d90:	e01a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8002d92:	2500      	movs	r5, #0
 8002d94:	e7e9      	b.n	8002d6a <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_RCC_OscConfig+0x2a4>)
 8002d98:	6813      	ldr	r3, [r2, #0]
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002da0:	f7fe fb7e 	bl	80014a0 <HAL_GetTick>
 8002da4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_RCC_OscConfig+0x2a4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dae:	d1e1      	bne.n	8002d74 <HAL_RCC_OscConfig+0x224>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db0:	f7fe fb76 	bl	80014a0 <HAL_GetTick>
 8002db4:	1b80      	subs	r0, r0, r6
 8002db6:	2864      	cmp	r0, #100	; 0x64
 8002db8:	d9f5      	bls.n	8002da6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002dba:	2003      	movs	r0, #3
 8002dbc:	e0d9      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002dc0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc8:	68a3      	ldr	r3, [r4, #8]
 8002dca:	b35b      	cbz	r3, 8002e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fb68 	bl	80014a0 <HAL_GetTick>
 8002dd0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_RCC_OscConfig+0x2a0>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f013 0f02 	tst.w	r3, #2
 8002dda:	d134      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb60 	bl	80014a0 <HAL_GetTick>
 8002de0:	1b80      	subs	r0, r0, r6
 8002de2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002de6:	4298      	cmp	r0, r3
 8002de8:	d9f3      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
 8002dec:	e0c1      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d009      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2c0>
 8002dfc:	4b60      	ldr	r3, [pc, #384]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	671a      	str	r2, [r3, #112]	; 0x70
 8002e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e08:	f022 0204 	bic.w	r2, r2, #4
 8002e0c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e0e:	e7db      	b.n	8002dc8 <HAL_RCC_OscConfig+0x278>
 8002e10:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	671a      	str	r2, [r3, #112]	; 0x70
 8002e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	671a      	str	r2, [r3, #112]	; 0x70
 8002e22:	e7d1      	b.n	8002dc8 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fb3c 	bl	80014a0 <HAL_GetTick>
 8002e28:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2a:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	f013 0f02 	tst.w	r3, #2
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_OscConfig+0x2f6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe fb34 	bl	80014a0 <HAL_GetTick>
 8002e38:	1b80      	subs	r0, r0, r6
 8002e3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e3e:	4298      	cmp	r0, r3
 8002e40:	d9f3      	bls.n	8002e2a <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8002e42:	2003      	movs	r0, #3
 8002e44:	e095      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e46:	b9fd      	cbnz	r5, 8002e88 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e48:	69a3      	ldr	r3, [r4, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8090 	beq.w	8002f70 <HAL_RCC_OscConfig+0x420>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e50:	4a4b      	ldr	r2, [pc, #300]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	f002 020c 	and.w	r2, r2, #12
 8002e58:	2a08      	cmp	r2, #8
 8002e5a:	d058      	beq.n	8002f0e <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d019      	beq.n	8002e94 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4a47      	ldr	r2, [pc, #284]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fb19 	bl	80014a0 <HAL_GetTick>
 8002e6e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e78:	d047      	beq.n	8002f0a <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fb11 	bl	80014a0 <HAL_GetTick>
 8002e7e:	1b00      	subs	r0, r0, r4
 8002e80:	2802      	cmp	r0, #2
 8002e82:	d9f5      	bls.n	8002e70 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002e84:	2003      	movs	r0, #3
 8002e86:	e074      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4a3d      	ldr	r2, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	e7d9      	b.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002e94:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e9e:	f7fe faff 	bl	80014a0 <HAL_GetTick>
 8002ea2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002eac:	d006      	beq.n	8002ebc <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe faf7 	bl	80014a0 <HAL_GetTick>
 8002eb2:	1b40      	subs	r0, r0, r5
 8002eb4:	2802      	cmp	r0, #2
 8002eb6:	d9f5      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x354>
            return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e05a      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	69e3      	ldr	r3, [r4, #28]
 8002ebe:	6a22      	ldr	r2, [r4, #32]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ec4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ec8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002eca:	0852      	lsrs	r2, r2, #1
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002ede:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	6813      	ldr	r3, [r2, #0]
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fada 	bl	80014a0 <HAL_GetTick>
 8002eec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fad2 	bl	80014a0 <HAL_GetTick>
 8002efc:	1b00      	subs	r0, r0, r4
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d9f5      	bls.n	8002eee <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8002f02:	2003      	movs	r0, #3
 8002f04:	e035      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002f06:	2000      	movs	r0, #0
 8002f08:	e033      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e031      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
      pll_config = RCC->PLLCFGR;
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_RCC_OscConfig+0x430>)
 8002f10:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d02f      	beq.n	8002f76 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f1a:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002f20:	2001      	movs	r0, #1
 8002f22:	e026      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f24:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002f28:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	428b      	cmp	r3, r1
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x3e2>
        return HAL_ERROR;
 8002f2e:	2001      	movs	r0, #1
 8002f30:	e01f      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f32:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f38:	4013      	ands	r3, r2
 8002f3a:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0x3f4>
        return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
 8002f42:	e016      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f44:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x408>
        return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e00c      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f58:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002f5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f5e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCC_OscConfig+0x42a>
        return HAL_ERROR;
 8002f64:	2001      	movs	r0, #1
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
    return HAL_ERROR;
 8002f68:	2001      	movs	r0, #1
}
 8002f6a:	4770      	bx	lr
        return HAL_ERROR;
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002f70:	2000      	movs	r0, #0
}
 8002f72:	b002      	add	sp, #8
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f76:	2001      	movs	r0, #1
 8002f78:	e7fb      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e7f9      	b.n	8002f72 <HAL_RCC_OscConfig+0x422>
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d044      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x96>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4823      	ldr	r0, [pc, #140]	; (8003024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f96:	4770      	bx	lr
{
 8002f98:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	481c      	ldr	r0, [pc, #112]	; (8003028 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb8:	fba1 0100 	umull	r0, r1, r1, r0
 8002fbc:	f7fd fdbe 	bl	8000b3c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002fc8:	3301      	adds	r3, #1
 8002fca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002fcc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002fd0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002fdc:	461e      	mov	r6, r3
 8002fde:	2700      	movs	r7, #0
 8002fe0:	015c      	lsls	r4, r3, #5
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	1ae4      	subs	r4, r4, r3
 8002fe6:	eb65 0507 	sbc.w	r5, r5, r7
 8002fea:	01a9      	lsls	r1, r5, #6
 8002fec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002ff0:	01a0      	lsls	r0, r4, #6
 8002ff2:	1b00      	subs	r0, r0, r4
 8002ff4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ff8:	00cb      	lsls	r3, r1, #3
 8002ffa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ffe:	00c4      	lsls	r4, r0, #3
 8003000:	19a0      	adds	r0, r4, r6
 8003002:	eb43 0107 	adc.w	r1, r3, r7
 8003006:	028b      	lsls	r3, r1, #10
 8003008:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800300c:	0284      	lsls	r4, r0, #10
 800300e:	4620      	mov	r0, r4
 8003010:	4619      	mov	r1, r3
 8003012:	2300      	movs	r3, #0
 8003014:	f7fd fd92 	bl	8000b3c <__aeabi_uldivmod>
 8003018:	e7d2      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800301a:	4803      	ldr	r0, [pc, #12]	; (8003028 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	017d7840 	.word	0x017d7840

0800302c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800302c:	2800      	cmp	r0, #0
 800302e:	f000 80a3 	beq.w	8003178 <HAL_RCC_ClockConfig+0x14c>
{
 8003032:	b570      	push	{r4, r5, r6, lr}
 8003034:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003036:	4b52      	ldr	r3, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x154>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	428b      	cmp	r3, r1
 8003040:	d20c      	bcs.n	800305c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_RCC_ClockConfig+0x154>)
 8003044:	6813      	ldr	r3, [r2, #0]
 8003046:	f023 030f 	bic.w	r3, r3, #15
 800304a:	430b      	orrs	r3, r1
 800304c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	428b      	cmp	r3, r1
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
}
 800305a:	bd70      	pop	{r4, r5, r6, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	f013 0f02 	tst.w	r3, #2
 8003062:	d017      	beq.n	8003094 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	f013 0f04 	tst.w	r3, #4
 8003068:	d004      	beq.n	8003074 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800306a:	4a46      	ldr	r2, [pc, #280]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 800306c:	6893      	ldr	r3, [r2, #8]
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	f013 0f08 	tst.w	r3, #8
 800307a:	d004      	beq.n	8003086 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4a41      	ldr	r2, [pc, #260]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 800307e:	6893      	ldr	r3, [r2, #8]
 8003080:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003084:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003086:	4a3f      	ldr	r2, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 8003088:	6893      	ldr	r3, [r2, #8]
 800308a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308e:	68a0      	ldr	r0, [r4, #8]
 8003090:	4303      	orrs	r3, r0
 8003092:	6093      	str	r3, [r2, #8]
 8003094:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	f013 0f01 	tst.w	r3, #1
 800309c:	d031      	beq.n	8003102 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	6863      	ldr	r3, [r4, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d025      	beq.n	80030f4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	4a36      	ldr	r2, [pc, #216]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	f012 0f02 	tst.w	r2, #2
 80030b0:	d064      	beq.n	800317c <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 80030b4:	688a      	ldr	r2, [r1, #8]
 80030b6:	f022 0203 	bic.w	r2, r2, #3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030be:	f7fe f9ef 	bl	80014a0 <HAL_GetTick>
 80030c2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	6862      	ldr	r2, [r4, #4]
 80030ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030d2:	d016      	beq.n	8003102 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fe f9e4 	bl	80014a0 <HAL_GetTick>
 80030d8:	1b80      	subs	r0, r0, r6
 80030da:	f241 3388 	movw	r3, #5000	; 0x1388
 80030de:	4298      	cmp	r0, r3
 80030e0:	d9f0      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80030e2:	2003      	movs	r0, #3
 80030e4:	e7b9      	b.n	800305a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80030ee:	d1e0      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80030f0:	2001      	movs	r0, #1
 80030f2:	e7b2      	b.n	800305a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	4a23      	ldr	r2, [pc, #140]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80030fc:	d1d9      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80030fe:	2001      	movs	r0, #1
 8003100:	e7ab      	b.n	800305a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <HAL_RCC_ClockConfig+0x154>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	42ab      	cmp	r3, r5
 800310c:	d90c      	bls.n	8003128 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_RCC_ClockConfig+0x154>)
 8003110:	6813      	ldr	r3, [r2, #0]
 8003112:	f023 030f 	bic.w	r3, r3, #15
 8003116:	432b      	orrs	r3, r5
 8003118:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	42ab      	cmp	r3, r5
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8003124:	2001      	movs	r0, #1
 8003126:	e798      	b.n	800305a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	f013 0f04 	tst.w	r3, #4
 800312e:	d006      	beq.n	800313e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 8003132:	6893      	ldr	r3, [r2, #8]
 8003134:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003138:	68e1      	ldr	r1, [r4, #12]
 800313a:	430b      	orrs	r3, r1
 800313c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	f013 0f08 	tst.w	r3, #8
 8003144:	d007      	beq.n	8003156 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003146:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 8003148:	6893      	ldr	r3, [r2, #8]
 800314a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800314e:	6921      	ldr	r1, [r4, #16]
 8003150:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003154:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003156:	f7ff ff15 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x158>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x15c>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	40d8      	lsrs	r0, r3
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_RCC_ClockConfig+0x160>)
 800316a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCC_ClockConfig+0x164>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	f7fe f958 	bl	8001424 <HAL_InitTick>
  return HAL_OK;
 8003174:	2000      	movs	r0, #0
 8003176:	e770      	b.n	800305a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	4770      	bx	lr
        return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
 800317e:	e76c      	b.n	800305a <HAL_RCC_ClockConfig+0x2e>
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	0800fb78 	.word	0x0800fb78
 800318c:	20000118 	.word	0x20000118
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <HAL_RCC_GetHCLKFreq+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000118 	.word	0x20000118

080031a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	b083      	sub	sp, #12
 80031a4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031a6:	6803      	ldr	r3, [r0, #0]
 80031a8:	f013 0f01 	tst.w	r3, #1
 80031ac:	d00c      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031ae:	4bb6      	ldr	r3, [pc, #728]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031c2:	b1c3      	cbz	r3, 80031f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80031c4:	2600      	movs	r6, #0
 80031c6:	e000      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80031c8:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80031d0:	d015      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d2:	4aad      	ldr	r2, [pc, #692]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031d4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80031d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80031dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80031de:	430b      	orrs	r3, r1
 80031e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ea:	d006      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8129 	beq.w	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  uint32_t pllsaiused = 0;
 80031f2:	2500      	movs	r5, #0
 80031f4:	e004      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80031f6:	2601      	movs	r6, #1
 80031f8:	e7e7      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80031fa:	2601      	movs	r6, #1
 80031fc:	e7f6      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 80031fe:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003206:	d00f      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003208:	4a9f      	ldr	r2, [pc, #636]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800320a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800320e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003212:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003214:	430b      	orrs	r3, r1
 8003216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800321a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	f000 8112 	beq.w	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003224:	b903      	cbnz	r3, 8003228 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8003226:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800322e:	d000      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 8003230:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003232:	f013 0f20 	tst.w	r3, #32
 8003236:	f040 8109 	bne.w	800344c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	f013 0f10 	tst.w	r3, #16
 8003240:	d00c      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003242:	4b91      	ldr	r3, [pc, #580]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003248:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800324c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003250:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003254:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003256:	430a      	orrs	r2, r1
 8003258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003262:	d008      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003264:	4a88      	ldr	r2, [pc, #544]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003266:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800326a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800326e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003270:	430b      	orrs	r3, r1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800327e:	4a82      	ldr	r2, [pc, #520]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003280:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003284:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003288:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800328a:	430b      	orrs	r3, r1
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003296:	d008      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003298:	4a7b      	ldr	r2, [pc, #492]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800329a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800329e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80032a2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80032a4:	430b      	orrs	r3, r1
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032b0:	d008      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032b2:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032b8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80032bc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80032be:	430b      	orrs	r3, r1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032ca:	d008      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80032d8:	430b      	orrs	r3, r1
 80032da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032e4:	d008      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e6:	4a68      	ldr	r2, [pc, #416]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032ec:	f023 030c 	bic.w	r3, r3, #12
 80032f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80032f2:	430b      	orrs	r3, r1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032fe:	d008      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003300:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003302:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003306:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800330a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800330c:	430b      	orrs	r3, r1
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003318:	d008      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800331a:	4a5b      	ldr	r2, [pc, #364]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800331c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003320:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003324:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003326:	430b      	orrs	r3, r1
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003334:	4a54      	ldr	r2, [pc, #336]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003336:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003340:	430b      	orrs	r3, r1
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800334e:	4a4e      	ldr	r2, [pc, #312]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003350:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003354:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003358:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800335a:	430b      	orrs	r3, r1
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003368:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800336a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800336e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003372:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003374:	430b      	orrs	r3, r1
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003382:	4a41      	ldr	r2, [pc, #260]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003384:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003388:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800338c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800339c:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800339e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033a6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80033a8:	430b      	orrs	r3, r1
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80033b4:	d00d      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033bc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80033c0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80033c2:	430b      	orrs	r3, r1
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80033ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ce:	f000 80a7 	beq.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0x380>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f013 0f08 	tst.w	r3, #8
 80033d8:	d000      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1;
 80033da:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80033e8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80033ec:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80033ee:	430b      	orrs	r3, r1
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80033fa:	d009      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003406:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800340a:	430b      	orrs	r3, r1
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003410:	b926      	cbnz	r6, 800341c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003418:	f000 8102 	beq.w	8003620 <HAL_RCCEx_PeriphCLKConfig+0x480>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003426:	f7fe f83b 	bl	80014a0 <HAL_GetTick>
 800342a:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003434:	d076      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x384>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003436:	f7fe f833 	bl	80014a0 <HAL_GetTick>
 800343a:	1b80      	subs	r0, r0, r6
 800343c:	2864      	cmp	r0, #100	; 0x64
 800343e:	d9f5      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003440:	2003      	movs	r0, #3
 8003442:	e0ef      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
      pllsaiused = 1;
 8003444:	2501      	movs	r5, #1
 8003446:	e6db      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8003448:	2601      	movs	r6, #1
 800344a:	e6eb      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800344e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003450:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800346a:	f7fe f819 	bl	80014a0 <HAL_GetTick>
 800346e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003478:	d10a      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe f811 	bl	80014a0 <HAL_GetTick>
 800347e:	1bc0      	subs	r0, r0, r7
 8003480:	2864      	cmp	r0, #100	; 0x64
 8003482:	d9f5      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
        return HAL_TIMEOUT;
 8003484:	2003      	movs	r0, #3
 8003486:	e0cd      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003490:	4baa      	ldr	r3, [pc, #680]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003494:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003498:	d015      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800349a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800349c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d010      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x326>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a4:	4ba5      	ldr	r3, [pc, #660]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80034ae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80034b2:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80034b6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80034ba:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80034bc:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	f013 0f01 	tst.w	r3, #1
 80034c4:	d112      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80034cc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80034d0:	d01d      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80034d2:	4a9a      	ldr	r2, [pc, #616]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034d4:	6893      	ldr	r3, [r2, #8]
 80034d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034da:	6093      	str	r3, [r2, #8]
 80034dc:	4997      	ldr	r1, [pc, #604]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034de:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80034e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034e2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80034e6:	4313      	orrs	r3, r2
 80034e8:	670b      	str	r3, [r1, #112]	; 0x70
 80034ea:	e6a6      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80034ec:	f7fd ffd8 	bl	80014a0 <HAL_GetTick>
 80034f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	f013 0f02 	tst.w	r3, #2
 80034fa:	d1e4      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x326>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd ffd0 	bl	80014a0 <HAL_GetTick>
 8003500:	1bc0      	subs	r0, r0, r7
 8003502:	f241 3388 	movw	r3, #5000	; 0x1388
 8003506:	4298      	cmp	r0, r3
 8003508:	d9f3      	bls.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 800350a:	2003      	movs	r0, #3
 800350c:	e08a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350e:	488b      	ldr	r0, [pc, #556]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003510:	6882      	ldr	r2, [r0, #8]
 8003512:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003516:	498a      	ldr	r1, [pc, #552]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8003518:	4019      	ands	r1, r3
 800351a:	430a      	orrs	r2, r1
 800351c:	6082      	str	r2, [r0, #8]
 800351e:	e7dd      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      pllsaiused = 1;
 8003520:	2501      	movs	r5, #1
 8003522:	e756      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x232>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f013 0f01 	tst.w	r3, #1
 800352a:	d013      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800352c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800352e:	b98b      	cbnz	r3, 8003554 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003530:	4a82      	ldr	r2, [pc, #520]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003532:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003536:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800353a:	6860      	ldr	r0, [r4, #4]
 800353c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003540:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003544:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003548:	430b      	orrs	r3, r1
 800354a:	68a1      	ldr	r1, [r4, #8]
 800354c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003550:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800355a:	d003      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800355c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800355e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003562:	d006      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003568:	d01e      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800356a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800356c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003570:	d11a      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003572:	4a72      	ldr	r2, [pc, #456]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003574:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003578:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800357c:	6860      	ldr	r0, [r4, #4]
 800357e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003582:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003586:	68e0      	ldr	r0, [r4, #12]
 8003588:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800358c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003590:	430b      	orrs	r3, r1
 8003592:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003596:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800359a:	f023 031f 	bic.w	r3, r3, #31
 800359e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035a0:	3901      	subs	r1, #1
 80035a2:	430b      	orrs	r3, r1
 80035a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80035ae:	d011      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035b0:	4a62      	ldr	r2, [pc, #392]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80035b2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035b6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035ba:	6866      	ldr	r6, [r4, #4]
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80035c4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80035c8:	4303      	orrs	r3, r0
 80035ca:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80035ce:	430b      	orrs	r3, r1
 80035d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035da:	d00d      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035dc:	6862      	ldr	r2, [r4, #4]
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80035e6:	68e2      	ldr	r2, [r4, #12]
 80035e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80035ec:	68a2      	ldr	r2, [r4, #8]
 80035ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80035f2:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80035f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035f8:	4a50      	ldr	r2, [pc, #320]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003602:	f7fd ff4d 	bl	80014a0 <HAL_GetTick>
 8003606:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003608:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003610:	d106      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003612:	f7fd ff45 	bl	80014a0 <HAL_GetTick>
 8003616:	1b80      	subs	r0, r0, r6
 8003618:	2864      	cmp	r0, #100	; 0x64
 800361a:	d9f5      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800361c:	2003      	movs	r0, #3
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003620:	b915      	cbnz	r5, 8003628 <HAL_RCCEx_PeriphCLKConfig+0x488>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003622:	2000      	movs	r0, #0
}
 8003624:	b003      	add	sp, #12
 8003626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003628:	4a44      	ldr	r2, [pc, #272]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003630:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003632:	f7fd ff35 	bl	80014a0 <HAL_GetTick>
 8003636:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003638:	4b40      	ldr	r3, [pc, #256]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003640:	d006      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003642:	f7fd ff2d 	bl	80014a0 <HAL_GetTick>
 8003646:	1b40      	subs	r0, r0, r5
 8003648:	2864      	cmp	r0, #100	; 0x64
 800364a:	d9f5      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
 800364c:	2003      	movs	r0, #3
 800364e:	e7e9      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003656:	d001      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003658:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800365a:	b122      	cbz	r2, 8003666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800365c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003660:	d01d      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003664:	b9db      	cbnz	r3, 800369e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003666:	4a35      	ldr	r2, [pc, #212]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003668:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800366c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003670:	6960      	ldr	r0, [r4, #20]
 8003672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003676:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800367a:	69a0      	ldr	r0, [r4, #24]
 800367c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003680:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003684:	430b      	orrs	r3, r1
 8003686:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800368a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800368e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003692:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003694:	3901      	subs	r1, #1
 8003696:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800369a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80036a4:	d003      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80036a6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80036a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ac:	d031      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x572>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	f013 0f08 	tst.w	r3, #8
 80036b4:	d019      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036b6:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80036b8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036c0:	6960      	ldr	r0, [r4, #20]
 80036c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80036ca:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80036ce:	430b      	orrs	r3, r1
 80036d0:	69e1      	ldr	r1, [r4, #28]
 80036d2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80036d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036da:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80036de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80036ea:	4a14      	ldr	r2, [pc, #80]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036f4:	f7fd fed4 	bl	80014a0 <HAL_GetTick>
 80036f8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003702:	d119      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x598>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003704:	f7fd fecc 	bl	80014a0 <HAL_GetTick>
 8003708:	1b00      	subs	r0, r0, r4
 800370a:	2864      	cmp	r0, #100	; 0x64
 800370c:	d9f5      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x55a>
        return HAL_TIMEOUT;
 800370e:	2003      	movs	r0, #3
 8003710:	e788      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003714:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003718:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800371c:	6965      	ldr	r5, [r4, #20]
 800371e:	6a23      	ldr	r3, [r4, #32]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8003726:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800372a:	4303      	orrs	r3, r0
 800372c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003730:	430b      	orrs	r3, r1
 8003732:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003736:	e7ba      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x50e>
  return HAL_OK;
 8003738:	2000      	movs	r0, #0
 800373a:	e773      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800373c:	40023800 	.word	0x40023800
 8003740:	0ffffcff 	.word	0x0ffffcff

08003744 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003744:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800374a:	9b01      	ldr	r3, [sp, #4]
 800374c:	3301      	adds	r3, #1
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <USB_CoreReset+0x48>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d814      	bhi.n	8003780 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003756:	6903      	ldr	r3, [r0, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	daf6      	bge.n	800374a <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003760:	6903      	ldr	r3, [r0, #16]
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003768:	9b01      	ldr	r3, [sp, #4]
 800376a:	3301      	adds	r3, #1
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <USB_CoreReset+0x48>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d808      	bhi.n	8003786 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003774:	6903      	ldr	r3, [r0, #16]
 8003776:	f013 0f01 	tst.w	r3, #1
 800377a:	d1f5      	bne.n	8003768 <USB_CoreReset+0x24>

  return HAL_OK;
 800377c:	2000      	movs	r0, #0
 800377e:	e000      	b.n	8003782 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8003780:	2003      	movs	r0, #3
}
 8003782:	b002      	add	sp, #8
 8003784:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003786:	2003      	movs	r0, #3
 8003788:	e7fb      	b.n	8003782 <USB_CoreReset+0x3e>
 800378a:	bf00      	nop
 800378c:	00030d40 	.word	0x00030d40

08003790 <USB_CoreInit>:
{
 8003790:	b084      	sub	sp, #16
 8003792:	b510      	push	{r4, lr}
 8003794:	4604      	mov	r4, r0
 8003796:	a803      	add	r0, sp, #12
 8003798:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800379c:	9b08      	ldr	r3, [sp, #32]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d11d      	bne.n	80037de <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037aa:	68e2      	ldr	r2, [r4, #12]
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <USB_CoreInit+0x78>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037b2:	68e3      	ldr	r3, [r4, #12]
 80037b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037b8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80037ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d009      	beq.n	80037d4 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff ffbf 	bl	8003744 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80037c6:	9b06      	ldr	r3, [sp, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d014      	beq.n	80037f6 <USB_CoreInit+0x66>
}
 80037cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d0:	b004      	add	sp, #16
 80037d2:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037d4:	68e3      	ldr	r3, [r4, #12]
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037da:	60e3      	str	r3, [r4, #12]
 80037dc:	e7f0      	b.n	80037c0 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037de:	68e3      	ldr	r3, [r4, #12]
 80037e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e4:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7ff ffac 	bl	8003744 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80037f4:	e7e7      	b.n	80037c6 <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037f6:	68a3      	ldr	r3, [r4, #8]
 80037f8:	f043 0306 	orr.w	r3, r3, #6
 80037fc:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037fe:	68a3      	ldr	r3, [r4, #8]
 8003800:	f043 0320 	orr.w	r3, r3, #32
 8003804:	60a3      	str	r3, [r4, #8]
 8003806:	e7e1      	b.n	80037cc <USB_CoreInit+0x3c>
 8003808:	ffbdffbf 	.word	0xffbdffbf

0800380c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800380c:	2a02      	cmp	r2, #2
 800380e:	d00a      	beq.n	8003826 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003810:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003812:	68c2      	ldr	r2, [r0, #12]
 8003814:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003818:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800381a:	68c3      	ldr	r3, [r0, #12]
 800381c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003820:	60c3      	str	r3, [r0, #12]
}
 8003822:	2000      	movs	r0, #0
 8003824:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <USB_SetTurnaroundTime+0xb8>)
 8003828:	440b      	add	r3, r1
 800382a:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <USB_SetTurnaroundTime+0xbc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d939      	bls.n	80038a4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <USB_SetTurnaroundTime+0xc0>)
 8003832:	440b      	add	r3, r1
 8003834:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <USB_SetTurnaroundTime+0xc4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d936      	bls.n	80038a8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <USB_SetTurnaroundTime+0xc8>)
 800383c:	440b      	add	r3, r1
 800383e:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <USB_SetTurnaroundTime+0xcc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d933      	bls.n	80038ac <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <USB_SetTurnaroundTime+0xd0>)
 8003846:	440b      	add	r3, r1
 8003848:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800384c:	32a0      	adds	r2, #160	; 0xa0
 800384e:	4293      	cmp	r3, r2
 8003850:	d92e      	bls.n	80038b0 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <USB_SetTurnaroundTime+0xd4>)
 8003854:	440b      	add	r3, r1
 8003856:	4a23      	ldr	r2, [pc, #140]	; (80038e4 <USB_SetTurnaroundTime+0xd8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d92b      	bls.n	80038b4 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <USB_SetTurnaroundTime+0xdc>)
 800385e:	440b      	add	r3, r1
 8003860:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8003864:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8003868:	4293      	cmp	r3, r2
 800386a:	d925      	bls.n	80038b8 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800386c:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <USB_SetTurnaroundTime+0xe0>)
 800386e:	440b      	add	r3, r1
 8003870:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8003874:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8003878:	4293      	cmp	r3, r2
 800387a:	d91f      	bls.n	80038bc <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <USB_SetTurnaroundTime+0xe4>)
 800387e:	440b      	add	r3, r1
 8003880:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8003884:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8003888:	4293      	cmp	r3, r2
 800388a:	d919      	bls.n	80038c0 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <USB_SetTurnaroundTime+0xe8>)
 800388e:	440b      	add	r3, r1
 8003890:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8003894:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <USB_SetTurnaroundTime+0x94>
      UsbTrd = 0x6U;
 800389c:	2106      	movs	r1, #6
 800389e:	e7b8      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 80038a0:	2107      	movs	r1, #7
 80038a2:	e7b6      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80038a4:	210f      	movs	r1, #15
 80038a6:	e7b4      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80038a8:	210e      	movs	r1, #14
 80038aa:	e7b2      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80038ac:	210d      	movs	r1, #13
 80038ae:	e7b0      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80038b0:	210c      	movs	r1, #12
 80038b2:	e7ae      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80038b4:	210b      	movs	r1, #11
 80038b6:	e7ac      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80038b8:	210a      	movs	r1, #10
 80038ba:	e7aa      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80038bc:	2109      	movs	r1, #9
 80038be:	e7a8      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80038c0:	2108      	movs	r1, #8
 80038c2:	e7a6      	b.n	8003812 <USB_SetTurnaroundTime+0x6>
 80038c4:	ff275340 	.word	0xff275340
 80038c8:	000c34ff 	.word	0x000c34ff
 80038cc:	ff1b1e40 	.word	0xff1b1e40
 80038d0:	000f423f 	.word	0x000f423f
 80038d4:	ff0bdc00 	.word	0xff0bdc00
 80038d8:	00124f7f 	.word	0x00124f7f
 80038dc:	fef98c80 	.word	0xfef98c80
 80038e0:	fee5b660 	.word	0xfee5b660
 80038e4:	0016e35f 	.word	0x0016e35f
 80038e8:	feced300 	.word	0xfeced300
 80038ec:	feb35bc0 	.word	0xfeb35bc0
 80038f0:	fe91ca00 	.word	0xfe91ca00
 80038f4:	fe5954e0 	.word	0xfe5954e0

080038f8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038f8:	6883      	ldr	r3, [r0, #8]
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6083      	str	r3, [r0, #8]
}
 8003900:	2000      	movs	r0, #0
 8003902:	4770      	bx	lr

08003904 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003904:	6883      	ldr	r3, [r0, #8]
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6083      	str	r3, [r0, #8]
}
 800390c:	2000      	movs	r0, #0
 800390e:	4770      	bx	lr

08003910 <USB_FlushTxFifo>:
{
 8003910:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 8003916:	9b01      	ldr	r3, [sp, #4]
 8003918:	3301      	adds	r3, #1
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <USB_FlushTxFifo+0x48>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d814      	bhi.n	800394c <USB_FlushTxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003922:	6903      	ldr	r3, [r0, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	daf6      	bge.n	8003916 <USB_FlushTxFifo+0x6>
  count = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800392c:	0189      	lsls	r1, r1, #6
 800392e:	f041 0120 	orr.w	r1, r1, #32
 8003932:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003934:	9b01      	ldr	r3, [sp, #4]
 8003936:	3301      	adds	r3, #1
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <USB_FlushTxFifo+0x48>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d808      	bhi.n	8003952 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003940:	6903      	ldr	r3, [r0, #16]
 8003942:	f013 0f20 	tst.w	r3, #32
 8003946:	d1f5      	bne.n	8003934 <USB_FlushTxFifo+0x24>
  return HAL_OK;
 8003948:	2000      	movs	r0, #0
 800394a:	e000      	b.n	800394e <USB_FlushTxFifo+0x3e>
      return HAL_TIMEOUT;
 800394c:	2003      	movs	r0, #3
}
 800394e:	b002      	add	sp, #8
 8003950:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003952:	2003      	movs	r0, #3
 8003954:	e7fb      	b.n	800394e <USB_FlushTxFifo+0x3e>
 8003956:	bf00      	nop
 8003958:	00030d40 	.word	0x00030d40

0800395c <USB_FlushRxFifo>:
{
 800395c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	9301      	str	r3, [sp, #4]
    if (++count > 200000U)
 8003962:	9b01      	ldr	r3, [sp, #4]
 8003964:	3301      	adds	r3, #1
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <USB_FlushRxFifo+0x44>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d812      	bhi.n	8003994 <USB_FlushRxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800396e:	6903      	ldr	r3, [r0, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	daf6      	bge.n	8003962 <USB_FlushRxFifo+0x6>
  count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003978:	2310      	movs	r3, #16
 800397a:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800397c:	9b01      	ldr	r3, [sp, #4]
 800397e:	3301      	adds	r3, #1
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <USB_FlushRxFifo+0x44>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d808      	bhi.n	800399a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003988:	6903      	ldr	r3, [r0, #16]
 800398a:	f013 0f10 	tst.w	r3, #16
 800398e:	d1f5      	bne.n	800397c <USB_FlushRxFifo+0x20>
  return HAL_OK;
 8003990:	2000      	movs	r0, #0
 8003992:	e000      	b.n	8003996 <USB_FlushRxFifo+0x3a>
      return HAL_TIMEOUT;
 8003994:	2003      	movs	r0, #3
}
 8003996:	b002      	add	sp, #8
 8003998:	4770      	bx	lr
      return HAL_TIMEOUT;
 800399a:	2003      	movs	r0, #3
 800399c:	e7fb      	b.n	8003996 <USB_FlushRxFifo+0x3a>
 800399e:	bf00      	nop
 80039a0:	00030d40 	.word	0x00030d40

080039a4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80039a4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80039a8:	4319      	orrs	r1, r3
 80039aa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
	...

080039b4 <USB_DevInit>:
{
 80039b4:	b084      	sub	sp, #16
 80039b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ba:	4604      	mov	r4, r0
 80039bc:	a807      	add	r0, sp, #28
 80039be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	e006      	b.n	80039d6 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80039c8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80039cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80039d0:	2100      	movs	r1, #0
 80039d2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80039d4:	3301      	adds	r3, #1
 80039d6:	2b0e      	cmp	r3, #14
 80039d8:	d9f6      	bls.n	80039c8 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80039da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039dc:	bb23      	cbnz	r3, 8003a28 <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039de:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039f0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a08:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8003a0c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003a10:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d110      	bne.n	8003a3c <USB_DevInit+0x88>
    if (cfg.speed == USBD_HS_SPEED)
 8003a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1c:	b94b      	cbnz	r3, 8003a32 <USB_DevInit+0x7e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff ffbf 	bl	80039a4 <USB_SetDevSpeed>
 8003a26:	e00d      	b.n	8003a44 <USB_DevInit+0x90>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a30:	e7e7      	b.n	8003a02 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a32:	2101      	movs	r1, #1
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff ffb5 	bl	80039a4 <USB_SetDevSpeed>
 8003a3a:	e003      	b.n	8003a44 <USB_DevInit+0x90>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7ff ffb0 	bl	80039a4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a44:	2110      	movs	r1, #16
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff ff62 	bl	8003910 <USB_FlushTxFifo>
 8003a4c:	4680      	mov	r8, r0
 8003a4e:	b108      	cbz	r0, 8003a54 <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 8003a50:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff ff81 	bl	800395c <USB_FlushRxFifo>
 8003a5a:	b108      	cbz	r0, 8003a60 <USB_DevInit+0xac>
    ret = HAL_ERROR;
 8003a5c:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a64:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a66:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a68:	e00a      	b.n	8003a80 <USB_DevInit+0xcc>
      if (i == 0U)
 8003a6a:	b9c3      	cbnz	r3, 8003a9e <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a6c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003a70:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a74:	2200      	movs	r2, #0
 8003a76:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a78:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8003a7c:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a7e:	3301      	adds	r3, #1
 8003a80:	9907      	ldr	r1, [sp, #28]
 8003a82:	4299      	cmp	r1, r3
 8003a84:	d910      	bls.n	8003aa8 <USB_DevInit+0xf4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a86:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8003a8a:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8003a8e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8003a92:	2800      	cmp	r0, #0
 8003a94:	dbe9      	blt.n	8003a6a <USB_DevInit+0xb6>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a96:	2000      	movs	r0, #0
 8003a98:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8003a9c:	e7ea      	b.n	8003a74 <USB_DevInit+0xc0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aa2:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8003aa6:	e7e5      	b.n	8003a74 <USB_DevInit+0xc0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e00a      	b.n	8003ac2 <USB_DevInit+0x10e>
      if (i == 0U)
 8003aac:	b1bb      	cbz	r3, 8003ade <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aae:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8003ab2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aba:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8003abe:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	4299      	cmp	r1, r3
 8003ac4:	d910      	bls.n	8003ae8 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ac6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8003aca:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8003ace:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8003ad2:	2f00      	cmp	r7, #0
 8003ad4:	dbea      	blt.n	8003aac <USB_DevInit+0xf8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad6:	2700      	movs	r7, #0
 8003ad8:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8003adc:	e7eb      	b.n	8003ab6 <USB_DevInit+0x102>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ade:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8003ae2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8003ae6:	e7e6      	b.n	8003ab6 <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae8:	6933      	ldr	r3, [r6, #16]
 8003aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aee:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003af4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003af8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003afc:	b91b      	cbnz	r3, 8003b06 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003afe:	69a3      	ldr	r3, [r4, #24]
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b06:	69a2      	ldr	r2, [r4, #24]
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <USB_DevInit+0x180>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b10:	b11b      	cbz	r3, 8003b1a <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b12:	69a3      	ldr	r3, [r4, #24]
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d004      	beq.n	8003b2a <USB_DevInit+0x176>
}
 8003b20:	4640      	mov	r0, r8
 8003b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b26:	b004      	add	sp, #16
 8003b28:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b2a:	69a2      	ldr	r2, [r4, #24]
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <USB_DevInit+0x184>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61a3      	str	r3, [r4, #24]
 8003b32:	e7f5      	b.n	8003b20 <USB_DevInit+0x16c>
 8003b34:	803c3800 	.word	0x803c3800
 8003b38:	40000004 	.word	0x40000004

08003b3c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b3c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b40:	f013 0306 	ands.w	r3, r3, #6
 8003b44:	d005      	beq.n	8003b52 <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	bf18      	it	ne
 8003b4a:	2b02      	cmpne	r3, #2
 8003b4c:	d103      	bne.n	8003b56 <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 8003b4e:	2002      	movs	r0, #2
 8003b50:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8003b52:	2000      	movs	r0, #0
 8003b54:	4770      	bx	lr
    speed = 0xFU;
 8003b56:	200f      	movs	r0, #15
}
 8003b58:	4770      	bx	lr
	...

08003b5c <USB_ActivateEndpoint>:
{
 8003b5c:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8003b5e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003b60:	784a      	ldrb	r2, [r1, #1]
 8003b62:	2a01      	cmp	r2, #1
 8003b64:	d020      	beq.n	8003ba8 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b66:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003b6a:	f003 060f 	and.w	r6, r3, #15
 8003b6e:	2401      	movs	r4, #1
 8003b70:	40b4      	lsls	r4, r6
 8003b72:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003b76:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b7a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003b7e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003b82:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003b86:	d10c      	bne.n	8003ba2 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b88:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003b8c:	688b      	ldr	r3, [r1, #8]
 8003b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b92:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b94:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <USB_ActivateEndpoint+0x8c>)
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	bc70      	pop	{r4, r5, r6}
 8003ba6:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ba8:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8003bac:	f003 060f 	and.w	r6, r3, #15
 8003bb0:	40b2      	lsls	r2, r6
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	4322      	orrs	r2, r4
 8003bb6:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003bbe:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003bc2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003bc6:	d1ec      	bne.n	8003ba2 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bc8:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8003bcc:	688a      	ldr	r2, [r1, #8]
 8003bce:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bd2:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bd8:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bdc:	4323      	orrs	r3, r4
 8003bde:	4a02      	ldr	r2, [pc, #8]	; (8003be8 <USB_ActivateEndpoint+0x8c>)
 8003be0:	431a      	orrs	r2, r3
 8003be2:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8003be6:	e7dc      	b.n	8003ba2 <USB_ActivateEndpoint+0x46>
 8003be8:	10008000 	.word	0x10008000

08003bec <USB_DeactivateEndpoint>:
{
 8003bec:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8003bee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003bf0:	784a      	ldrb	r2, [r1, #1]
 8003bf2:	2a01      	cmp	r2, #1
 8003bf4:	d024      	beq.n	8003c40 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bf6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003bfa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003bfe:	2a00      	cmp	r2, #0
 8003c00:	db50      	blt.n	8003ca4 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c02:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8003c06:	780a      	ldrb	r2, [r1, #0]
 8003c08:	f002 020f 	and.w	r2, r2, #15
 8003c0c:	2401      	movs	r4, #1
 8003c0e:	fa04 f202 	lsl.w	r2, r4, r2
 8003c12:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8003c16:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c1a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003c1e:	7809      	ldrb	r1, [r1, #0]
 8003c20:	f001 010f 	and.w	r1, r1, #15
 8003c24:	408c      	lsls	r4, r1
 8003c26:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8003c2a:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c2e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003c32:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <USB_DeactivateEndpoint+0xd4>)
 8003c34:	400a      	ands	r2, r1
 8003c36:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	bc30      	pop	{r4, r5}
 8003c3e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c40:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003c44:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	db1e      	blt.n	8003c8a <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c4c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8003c50:	780a      	ldrb	r2, [r1, #0]
 8003c52:	f002 020f 	and.w	r2, r2, #15
 8003c56:	2401      	movs	r4, #1
 8003c58:	fa04 f202 	lsl.w	r2, r4, r2
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	ea25 0202 	bic.w	r2, r5, r2
 8003c62:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c66:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003c6a:	7809      	ldrb	r1, [r1, #0]
 8003c6c:	f001 010f 	and.w	r1, r1, #15
 8003c70:	408c      	lsls	r4, r1
 8003c72:	b2a4      	uxth	r4, r4
 8003c74:	ea22 0404 	bic.w	r4, r2, r4
 8003c78:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c7c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003c80:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <USB_DeactivateEndpoint+0xd8>)
 8003c82:	400a      	ands	r2, r1
 8003c84:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003c88:	e7d7      	b.n	8003c3a <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c8a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003c8e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003c92:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c96:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003c9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c9e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003ca2:	e7d3      	b.n	8003c4c <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ca4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003ca8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003cac:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cb0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003cb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cb8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003cbc:	e7a1      	b.n	8003c02 <USB_DeactivateEndpoint+0x16>
 8003cbe:	bf00      	nop
 8003cc0:	eff37800 	.word	0xeff37800
 8003cc4:	ec337800 	.word	0xec337800

08003cc8 <USB_EP0StartXfer>:
{
 8003cc8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8003cca:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003ccc:	784c      	ldrb	r4, [r1, #1]
 8003cce:	2c01      	cmp	r4, #1
 8003cd0:	d024      	beq.n	8003d1c <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cd2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003cd6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003cda:	691d      	ldr	r5, [r3, #16]
 8003cdc:	4c3e      	ldr	r4, [pc, #248]	; (8003dd8 <USB_EP0StartXfer+0x110>)
 8003cde:	402c      	ands	r4, r5
 8003ce0:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ce2:	691d      	ldr	r5, [r3, #16]
 8003ce4:	4c3d      	ldr	r4, [pc, #244]	; (8003ddc <USB_EP0StartXfer+0x114>)
 8003ce6:	402c      	ands	r4, r5
 8003ce8:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8003cea:	694c      	ldr	r4, [r1, #20]
 8003cec:	b10c      	cbz	r4, 8003cf2 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8003cee:	688c      	ldr	r4, [r1, #8]
 8003cf0:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cf2:	691c      	ldr	r4, [r3, #16]
 8003cf4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003cf8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003cfa:	691c      	ldr	r4, [r3, #16]
 8003cfc:	688d      	ldr	r5, [r1, #8]
 8003cfe:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003d02:	432c      	orrs	r4, r5
 8003d04:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8003d06:	2a01      	cmp	r2, #1
 8003d08:	d061      	beq.n	8003dce <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d0a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d12:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003d16:	2000      	movs	r0, #0
 8003d18:	bc70      	pop	{r4, r5, r6}
 8003d1a:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8003d1c:	694c      	ldr	r4, [r1, #20]
 8003d1e:	bb5c      	cbnz	r4, 8003d78 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d20:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003d24:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003d28:	4d2c      	ldr	r5, [pc, #176]	; (8003ddc <USB_EP0StartXfer+0x114>)
 8003d2a:	4035      	ands	r5, r6
 8003d2c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d30:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003d34:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003d38:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d3c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003d40:	4d25      	ldr	r5, [pc, #148]	; (8003dd8 <USB_EP0StartXfer+0x110>)
 8003d42:	4035      	ands	r5, r6
 8003d44:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003d48:	2a01      	cmp	r2, #1
 8003d4a:	d031      	beq.n	8003db0 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d4c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003d50:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003d54:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003d58:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003d5c:	694b      	ldr	r3, [r1, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0d9      	beq.n	8003d16 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d62:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003d66:	7809      	ldrb	r1, [r1, #0]
 8003d68:	f001 040f 	and.w	r4, r1, #15
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	40a1      	lsls	r1, r4
 8003d70:	430a      	orrs	r2, r1
 8003d72:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8003d76:	e7ce      	b.n	8003d16 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d78:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003d7c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8003d80:	6926      	ldr	r6, [r4, #16]
 8003d82:	4d15      	ldr	r5, [pc, #84]	; (8003dd8 <USB_EP0StartXfer+0x110>)
 8003d84:	4035      	ands	r5, r6
 8003d86:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d88:	6926      	ldr	r6, [r4, #16]
 8003d8a:	4d14      	ldr	r5, [pc, #80]	; (8003ddc <USB_EP0StartXfer+0x114>)
 8003d8c:	4035      	ands	r5, r6
 8003d8e:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003d90:	694e      	ldr	r6, [r1, #20]
 8003d92:	688d      	ldr	r5, [r1, #8]
 8003d94:	42ae      	cmp	r6, r5
 8003d96:	d900      	bls.n	8003d9a <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 8003d98:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d9a:	6925      	ldr	r5, [r4, #16]
 8003d9c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003da0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003da2:	6925      	ldr	r5, [r4, #16]
 8003da4:	694e      	ldr	r6, [r1, #20]
 8003da6:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003daa:	4335      	orrs	r5, r6
 8003dac:	6125      	str	r5, [r4, #16]
 8003dae:	e7cb      	b.n	8003d48 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8003db0:	690a      	ldr	r2, [r1, #16]
 8003db2:	b11a      	cbz	r2, 8003dbc <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003db4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003db8:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dbc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003dc0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003dc4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003dc8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8003dcc:	e7a3      	b.n	8003d16 <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003dce:	68ca      	ldr	r2, [r1, #12]
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	d09a      	beq.n	8003d0a <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	e798      	b.n	8003d0a <USB_EP0StartXfer+0x42>
 8003dd8:	fff80000 	.word	0xfff80000
 8003ddc:	e007ffff 	.word	0xe007ffff

08003de0 <USB_WritePacket>:
{
 8003de0:	b470      	push	{r4, r5, r6}
 8003de2:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8003de6:	b964      	cbnz	r4, 8003e02 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003de8:	3303      	adds	r3, #3
 8003dea:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8003dec:	e007      	b.n	8003dfe <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003dee:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dfa:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003dfc:	3401      	adds	r4, #1
 8003dfe:	42ac      	cmp	r4, r5
 8003e00:	d3f5      	bcc.n	8003dee <USB_WritePacket+0xe>
}
 8003e02:	2000      	movs	r0, #0
 8003e04:	bc70      	pop	{r4, r5, r6}
 8003e06:	4770      	bx	lr

08003e08 <USB_EPStartXfer>:
{
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8003e0c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003e0e:	784c      	ldrb	r4, [r1, #1]
 8003e10:	2c01      	cmp	r4, #1
 8003e12:	d029      	beq.n	8003e68 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e14:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e18:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8003e1c:	6926      	ldr	r6, [r4, #16]
 8003e1e:	4d7d      	ldr	r5, [pc, #500]	; (8004014 <USB_EPStartXfer+0x20c>)
 8003e20:	4035      	ands	r5, r6
 8003e22:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e24:	6926      	ldr	r6, [r4, #16]
 8003e26:	4d7c      	ldr	r5, [pc, #496]	; (8004018 <USB_EPStartXfer+0x210>)
 8003e28:	4035      	ands	r5, r6
 8003e2a:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8003e2c:	694d      	ldr	r5, [r1, #20]
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	f040 80c1 	bne.w	8003fb6 <USB_EPStartXfer+0x1ae>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e34:	6925      	ldr	r5, [r4, #16]
 8003e36:	688e      	ldr	r6, [r1, #8]
 8003e38:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003e3c:	4335      	orrs	r5, r6
 8003e3e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e40:	6925      	ldr	r5, [r4, #16]
 8003e42:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003e46:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8003e48:	2a01      	cmp	r2, #1
 8003e4a:	f000 80c9 	beq.w	8003fe0 <USB_EPStartXfer+0x1d8>
    if (ep->type == EP_TYPE_ISOC)
 8003e4e:	78ca      	ldrb	r2, [r1, #3]
 8003e50:	2a01      	cmp	r2, #1
 8003e52:	f000 80cb 	beq.w	8003fec <USB_EPStartXfer+0x1e4>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e56:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003e5a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003e5e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003e62:	2000      	movs	r0, #0
 8003e64:	b003      	add	sp, #12
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003e68:	694c      	ldr	r4, [r1, #20]
 8003e6a:	bb74      	cbnz	r4, 8003eca <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e6c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003e70:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003e74:	4d68      	ldr	r5, [pc, #416]	; (8004018 <USB_EPStartXfer+0x210>)
 8003e76:	4035      	ands	r5, r6
 8003e78:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e7c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003e80:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003e84:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e88:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003e8c:	4d61      	ldr	r5, [pc, #388]	; (8004014 <USB_EPStartXfer+0x20c>)
 8003e8e:	4035      	ands	r5, r6
 8003e90:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003e94:	2a01      	cmp	r2, #1
 8003e96:	d04a      	beq.n	8003f2e <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e98:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003e9c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003ea0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003ea4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003ea8:	78cc      	ldrb	r4, [r1, #3]
 8003eaa:	2c01      	cmp	r4, #1
 8003eac:	d068      	beq.n	8003f80 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8003eae:	694b      	ldr	r3, [r1, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0d6      	beq.n	8003e62 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003eb4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003eb8:	7809      	ldrb	r1, [r1, #0]
 8003eba:	f001 040f 	and.w	r4, r1, #15
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	40a1      	lsls	r1, r4
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8003ec8:	e7cb      	b.n	8003e62 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eca:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003ece:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003ed2:	4d50      	ldr	r5, [pc, #320]	; (8004014 <USB_EPStartXfer+0x20c>)
 8003ed4:	4035      	ands	r5, r6
 8003ed6:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eda:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003ede:	4d4e      	ldr	r5, [pc, #312]	; (8004018 <USB_EPStartXfer+0x210>)
 8003ee0:	4035      	ands	r5, r6
 8003ee2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ee6:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003eea:	694d      	ldr	r5, [r1, #20]
 8003eec:	688f      	ldr	r7, [r1, #8]
 8003eee:	443d      	add	r5, r7
 8003ef0:	3d01      	subs	r5, #1
 8003ef2:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ef6:	4f49      	ldr	r7, [pc, #292]	; (800401c <USB_EPStartXfer+0x214>)
 8003ef8:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003efc:	4335      	orrs	r5, r6
 8003efe:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f02:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003f06:	694e      	ldr	r6, [r1, #20]
 8003f08:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003f0c:	4335      	orrs	r5, r6
 8003f0e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f12:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8003f16:	78cd      	ldrb	r5, [r1, #3]
 8003f18:	2d01      	cmp	r5, #1
 8003f1a:	d1bb      	bne.n	8003e94 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f1c:	6925      	ldr	r5, [r4, #16]
 8003f1e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8003f22:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f24:	6925      	ldr	r5, [r4, #16]
 8003f26:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003f2a:	6125      	str	r5, [r4, #16]
 8003f2c:	e7b2      	b.n	8003e94 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 8003f2e:	690a      	ldr	r2, [r1, #16]
 8003f30:	b11a      	cbz	r2, 8003f3a <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f32:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003f36:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003f3a:	78ca      	ldrb	r2, [r1, #3]
 8003f3c:	2a01      	cmp	r2, #1
 8003f3e:	d008      	beq.n	8003f52 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f40:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003f44:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003f48:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003f4c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003f50:	e787      	b.n	8003e62 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f52:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003f56:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003f5a:	d108      	bne.n	8003f6e <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f5c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003f60:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8003f64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f68:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003f6c:	e7e8      	b.n	8003f40 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f6e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003f72:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8003f76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f7a:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003f7e:	e7df      	b.n	8003f40 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f80:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003f84:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003f88:	d10e      	bne.n	8003fa8 <USB_EPStartXfer+0x1a0>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f8a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003f8e:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8003f92:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8003f96:	4614      	mov	r4, r2
 8003f98:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f9a:	68c9      	ldr	r1, [r1, #12]
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	8a9b      	ldrh	r3, [r3, #20]
 8003fa0:	9400      	str	r4, [sp, #0]
 8003fa2:	f7ff ff1d 	bl	8003de0 <USB_WritePacket>
 8003fa6:	e75c      	b.n	8003e62 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fa8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003fac:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003fb0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8003fb4:	e7ef      	b.n	8003f96 <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003fb6:	688e      	ldr	r6, [r1, #8]
 8003fb8:	4435      	add	r5, r6
 8003fba:	3d01      	subs	r5, #1
 8003fbc:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003fc0:	6926      	ldr	r6, [r4, #16]
 8003fc2:	4f16      	ldr	r7, [pc, #88]	; (800401c <USB_EPStartXfer+0x214>)
 8003fc4:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8003fc8:	433e      	orrs	r6, r7
 8003fca:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003fcc:	6927      	ldr	r7, [r4, #16]
 8003fce:	688e      	ldr	r6, [r1, #8]
 8003fd0:	b2ad      	uxth	r5, r5
 8003fd2:	fb06 f505 	mul.w	r5, r6, r5
 8003fd6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003fda:	433d      	orrs	r5, r7
 8003fdc:	6125      	str	r5, [r4, #16]
 8003fde:	e733      	b.n	8003e48 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fe0:	68ca      	ldr	r2, [r1, #12]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	f43f af33 	beq.w	8003e4e <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fe8:	6162      	str	r2, [r4, #20]
 8003fea:	e730      	b.n	8003e4e <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fec:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003ff0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003ff4:	d106      	bne.n	8004004 <USB_EPStartXfer+0x1fc>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ff6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003ffa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ffe:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004002:	e728      	b.n	8003e56 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004004:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004008:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800400c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004010:	e721      	b.n	8003e56 <USB_EPStartXfer+0x4e>
 8004012:	bf00      	nop
 8004014:	fff80000 	.word	0xfff80000
 8004018:	e007ffff 	.word	0xe007ffff
 800401c:	1ff80000 	.word	0x1ff80000

08004020 <USB_ReadPacket>:
{
 8004020:	b470      	push	{r4, r5, r6}
 8004022:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	4606      	mov	r6, r0
  uint32_t count32b = (uint32_t)len >> 2U;
 8004026:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8004028:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	e005      	b.n	800403c <USB_ReadPacket+0x1c>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004030:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8004034:	6824      	ldr	r4, [r4, #0]
 8004036:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 800403a:	3301      	adds	r3, #1
 800403c:	42ab      	cmp	r3, r5
 800403e:	d3f7      	bcc.n	8004030 <USB_ReadPacket+0x10>
  if (remaining_bytes != 0U)
 8004040:	b19a      	cbz	r2, 800406a <USB_ReadPacket+0x4a>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004042:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8004046:	6803      	ldr	r3, [r0, #0]
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	4608      	mov	r0, r1
    i = 0U;
 800404c:	2400      	movs	r4, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800404e:	b2e3      	uxtb	r3, r4
 8004050:	00d9      	lsls	r1, r3, #3
 8004052:	9b01      	ldr	r3, [sp, #4]
 8004054:	40cb      	lsrs	r3, r1
 8004056:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800405a:	3401      	adds	r4, #1
      remaining_bytes--;
 800405c:	3a01      	subs	r2, #1
 800405e:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8004060:	2a00      	cmp	r2, #0
 8004062:	d1f4      	bne.n	800404e <USB_ReadPacket+0x2e>
}
 8004064:	b003      	add	sp, #12
 8004066:	bc70      	pop	{r4, r5, r6}
 8004068:	4770      	bx	lr
 800406a:	4608      	mov	r0, r1
  return ((void *)pDest);
 800406c:	e7fa      	b.n	8004064 <USB_ReadPacket+0x44>

0800406e <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800406e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004070:	784a      	ldrb	r2, [r1, #1]
 8004072:	2a01      	cmp	r2, #1
 8004074:	d014      	beq.n	80040a0 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004076:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800407a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800407e:	2a00      	cmp	r2, #0
 8004080:	db06      	blt.n	8004090 <USB_EPSetStall+0x22>
 8004082:	b12b      	cbz	r3, 8004090 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004084:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800408c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004090:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004098:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800409c:	2000      	movs	r0, #0
 800409e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040a0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040a4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	db06      	blt.n	80040ba <USB_EPSetStall+0x4c>
 80040ac:	b12b      	cbz	r3, 80040ba <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040ae:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040b6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80040c6:	e7e9      	b.n	800409c <USB_EPSetStall+0x2e>

080040c8 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80040c8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80040ca:	784a      	ldrb	r2, [r1, #1]
 80040cc:	2a01      	cmp	r2, #1
 80040ce:	d00e      	beq.n	80040ee <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040d4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80040d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040dc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040e0:	78cb      	ldrb	r3, [r1, #3]
 80040e2:	3b02      	subs	r3, #2
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d915      	bls.n	8004116 <USB_EPClearStall+0x4e>
}
 80040ea:	2000      	movs	r0, #0
 80040ec:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040ee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80040f2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80040f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040fa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040fe:	78cb      	ldrb	r3, [r1, #3]
 8004100:	3b02      	subs	r3, #2
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d8f0      	bhi.n	80040ea <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004108:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8004114:	e7e9      	b.n	80040ea <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004116:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004122:	e7e2      	b.n	80040ea <USB_EPClearStall+0x22>

08004124 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004124:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004128:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800412c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004130:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004134:	0109      	lsls	r1, r1, #4
 8004136:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800413a:	430b      	orrs	r3, r1
 800413c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8004140:	2000      	movs	r0, #0
 8004142:	4770      	bx	lr

08004144 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004144:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004148:	f023 0303 	bic.w	r3, r3, #3
 800414c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004150:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004154:	f023 0302 	bic.w	r3, r3, #2
 8004158:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800415c:	2000      	movs	r0, #0
 800415e:	4770      	bx	lr

08004160 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004160:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004164:	f023 0303 	bic.w	r3, r3, #3
 8004168:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800416c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004178:	2000      	movs	r0, #0
 800417a:	4770      	bx	lr

0800417c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800417c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800417e:	6980      	ldr	r0, [r0, #24]
}
 8004180:	4010      	ands	r0, r2
 8004182:	4770      	bx	lr

08004184 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004184:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004188:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800418c:	69c0      	ldr	r0, [r0, #28]
 800418e:	4018      	ands	r0, r3
}
 8004190:	0c00      	lsrs	r0, r0, #16
 8004192:	4770      	bx	lr

08004194 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004194:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8004198:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800419c:	69c0      	ldr	r0, [r0, #28]
 800419e:	4018      	ands	r0, r3
}
 80041a0:	b280      	uxth	r0, r0
 80041a2:	4770      	bx	lr

080041a4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041a4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80041a8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041ac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80041b0:	6940      	ldr	r0, [r0, #20]
}
 80041b2:	4010      	ands	r0, r2
 80041b4:	4770      	bx	lr

080041b6 <USB_ReadDevInEPInterrupt>:
{
 80041b6:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80041b8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041bc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041c0:	f001 020f 	and.w	r2, r1, #15
 80041c4:	40d3      	lsrs	r3, r2
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80041cc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80041d0:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80041d4:	6880      	ldr	r0, [r0, #8]
}
 80041d6:	4018      	ands	r0, r3
 80041d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041dc:	4770      	bx	lr

080041de <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80041de:	6940      	ldr	r0, [r0, #20]
}
 80041e0:	f000 0001 	and.w	r0, r0, #1
 80041e4:	4770      	bx	lr

080041e6 <USB_SetCurrentMode>:
{
 80041e6:	b538      	push	{r3, r4, r5, lr}
 80041e8:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041ea:	68c3      	ldr	r3, [r0, #12]
 80041ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041f0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80041f2:	2901      	cmp	r1, #1
 80041f4:	d013      	beq.n	800421e <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80041f6:	bb29      	cbnz	r1, 8004244 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041f8:	68c3      	ldr	r3, [r0, #12]
 80041fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041fe:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004200:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004202:	2001      	movs	r0, #1
 8004204:	f7fd f952 	bl	80014ac <HAL_Delay>
      ms++;
 8004208:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800420a:	4628      	mov	r0, r5
 800420c:	f7ff ffe7 	bl	80041de <USB_GetMode>
 8004210:	b108      	cbz	r0, 8004216 <USB_SetCurrentMode+0x30>
 8004212:	2c31      	cmp	r4, #49	; 0x31
 8004214:	d9f5      	bls.n	8004202 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8004216:	2c32      	cmp	r4, #50	; 0x32
 8004218:	d012      	beq.n	8004240 <USB_SetCurrentMode+0x5a>
  return HAL_OK;
 800421a:	2000      	movs	r0, #0
}
 800421c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800421e:	68c3      	ldr	r3, [r0, #12]
 8004220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004224:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004226:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004228:	2001      	movs	r0, #1
 800422a:	f7fd f93f 	bl	80014ac <HAL_Delay>
      ms++;
 800422e:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004230:	4628      	mov	r0, r5
 8004232:	f7ff ffd4 	bl	80041de <USB_GetMode>
 8004236:	2801      	cmp	r0, #1
 8004238:	d0ed      	beq.n	8004216 <USB_SetCurrentMode+0x30>
 800423a:	2c31      	cmp	r4, #49	; 0x31
 800423c:	d9f4      	bls.n	8004228 <USB_SetCurrentMode+0x42>
 800423e:	e7ea      	b.n	8004216 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
 8004242:	e7eb      	b.n	800421c <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8004244:	2001      	movs	r0, #1
 8004246:	e7e9      	b.n	800421c <USB_SetCurrentMode+0x36>

08004248 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004248:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <USB_ActivateSetup+0x1c>)
 800424e:	4013      	ands	r3, r2
 8004250:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004254:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004260:	2000      	movs	r0, #0
 8004262:	4770      	bx	lr
 8004264:	fffff800 	.word	0xfffff800

08004268 <USB_EP0_OutStart>:
{
 8004268:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800426a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <USB_EP0_OutStart+0x5c>)
 800426e:	429c      	cmp	r4, r3
 8004270:	d903      	bls.n	800427a <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004272:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004276:	2b00      	cmp	r3, #0
 8004278:	db16      	blt.n	80042a8 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800427a:	2400      	movs	r4, #0
 800427c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004280:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004284:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004288:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800428c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8004290:	f044 0418 	orr.w	r4, r4, #24
 8004294:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004298:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800429c:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80042a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80042a4:	2901      	cmp	r1, #1
 80042a6:	d003      	beq.n	80042b0 <USB_EP0_OutStart+0x48>
}
 80042a8:	2000      	movs	r0, #0
 80042aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ae:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042b0:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80042b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80042b8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80042bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80042c0:	e7f2      	b.n	80042a8 <USB_EP0_OutStart+0x40>
 80042c2:	bf00      	nop
 80042c4:	4f54300a 	.word	0x4f54300a

080042c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80042c8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042ca:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80042ce:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80042d2:	b15b      	cbz	r3, 80042ec <USBD_CDC_EP0_RxReady+0x24>
 80042d4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80042d8:	28ff      	cmp	r0, #255	; 0xff
 80042da:	d007      	beq.n	80042ec <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80042e2:	4621      	mov	r1, r4
 80042e4:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80042e6:	23ff      	movs	r3, #255	; 0xff
 80042e8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80042f0:	2343      	movs	r3, #67	; 0x43
 80042f2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80042f4:	4800      	ldr	r0, [pc, #0]	; (80042f8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80042f6:	4770      	bx	lr
 80042f8:	20000040 	.word	0x20000040

080042fc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80042fc:	2343      	movs	r3, #67	; 0x43
 80042fe:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8004300:	4800      	ldr	r0, [pc, #0]	; (8004304 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004302:	4770      	bx	lr
 8004304:	20000084 	.word	0x20000084

08004308 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004308:	2343      	movs	r3, #67	; 0x43
 800430a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800430c:	4800      	ldr	r0, [pc, #0]	; (8004310 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800430e:	4770      	bx	lr
 8004310:	200000d4 	.word	0x200000d4

08004314 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004314:	230a      	movs	r3, #10
 8004316:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8004318:	4800      	ldr	r0, [pc, #0]	; (800431c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800431a:	4770      	bx	lr
 800431c:	200000c8 	.word	0x200000c8

08004320 <USBD_CDC_DataOut>:
{
 8004320:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004322:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8004326:	b175      	cbz	r5, 8004346 <USBD_CDC_DataOut+0x26>
 8004328:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800432a:	f001 faae 	bl	800588a <USBD_LL_GetRxDataSize>
 800432e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004332:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800433c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004340:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8004342:	2000      	movs	r0, #0
}
 8004344:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8004346:	2003      	movs	r0, #3
 8004348:	e7fc      	b.n	8004344 <USBD_CDC_DataOut+0x24>

0800434a <USBD_CDC_DataIn>:
{
 800434a:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800434c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8004350:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8004354:	b355      	cbz	r5, 80043ac <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004356:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800435a:	0093      	lsls	r3, r2, #2
 800435c:	4403      	add	r3, r0
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	b96b      	cbnz	r3, 800437e <USBD_CDC_DataIn+0x34>
    hcdc->TxState = 0U;
 8004362:	2400      	movs	r4, #0
 8004364:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004368:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	460a      	mov	r2, r1
 8004370:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8004374:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8004378:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800437a:	4620      	mov	r0, r4
}
 800437c:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800437e:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8004382:	00b2      	lsls	r2, r6, #2
 8004384:	4414      	add	r4, r2
 8004386:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8004388:	fbb3 f2f4 	udiv	r2, r3, r4
 800438c:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e6      	bne.n	8004362 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 8004394:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8004398:	0093      	lsls	r3, r2, #2
 800439a:	4403      	add	r3, r0
 800439c:	2400      	movs	r4, #0
 800439e:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80043a0:	4623      	mov	r3, r4
 80043a2:	4622      	mov	r2, r4
 80043a4:	f001 fae6 	bl	8005974 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80043a8:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80043aa:	e7e7      	b.n	800437c <USBD_CDC_DataIn+0x32>
    return (uint8_t)USBD_FAIL;
 80043ac:	2003      	movs	r0, #3
 80043ae:	e7e5      	b.n	800437c <USBD_CDC_DataIn+0x32>

080043b0 <USBD_CDC_Setup>:
{
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	4605      	mov	r5, r0
 80043b6:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043b8:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80043c2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043c6:	780b      	ldrb	r3, [r1, #0]
 80043c8:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80043cc:	d027      	beq.n	800441e <USBD_CDC_Setup+0x6e>
 80043ce:	2a20      	cmp	r2, #32
 80043d0:	d15b      	bne.n	800448a <USBD_CDC_Setup+0xda>
    if (req->wLength != 0U)
 80043d2:	88ca      	ldrh	r2, [r1, #6]
 80043d4:	b93a      	cbnz	r2, 80043e6 <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043d6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	7848      	ldrb	r0, [r1, #1]
 80043e0:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80043e2:	2000      	movs	r0, #0
 80043e4:	e054      	b.n	8004490 <USBD_CDC_Setup+0xe0>
      if ((req->bmRequest & 0x80U) != 0U)
 80043e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043ea:	d00c      	beq.n	8004406 <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043ec:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4631      	mov	r1, r6
 80043f4:	7860      	ldrb	r0, [r4, #1]
 80043f6:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80043f8:	88e2      	ldrh	r2, [r4, #6]
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 fde7 	bl	8004fd0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004402:	2000      	movs	r0, #0
 8004404:	e044      	b.n	8004490 <USBD_CDC_Setup+0xe0>
        hcdc->CmdOpCode = req->bRequest;
 8004406:	784b      	ldrb	r3, [r1, #1]
 8004408:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800440c:	798b      	ldrb	r3, [r1, #6]
 800440e:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004412:	88ca      	ldrh	r2, [r1, #6]
 8004414:	4631      	mov	r1, r6
 8004416:	f000 fdf0 	bl	8004ffa <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800441a:	2000      	movs	r0, #0
 800441c:	e038      	b.n	8004490 <USBD_CDC_Setup+0xe0>
    switch (req->bRequest)
 800441e:	784b      	ldrb	r3, [r1, #1]
 8004420:	2b0b      	cmp	r3, #11
 8004422:	d82e      	bhi.n	8004482 <USBD_CDC_Setup+0xd2>
 8004424:	e8df f003 	tbb	[pc, r3]
 8004428:	2d2d3606 	.word	0x2d2d3606
 800442c:	2d2d2d2d 	.word	0x2d2d2d2d
 8004430:	23142d2d 	.word	0x23142d2d
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004434:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004438:	2b03      	cmp	r3, #3
 800443a:	d105      	bne.n	8004448 <USBD_CDC_Setup+0x98>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800443c:	2202      	movs	r2, #2
 800443e:	a901      	add	r1, sp, #4
 8004440:	f000 fdc6 	bl	8004fd0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004444:	2000      	movs	r0, #0
 8004446:	e023      	b.n	8004490 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8004448:	f000 fa66 	bl	8004918 <USBD_CtlError>
        ret = USBD_FAIL;
 800444c:	2003      	movs	r0, #3
 800444e:	e01f      	b.n	8004490 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004450:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004454:	2b03      	cmp	r3, #3
 8004456:	d106      	bne.n	8004466 <USBD_CDC_Setup+0xb6>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004458:	2201      	movs	r2, #1
 800445a:	f10d 0107 	add.w	r1, sp, #7
 800445e:	f000 fdb7 	bl	8004fd0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004462:	2000      	movs	r0, #0
 8004464:	e014      	b.n	8004490 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8004466:	f000 fa57 	bl	8004918 <USBD_CtlError>
        ret = USBD_FAIL;
 800446a:	2003      	movs	r0, #3
 800446c:	e010      	b.n	8004490 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800446e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004472:	2b03      	cmp	r3, #3
 8004474:	d101      	bne.n	800447a <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 8004476:	2000      	movs	r0, #0
 8004478:	e00a      	b.n	8004490 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 800447a:	f000 fa4d 	bl	8004918 <USBD_CtlError>
        ret = USBD_FAIL;
 800447e:	2003      	movs	r0, #3
 8004480:	e006      	b.n	8004490 <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 8004482:	f000 fa49 	bl	8004918 <USBD_CtlError>
      ret = USBD_FAIL;
 8004486:	2003      	movs	r0, #3
      break;
 8004488:	e002      	b.n	8004490 <USBD_CDC_Setup+0xe0>
    USBD_CtlError(pdev, req);
 800448a:	f000 fa45 	bl	8004918 <USBD_CtlError>
    ret = USBD_FAIL;
 800448e:	2003      	movs	r0, #3
}
 8004490:	b002      	add	sp, #8
 8004492:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8004494:	2000      	movs	r0, #0
 8004496:	e7fb      	b.n	8004490 <USBD_CDC_Setup+0xe0>

08004498 <USBD_CDC_DeInit>:
{
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800449c:	2181      	movs	r1, #129	; 0x81
 800449e:	f001 fa49 	bl	8005934 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80044a2:	2500      	movs	r5, #0
 80044a4:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80044a6:	2101      	movs	r1, #1
 80044a8:	4620      	mov	r0, r4
 80044aa:	f001 fa43 	bl	8005934 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80044ae:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80044b2:	2182      	movs	r1, #130	; 0x82
 80044b4:	4620      	mov	r0, r4
 80044b6:	f001 fa3d 	bl	8005934 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80044ba:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80044be:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 80044c2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80044c6:	b14b      	cbz	r3, 80044dc <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80044c8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80044d0:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 80044d4:	f00a feec 	bl	800f2b0 <free>
    pdev->pClassData = NULL;
 80044d8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 80044dc:	2000      	movs	r0, #0
 80044de:	bd38      	pop	{r3, r4, r5, pc}

080044e0 <USBD_CDC_Init>:
{
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80044e8:	f00a feda 	bl	800f2a0 <malloc>
  if (hcdc == NULL)
 80044ec:	b3b0      	cbz	r0, 800455c <USBD_CDC_Init+0x7c>
 80044ee:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 80044f0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044f4:	7c23      	ldrb	r3, [r4, #16]
 80044f6:	bbb3      	cbnz	r3, 8004566 <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044fc:	2202      	movs	r2, #2
 80044fe:	2181      	movs	r1, #129	; 0x81
 8004500:	4620      	mov	r0, r4
 8004502:	f001 fa0c 	bl	800591e <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004506:	2601      	movs	r6, #1
 8004508:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800450a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800450e:	2202      	movs	r2, #2
 8004510:	4631      	mov	r1, r6
 8004512:	4620      	mov	r0, r4
 8004514:	f001 fa03 	bl	800591e <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004518:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800451c:	2310      	movs	r3, #16
 800451e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004522:	2308      	movs	r3, #8
 8004524:	2203      	movs	r2, #3
 8004526:	2182      	movs	r1, #130	; 0x82
 8004528:	4620      	mov	r0, r4
 800452a:	f001 f9f8 	bl	800591e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800452e:	2301      	movs	r3, #1
 8004530:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004534:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4798      	blx	r3
  hcdc->TxState = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8004542:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004546:	7c23      	ldrb	r3, [r4, #16]
 8004548:	b30b      	cbz	r3, 800458e <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800454a:	2340      	movs	r3, #64	; 0x40
 800454c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004550:	2101      	movs	r1, #1
 8004552:	4620      	mov	r0, r4
 8004554:	f001 fa16 	bl	8005984 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8004558:	2000      	movs	r0, #0
}
 800455a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004562:	2002      	movs	r0, #2
 8004564:	e7f9      	b.n	800455a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	2202      	movs	r2, #2
 800456a:	2181      	movs	r1, #129	; 0x81
 800456c:	4620      	mov	r0, r4
 800456e:	f001 f9d6 	bl	800591e <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004572:	2601      	movs	r6, #1
 8004574:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004576:	2340      	movs	r3, #64	; 0x40
 8004578:	2202      	movs	r2, #2
 800457a:	4631      	mov	r1, r6
 800457c:	4620      	mov	r0, r4
 800457e:	f001 f9ce 	bl	800591e <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004582:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004586:	2310      	movs	r3, #16
 8004588:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800458c:	e7c9      	b.n	8004522 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800458e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004592:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004596:	2101      	movs	r1, #1
 8004598:	4620      	mov	r0, r4
 800459a:	f001 f9f3 	bl	8005984 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800459e:	2000      	movs	r0, #0
 80045a0:	e7db      	b.n	800455a <USBD_CDC_Init+0x7a>

080045a2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80045a2:	b119      	cbz	r1, 80045ac <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 80045a4:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80045a8:	2000      	movs	r0, #0
 80045aa:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80045ac:	2003      	movs	r0, #3
}
 80045ae:	4770      	bx	lr

080045b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045b0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 80045b4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 80045bc:	2000      	movs	r0, #0
 80045be:	4770      	bx	lr

080045c0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045c0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 80045c4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 80045c8:	2000      	movs	r0, #0
 80045ca:	4770      	bx	lr

080045cc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045cc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80045d0:	b19a      	cbz	r2, 80045fa <USBD_CDC_ReceivePacket+0x2e>
{
 80045d2:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d4:	7c03      	ldrb	r3, [r0, #16]
 80045d6:	b13b      	cbz	r3, 80045e8 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045d8:	2340      	movs	r3, #64	; 0x40
 80045da:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80045de:	2101      	movs	r1, #1
 80045e0:	f001 f9d0 	bl	8005984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80045e4:	2000      	movs	r0, #0
}
 80045e6:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ec:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80045f0:	2101      	movs	r1, #1
 80045f2:	f001 f9c7 	bl	8005984 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80045f6:	2000      	movs	r0, #0
 80045f8:	e7f5      	b.n	80045e6 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 80045fa:	2003      	movs	r0, #3
}
 80045fc:	4770      	bx	lr

080045fe <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045fe:	b1c0      	cbz	r0, 8004632 <USBD_Init+0x34>
{
 8004600:	b508      	push	{r3, lr}
 8004602:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004604:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 8004608:	b110      	cbz	r0, 8004610 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800460a:	2000      	movs	r0, #0
 800460c:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004610:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8004614:	b110      	cbz	r0, 800461c <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 8004616:	2000      	movs	r0, #0
 8004618:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800461c:	b109      	cbz	r1, 8004622 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 800461e:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 8004622:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004624:	2301      	movs	r3, #1
 8004626:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800462a:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800462c:	f001 f8e2 	bl	80057f4 <USBD_LL_Init>

  return ret;
}
 8004630:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004632:	2003      	movs	r0, #3
}
 8004634:	4770      	bx	lr

08004636 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004636:	b510      	push	{r4, lr}
 8004638:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8004640:	b159      	cbz	r1, 800465a <USBD_RegisterClass+0x24>
 8004642:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004644:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004648:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800464a:	f10d 0006 	add.w	r0, sp, #6
 800464e:	4798      	blx	r3
 8004650:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004654:	2000      	movs	r0, #0
}
 8004656:	b002      	add	sp, #8
 8004658:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800465a:	2003      	movs	r0, #3
 800465c:	e7fb      	b.n	8004656 <USBD_RegisterClass+0x20>

0800465e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800465e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004660:	f001 f955 	bl	800590e <USBD_LL_Start>
}
 8004664:	bd08      	pop	{r3, pc}

08004666 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004666:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004668:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800466c:	b113      	cbz	r3, 8004674 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4798      	blx	r3
  }

  return ret;
}
 8004672:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004674:	2003      	movs	r0, #3
 8004676:	e7fc      	b.n	8004672 <USBD_SetClassConfig+0xc>

08004678 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004678:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800467a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800467e:	b10b      	cbz	r3, 8004684 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004684:	2000      	movs	r0, #0
 8004686:	bd08      	pop	{r3, pc}

08004688 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800468c:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f92d 	bl	80048f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004696:	2301      	movs	r3, #1
 8004698:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800469c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80046a0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80046a4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80046a8:	f001 031f 	and.w	r3, r1, #31
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d00d      	beq.n	80046cc <USBD_LL_SetupStage+0x44>
 80046b0:	b13b      	cbz	r3, 80046c2 <USBD_LL_SetupStage+0x3a>
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d00f      	beq.n	80046d6 <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80046b6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80046ba:	4620      	mov	r0, r4
 80046bc:	f001 f942 	bl	8005944 <USBD_LL_StallEP>
      break;
 80046c0:	e003      	b.n	80046ca <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80046c2:	4629      	mov	r1, r5
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 fae0 	bl	8004c8a <USBD_StdDevReq>
  }

  return ret;
}
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80046cc:	4629      	mov	r1, r5
 80046ce:	4620      	mov	r0, r4
 80046d0:	f000 fb16 	bl	8004d00 <USBD_StdItfReq>
      break;
 80046d4:	e7f9      	b.n	80046ca <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80046d6:	4629      	mov	r1, r5
 80046d8:	4620      	mov	r0, r4
 80046da:	f000 fb45 	bl	8004d68 <USBD_StdEPReq>
      break;
 80046de:	e7f4      	b.n	80046ca <USBD_LL_SetupStage+0x42>

080046e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80046e0:	b510      	push	{r4, lr}
 80046e2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80046e4:	bb29      	cbnz	r1, 8004732 <USBD_LL_DataOutStage+0x52>
 80046e6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046e8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80046ec:	2a03      	cmp	r2, #3
 80046ee:	d001      	beq.n	80046f4 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80046f0:	2000      	movs	r0, #0
 80046f2:	e029      	b.n	8004748 <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 80046f4:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80046f8:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80046fc:	4291      	cmp	r1, r2
 80046fe:	d80d      	bhi.n	800471c <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004700:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	b123      	cbz	r3, 8004712 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004708:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800470c:	2a03      	cmp	r2, #3
 800470e:	d100      	bne.n	8004712 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 8004710:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8004712:	4620      	mov	r0, r4
 8004714:	f000 fc88 	bl	8005028 <USBD_CtlSendStatus>
  return USBD_OK;
 8004718:	2000      	movs	r0, #0
 800471a:	e015      	b.n	8004748 <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 800471c:	1a89      	subs	r1, r1, r2
 800471e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004722:	428a      	cmp	r2, r1
 8004724:	bf28      	it	cs
 8004726:	460a      	movcs	r2, r1
 8004728:	4619      	mov	r1, r3
 800472a:	f000 fc75 	bl	8005018 <USBD_CtlContinueRx>
  return USBD_OK;
 800472e:	2000      	movs	r0, #0
 8004730:	e00a      	b.n	8004748 <USBD_LL_DataOutStage+0x68>
 8004732:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8004734:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	b133      	cbz	r3, 800474a <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800473c:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004740:	2903      	cmp	r1, #3
 8004742:	d104      	bne.n	800474e <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004744:	4611      	mov	r1, r2
 8004746:	4798      	blx	r3
}
 8004748:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800474a:	2003      	movs	r0, #3
 800474c:	e7fc      	b.n	8004748 <USBD_LL_DataOutStage+0x68>
 800474e:	2003      	movs	r0, #3
 8004750:	e7fa      	b.n	8004748 <USBD_LL_DataOutStage+0x68>

08004752 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004752:	b510      	push	{r4, lr}
 8004754:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004756:	2900      	cmp	r1, #0
 8004758:	d146      	bne.n	80047e8 <USBD_LL_DataInStage+0x96>
 800475a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800475c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004760:	2a02      	cmp	r2, #2
 8004762:	d005      	beq.n	8004770 <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004764:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d039      	beq.n	80047e0 <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800476c:	2000      	movs	r0, #0
 800476e:	e046      	b.n	80047fe <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 8004770:	69c2      	ldr	r2, [r0, #28]
 8004772:	6a01      	ldr	r1, [r0, #32]
 8004774:	428a      	cmp	r2, r1
 8004776:	d813      	bhi.n	80047a0 <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 8004778:	428a      	cmp	r2, r1
 800477a:	d01d      	beq.n	80047b8 <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800477c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	b12b      	cbz	r3, 8004790 <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004784:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004788:	2a03      	cmp	r2, #3
 800478a:	d101      	bne.n	8004790 <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 800478c:	4620      	mov	r0, r4
 800478e:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	4620      	mov	r0, r4
 8004794:	f001 f8d6 	bl	8005944 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fc50 	bl	800503e <USBD_CtlReceiveStatus>
 800479e:	e7e1      	b.n	8004764 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80047a0:	1a52      	subs	r2, r2, r1
 80047a2:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80047a4:	4619      	mov	r1, r3
 80047a6:	f000 fc20 	bl	8004fea <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047aa:	2300      	movs	r3, #0
 80047ac:	461a      	mov	r2, r3
 80047ae:	4619      	mov	r1, r3
 80047b0:	4620      	mov	r0, r4
 80047b2:	f001 f8e7 	bl	8005984 <USBD_LL_PrepareReceive>
 80047b6:	e7d5      	b.n	8004764 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 80047b8:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80047ba:	4299      	cmp	r1, r3
 80047bc:	d8de      	bhi.n	800477c <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 80047be:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d2da      	bcs.n	800477c <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047c6:	2200      	movs	r2, #0
 80047c8:	4611      	mov	r1, r2
 80047ca:	f000 fc0e 	bl	8004fea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047ce:	2100      	movs	r1, #0
 80047d0:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047d4:	460b      	mov	r3, r1
 80047d6:	460a      	mov	r2, r1
 80047d8:	4620      	mov	r0, r4
 80047da:	f001 f8d3 	bl	8005984 <USBD_LL_PrepareReceive>
 80047de:	e7c1      	b.n	8004764 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 80047e0:	2000      	movs	r0, #0
 80047e2:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 80047e6:	e00a      	b.n	80047fe <USBD_LL_DataInStage+0xac>
 80047e8:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 80047ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	b133      	cbz	r3, 8004800 <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80047f2:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80047f6:	2903      	cmp	r1, #3
 80047f8:	d104      	bne.n	8004804 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80047fa:	4611      	mov	r1, r2
 80047fc:	4798      	blx	r3
}
 80047fe:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004800:	2003      	movs	r0, #3
 8004802:	e7fc      	b.n	80047fe <USBD_LL_DataInStage+0xac>
 8004804:	2003      	movs	r0, #3
 8004806:	e7fa      	b.n	80047fe <USBD_LL_DataInStage+0xac>

08004808 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800480c:	2301      	movs	r3, #1
 800480e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004812:	2300      	movs	r3, #0
 8004814:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004818:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800481a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800481e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004822:	b123      	cbz	r3, 800482e <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004824:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2100      	movs	r1, #0
 800482c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	2200      	movs	r2, #0
 8004832:	4611      	mov	r1, r2
 8004834:	4620      	mov	r0, r4
 8004836:	f001 f872 	bl	800591e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800483a:	2601      	movs	r6, #1
 800483c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004840:	2540      	movs	r5, #64	; 0x40
 8004842:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004846:	462b      	mov	r3, r5
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	4620      	mov	r0, r4
 800484e:	f001 f866 	bl	800591e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004852:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004854:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8004856:	2000      	movs	r0, #0
 8004858:	bd70      	pop	{r4, r5, r6, pc}

0800485a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800485a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800485c:	2000      	movs	r0, #0
 800485e:	4770      	bx	lr

08004860 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8004860:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004864:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004868:	2304      	movs	r3, #4
 800486a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800486e:	2000      	movs	r0, #0
 8004870:	4770      	bx	lr

08004872 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004872:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004876:	2b04      	cmp	r3, #4
 8004878:	d001      	beq.n	800487e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800487a:	2000      	movs	r0, #0
 800487c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800487e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8004882:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8004886:	e7f8      	b.n	800487a <USBD_LL_Resume+0x8>

08004888 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004888:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800488a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800488e:	2b03      	cmp	r3, #3
 8004890:	d001      	beq.n	8004896 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004892:	2000      	movs	r0, #0
 8004894:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004896:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f8      	beq.n	8004892 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80048a0:	4798      	blx	r3
 80048a2:	e7f6      	b.n	8004892 <USBD_LL_SOF+0xa>

080048a4 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80048a4:	2000      	movs	r0, #0
 80048a6:	4770      	bx	lr

080048a8 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80048a8:	2000      	movs	r0, #0
 80048aa:	4770      	bx	lr

080048ac <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80048ac:	2000      	movs	r0, #0
 80048ae:	4770      	bx	lr

080048b0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80048b0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80048b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80048bc:	b113      	cbz	r3, 80048c4 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	7901      	ldrb	r1, [r0, #4]
 80048c2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80048c4:	2000      	movs	r0, #0
 80048c6:	bd08      	pop	{r3, pc}

080048c8 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80048c8:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80048ca:	e002      	b.n	80048d2 <USBD_GetLen+0xa>
  {
    len++;
 80048cc:	3301      	adds	r3, #1
 80048ce:	b2db      	uxtb	r3, r3
    pbuff++;
 80048d0:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 80048d2:	7802      	ldrb	r2, [r0, #0]
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d1f9      	bne.n	80048cc <USBD_GetLen+0x4>
  }

  return len;
}
 80048d8:	4618      	mov	r0, r3
 80048da:	4770      	bx	lr

080048dc <USBD_SetFeature>:
{
 80048dc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048de:	884b      	ldrh	r3, [r1, #2]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d000      	beq.n	80048e6 <USBD_SetFeature+0xa>
}
 80048e4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80048e6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80048ea:	f000 fb9d 	bl	8005028 <USBD_CtlSendStatus>
}
 80048ee:	e7f9      	b.n	80048e4 <USBD_SetFeature+0x8>

080048f0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80048f0:	780b      	ldrb	r3, [r1, #0]
 80048f2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80048f4:	784b      	ldrb	r3, [r1, #1]
 80048f6:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80048f8:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80048fa:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80048fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8004900:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8004902:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8004904:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800490a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800490c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800490e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004910:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8004914:	80c3      	strh	r3, [r0, #6]
}
 8004916:	4770      	bx	lr

08004918 <USBD_CtlError>:
{
 8004918:	b510      	push	{r4, lr}
 800491a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800491c:	2180      	movs	r1, #128	; 0x80
 800491e:	f001 f811 	bl	8005944 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004922:	2100      	movs	r1, #0
 8004924:	4620      	mov	r0, r4
 8004926:	f001 f80d 	bl	8005944 <USBD_LL_StallEP>
}
 800492a:	bd10      	pop	{r4, pc}

0800492c <USBD_GetDescriptor>:
{
 800492c:	b530      	push	{r4, r5, lr}
 800492e:	b083      	sub	sp, #12
 8004930:	4604      	mov	r4, r0
 8004932:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800493a:	884a      	ldrh	r2, [r1, #2]
 800493c:	0a13      	lsrs	r3, r2, #8
 800493e:	3b01      	subs	r3, #1
 8004940:	2b0e      	cmp	r3, #14
 8004942:	f200 80bc 	bhi.w	8004abe <USBD_GetDescriptor+0x192>
 8004946:	e8df f003 	tbb	[pc, r3]
 800494a:	3015      	.short	0x3015
 800494c:	9ebaba44 	.word	0x9ebaba44
 8004950:	bababaab 	.word	0xbababaab
 8004954:	babababa 	.word	0xbabababa
 8004958:	08          	.byte	0x08
 8004959:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800495a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	b123      	cbz	r3, 800496c <USBD_GetDescriptor+0x40>
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8004962:	f10d 0106 	add.w	r1, sp, #6
 8004966:	7c00      	ldrb	r0, [r0, #16]
 8004968:	4798      	blx	r3
 800496a:	e00a      	b.n	8004982 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 800496c:	4629      	mov	r1, r5
 800496e:	f7ff ffd3 	bl	8004918 <USBD_CtlError>
 8004972:	e018      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004974:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f10d 0106 	add.w	r1, sp, #6
 800497e:	7c00      	ldrb	r0, [r0, #16]
 8004980:	4798      	blx	r3
    if (req->wLength != 0U)
 8004982:	88ea      	ldrh	r2, [r5, #6]
 8004984:	2a00      	cmp	r2, #0
 8004986:	f000 80a3 	beq.w	8004ad0 <USBD_GetDescriptor+0x1a4>
      if (len != 0U)
 800498a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8099 	beq.w	8004ac6 <USBD_GetDescriptor+0x19a>
        len = MIN(len, req->wLength);
 8004994:	429a      	cmp	r2, r3
 8004996:	bf28      	it	cs
 8004998:	461a      	movcs	r2, r3
 800499a:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800499e:	4601      	mov	r1, r0
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fb15 	bl	8004fd0 <USBD_CtlSendData>
}
 80049a6:	b003      	add	sp, #12
 80049a8:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049aa:	7c03      	ldrb	r3, [r0, #16]
 80049ac:	b943      	cbnz	r3, 80049c0 <USBD_GetDescriptor+0x94>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80049ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f10d 0006 	add.w	r0, sp, #6
 80049b8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049ba:	2302      	movs	r3, #2
 80049bc:	7043      	strb	r3, [r0, #1]
 80049be:	e7e0      	b.n	8004982 <USBD_GetDescriptor+0x56>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80049c0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f10d 0006 	add.w	r0, sp, #6
 80049ca:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049cc:	2302      	movs	r3, #2
 80049ce:	7043      	strb	r3, [r0, #1]
 80049d0:	e7d7      	b.n	8004982 <USBD_GetDescriptor+0x56>
    switch ((uint8_t)(req->wValue))
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	2a05      	cmp	r2, #5
 80049d6:	d852      	bhi.n	8004a7e <USBD_GetDescriptor+0x152>
 80049d8:	e8df f002 	tbb	[pc, r2]
 80049dc:	2a1d1003 	.word	0x2a1d1003
 80049e0:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80049e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	b123      	cbz	r3, 80049f4 <USBD_GetDescriptor+0xc8>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80049ea:	f10d 0106 	add.w	r1, sp, #6
 80049ee:	7c00      	ldrb	r0, [r0, #16]
 80049f0:	4798      	blx	r3
 80049f2:	e7c6      	b.n	8004982 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7ff ff8f 	bl	8004918 <USBD_CtlError>
 80049fa:	e7d4      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80049fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	b123      	cbz	r3, 8004a0e <USBD_GetDescriptor+0xe2>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004a04:	f10d 0106 	add.w	r1, sp, #6
 8004a08:	7c00      	ldrb	r0, [r0, #16]
 8004a0a:	4798      	blx	r3
 8004a0c:	e7b9      	b.n	8004982 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7ff ff82 	bl	8004918 <USBD_CtlError>
 8004a14:	e7c7      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004a16:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	b123      	cbz	r3, 8004a28 <USBD_GetDescriptor+0xfc>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004a1e:	f10d 0106 	add.w	r1, sp, #6
 8004a22:	7c00      	ldrb	r0, [r0, #16]
 8004a24:	4798      	blx	r3
 8004a26:	e7ac      	b.n	8004982 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7ff ff75 	bl	8004918 <USBD_CtlError>
 8004a2e:	e7ba      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004a30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	b123      	cbz	r3, 8004a42 <USBD_GetDescriptor+0x116>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004a38:	f10d 0106 	add.w	r1, sp, #6
 8004a3c:	7c00      	ldrb	r0, [r0, #16]
 8004a3e:	4798      	blx	r3
 8004a40:	e79f      	b.n	8004982 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7ff ff68 	bl	8004918 <USBD_CtlError>
 8004a48:	e7ad      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004a4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	b123      	cbz	r3, 8004a5c <USBD_GetDescriptor+0x130>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004a52:	f10d 0106 	add.w	r1, sp, #6
 8004a56:	7c00      	ldrb	r0, [r0, #16]
 8004a58:	4798      	blx	r3
 8004a5a:	e792      	b.n	8004982 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f7ff ff5b 	bl	8004918 <USBD_CtlError>
 8004a62:	e7a0      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004a64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	b123      	cbz	r3, 8004a76 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004a6c:	f10d 0106 	add.w	r1, sp, #6
 8004a70:	7c00      	ldrb	r0, [r0, #16]
 8004a72:	4798      	blx	r3
 8004a74:	e785      	b.n	8004982 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7ff ff4e 	bl	8004918 <USBD_CtlError>
 8004a7c:	e793      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8004a7e:	4629      	mov	r1, r5
 8004a80:	f7ff ff4a 	bl	8004918 <USBD_CtlError>
 8004a84:	e78f      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a86:	7c03      	ldrb	r3, [r0, #16]
 8004a88:	b933      	cbnz	r3, 8004a98 <USBD_GetDescriptor+0x16c>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004a8a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	f10d 0006 	add.w	r0, sp, #6
 8004a94:	4798      	blx	r3
 8004a96:	e774      	b.n	8004982 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7ff ff3d 	bl	8004918 <USBD_CtlError>
 8004a9e:	e782      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aa0:	7c03      	ldrb	r3, [r0, #16]
 8004aa2:	b943      	cbnz	r3, 8004ab6 <USBD_GetDescriptor+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004aa4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f10d 0006 	add.w	r0, sp, #6
 8004aae:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004ab0:	2307      	movs	r3, #7
 8004ab2:	7043      	strb	r3, [r0, #1]
 8004ab4:	e765      	b.n	8004982 <USBD_GetDescriptor+0x56>
      USBD_CtlError(pdev, req);
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7ff ff2e 	bl	8004918 <USBD_CtlError>
 8004abc:	e773      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
    USBD_CtlError(pdev, req);
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f7ff ff2a 	bl	8004918 <USBD_CtlError>
 8004ac4:	e76f      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
        USBD_CtlError(pdev, req);
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff ff25 	bl	8004918 <USBD_CtlError>
 8004ace:	e76a      	b.n	80049a6 <USBD_GetDescriptor+0x7a>
      (void)USBD_CtlSendStatus(pdev);
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 faa9 	bl	8005028 <USBD_CtlSendStatus>
 8004ad6:	e766      	b.n	80049a6 <USBD_GetDescriptor+0x7a>

08004ad8 <USBD_SetAddress>:
{
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004adc:	888b      	ldrh	r3, [r1, #4]
 8004ade:	b9f3      	cbnz	r3, 8004b1e <USBD_SetAddress+0x46>
 8004ae0:	88cb      	ldrh	r3, [r1, #6]
 8004ae2:	b9e3      	cbnz	r3, 8004b1e <USBD_SetAddress+0x46>
 8004ae4:	884b      	ldrh	r3, [r1, #2]
 8004ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae8:	d819      	bhi.n	8004b1e <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004aea:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004aee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d00c      	beq.n	8004b10 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8004af6:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004afa:	4629      	mov	r1, r5
 8004afc:	f000 ff32 	bl	8005964 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 fa91 	bl	8005028 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004b06:	b135      	cbz	r5, 8004b16 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004b0e:	e009      	b.n	8004b24 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8004b10:	f7ff ff02 	bl	8004918 <USBD_CtlError>
 8004b14:	e006      	b.n	8004b24 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004b1c:	e002      	b.n	8004b24 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fefa 	bl	8004918 <USBD_CtlError>
}
 8004b24:	bd38      	pop	{r3, r4, r5, pc}
	...

08004b28 <USBD_SetConfig>:
{
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8004b2e:	7889      	ldrb	r1, [r1, #2]
 8004b30:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <USBD_SetConfig+0xc4>)
 8004b32:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004b34:	2901      	cmp	r1, #1
 8004b36:	d80f      	bhi.n	8004b58 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8004b38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d011      	beq.n	8004b64 <USBD_SetConfig+0x3c>
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d025      	beq.n	8004b90 <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 8004b44:	4629      	mov	r1, r5
 8004b46:	f7ff fee7 	bl	8004918 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <USBD_SetConfig+0xc4>)
 8004b4c:	7819      	ldrb	r1, [r3, #0]
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff fd92 	bl	8004678 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8004b54:	2603      	movs	r6, #3
    break;
 8004b56:	e003      	b.n	8004b60 <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f7ff fedd 	bl	8004918 <USBD_CtlError>
    return USBD_FAIL;
 8004b5e:	2603      	movs	r6, #3
}
 8004b60:	4630      	mov	r0, r6
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8004b64:	b181      	cbz	r1, 8004b88 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8004b66:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004b68:	f7ff fd7d 	bl	8004666 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	b120      	cbz	r0, 8004b7a <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff fed0 	bl	8004918 <USBD_CtlError>
 8004b78:	e7f2      	b.n	8004b60 <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 fa54 	bl	8005028 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004b80:	2303      	movs	r3, #3
 8004b82:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004b86:	e7eb      	b.n	8004b60 <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8004b88:	f000 fa4e 	bl	8005028 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	e7e7      	b.n	8004b60 <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 8004b90:	b1c9      	cbz	r1, 8004bc6 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 8004b92:	6843      	ldr	r3, [r0, #4]
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d025      	beq.n	8004be4 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004b98:	b2d9      	uxtb	r1, r3
 8004b9a:	f7ff fd6d 	bl	8004678 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <USBD_SetConfig+0xc4>)
 8004ba0:	7819      	ldrb	r1, [r3, #0]
 8004ba2:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7ff fd5e 	bl	8004666 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8004baa:	4606      	mov	r6, r0
 8004bac:	b1b0      	cbz	r0, 8004bdc <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff feb1 	bl	8004918 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004bb6:	7921      	ldrb	r1, [r4, #4]
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff fd5d 	bl	8004678 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004bc4:	e7cc      	b.n	8004b60 <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8004bcc:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004bce:	f7ff fd53 	bl	8004678 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 fa28 	bl	8005028 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004bd8:	2600      	movs	r6, #0
 8004bda:	e7c1      	b.n	8004b60 <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 fa23 	bl	8005028 <USBD_CtlSendStatus>
 8004be2:	e7bd      	b.n	8004b60 <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8004be4:	f000 fa20 	bl	8005028 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004be8:	2600      	movs	r6, #0
 8004bea:	e7b9      	b.n	8004b60 <USBD_SetConfig+0x38>
 8004bec:	20000256 	.word	0x20000256

08004bf0 <USBD_GetConfig>:
{
 8004bf0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8004bf2:	88cb      	ldrh	r3, [r1, #6]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10b      	bne.n	8004c10 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8004bf8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004bfc:	b19b      	cbz	r3, 8004c26 <USBD_GetConfig+0x36>
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d909      	bls.n	8004c16 <USBD_GetConfig+0x26>
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d10f      	bne.n	8004c26 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004c06:	2201      	movs	r2, #1
 8004c08:	1d01      	adds	r1, r0, #4
 8004c0a:	f000 f9e1 	bl	8004fd0 <USBD_CtlSendData>
      break;
 8004c0e:	e001      	b.n	8004c14 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004c10:	f7ff fe82 	bl	8004918 <USBD_CtlError>
}
 8004c14:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 8004c16:	4601      	mov	r1, r0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f000 f9d6 	bl	8004fd0 <USBD_CtlSendData>
      break;
 8004c24:	e7f6      	b.n	8004c14 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 8004c26:	f7ff fe77 	bl	8004918 <USBD_CtlError>
}
 8004c2a:	e7f3      	b.n	8004c14 <USBD_GetConfig+0x24>

08004c2c <USBD_GetStatus>:
{
 8004c2c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004c2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c32:	3b01      	subs	r3, #1
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d812      	bhi.n	8004c5e <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8004c38:	88cb      	ldrh	r3, [r1, #6]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d10c      	bne.n	8004c58 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8004c42:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004c46:	b10b      	cbz	r3, 8004c4c <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f100 010c 	add.w	r1, r0, #12
 8004c52:	f000 f9bd 	bl	8004fd0 <USBD_CtlSendData>
}
 8004c56:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8004c58:	f7ff fe5e 	bl	8004918 <USBD_CtlError>
      break;
 8004c5c:	e7fb      	b.n	8004c56 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8004c5e:	f7ff fe5b 	bl	8004918 <USBD_CtlError>
}
 8004c62:	e7f8      	b.n	8004c56 <USBD_GetStatus+0x2a>

08004c64 <USBD_ClrFeature>:
{
 8004c64:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004c66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d809      	bhi.n	8004c84 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c70:	884b      	ldrh	r3, [r1, #2]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d000      	beq.n	8004c78 <USBD_ClrFeature+0x14>
}
 8004c76:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004c7e:	f000 f9d3 	bl	8005028 <USBD_CtlSendStatus>
 8004c82:	e7f8      	b.n	8004c76 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004c84:	f7ff fe48 	bl	8004918 <USBD_CtlError>
}
 8004c88:	e7f5      	b.n	8004c76 <USBD_ClrFeature+0x12>

08004c8a <USBD_StdDevReq>:
{
 8004c8a:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c8c:	780b      	ldrb	r3, [r1, #0]
 8004c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d006      	beq.n	8004ca4 <USBD_StdDevReq+0x1a>
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d004      	beq.n	8004ca4 <USBD_StdDevReq+0x1a>
 8004c9a:	b143      	cbz	r3, 8004cae <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 8004c9c:	f7ff fe3c 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ca0:	2000      	movs	r0, #0
    break;
 8004ca2:	e003      	b.n	8004cac <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ca4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	4798      	blx	r3
}
 8004cac:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 8004cae:	784b      	ldrb	r3, [r1, #1]
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	d821      	bhi.n	8004cf8 <USBD_StdDevReq+0x6e>
 8004cb4:	e8df f003 	tbb	[pc, r3]
 8004cb8:	18201c14 	.word	0x18201c14
 8004cbc:	20050920 	.word	0x20050920
 8004cc0:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 8004cc2:	f7ff fe33 	bl	800492c <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cc6:	2000      	movs	r0, #0
      break;
 8004cc8:	e7f0      	b.n	8004cac <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 8004cca:	f7ff ff05 	bl	8004ad8 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cce:	2000      	movs	r0, #0
      break;
 8004cd0:	e7ec      	b.n	8004cac <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 8004cd2:	f7ff ff29 	bl	8004b28 <USBD_SetConfig>
      break;
 8004cd6:	e7e9      	b.n	8004cac <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 8004cd8:	f7ff ff8a 	bl	8004bf0 <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cdc:	2000      	movs	r0, #0
      break;
 8004cde:	e7e5      	b.n	8004cac <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 8004ce0:	f7ff ffa4 	bl	8004c2c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ce4:	2000      	movs	r0, #0
      break;
 8004ce6:	e7e1      	b.n	8004cac <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 8004ce8:	f7ff fdf8 	bl	80048dc <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cec:	2000      	movs	r0, #0
      break;
 8004cee:	e7dd      	b.n	8004cac <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 8004cf0:	f7ff ffb8 	bl	8004c64 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cf4:	2000      	movs	r0, #0
      break;
 8004cf6:	e7d9      	b.n	8004cac <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 8004cf8:	f7ff fe0e 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004cfc:	2000      	movs	r0, #0
      break;
 8004cfe:	e7d5      	b.n	8004cac <USBD_StdDevReq+0x22>

08004d00 <USBD_StdItfReq>:
{
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4605      	mov	r5, r0
 8004d04:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d06:	780b      	ldrb	r3, [r1, #0]
 8004d08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d007      	beq.n	8004d20 <USBD_StdItfReq+0x20>
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d005      	beq.n	8004d20 <USBD_StdItfReq+0x20>
 8004d14:	b123      	cbz	r3, 8004d20 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 8004d16:	f7ff fdff 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d1a:	2600      	movs	r6, #0
}
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8004d20:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004d24:	3b01      	subs	r3, #1
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d818      	bhi.n	8004d5c <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d2a:	7923      	ldrb	r3, [r4, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d80f      	bhi.n	8004d50 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d30:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	4798      	blx	r3
 8004d3c:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d3e:	88e3      	ldrh	r3, [r4, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1eb      	bne.n	8004d1c <USBD_StdItfReq+0x1c>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d1e9      	bne.n	8004d1c <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f96d 	bl	8005028 <USBD_CtlSendStatus>
 8004d4e:	e7e5      	b.n	8004d1c <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f7ff fde0 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d58:	2600      	movs	r6, #0
 8004d5a:	e7df      	b.n	8004d1c <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f7ff fdda 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d64:	2600      	movs	r6, #0
      break;
 8004d66:	e7d9      	b.n	8004d1c <USBD_StdItfReq+0x1c>

08004d68 <USBD_StdEPReq>:
{
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8004d6e:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d70:	780b      	ldrb	r3, [r1, #0]
 8004d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d008      	beq.n	8004d8c <USBD_StdEPReq+0x24>
 8004d7a:	b2d1      	uxtb	r1, r2
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d005      	beq.n	8004d8c <USBD_StdEPReq+0x24>
 8004d80:	b15b      	cbz	r3, 8004d9a <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 8004d82:	4621      	mov	r1, r4
 8004d84:	f7ff fdc8 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004d88:	2000      	movs	r0, #0
    break;
 8004d8a:	e005      	b.n	8004d98 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d8c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4621      	mov	r1, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	4798      	blx	r3
}
 8004d98:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8004d9a:	7863      	ldrb	r3, [r4, #1]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d038      	beq.n	8004e12 <USBD_StdEPReq+0xaa>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d06b      	beq.n	8004e7c <USBD_StdEPReq+0x114>
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	f040 80f0 	bne.w	8004f8a <USBD_StdEPReq+0x222>
      switch (pdev->dev_state)
 8004daa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d006      	beq.n	8004dc0 <USBD_StdEPReq+0x58>
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d019      	beq.n	8004dea <USBD_StdEPReq+0x82>
        USBD_CtlError(pdev, req);
 8004db6:	4621      	mov	r1, r4
 8004db8:	f7ff fdae 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004dbc:	2000      	movs	r0, #0
        break;
 8004dbe:	e7eb      	b.n	8004d98 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dc0:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004dc4:	bf18      	it	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	bf08      	it	eq
 8004dcc:	2300      	moveq	r3, #0
 8004dce:	b13b      	cbz	r3, 8004de0 <USBD_StdEPReq+0x78>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004dd0:	f000 fdb8 	bl	8005944 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 fdb4 	bl	8005944 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e7db      	b.n	8004d98 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8004de0:	4621      	mov	r1, r4
 8004de2:	f7ff fd99 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004de6:	2000      	movs	r0, #0
 8004de8:	e7d6      	b.n	8004d98 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004dea:	8863      	ldrh	r3, [r4, #2]
 8004dec:	b94b      	cbnz	r3, 8004e02 <USBD_StdEPReq+0x9a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004dee:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004df2:	bf18      	it	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2900      	cmp	r1, #0
 8004df8:	bf08      	it	eq
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b10b      	cbz	r3, 8004e02 <USBD_StdEPReq+0x9a>
 8004dfe:	88e3      	ldrh	r3, [r4, #6]
 8004e00:	b123      	cbz	r3, 8004e0c <USBD_StdEPReq+0xa4>
        (void)USBD_CtlSendStatus(pdev);
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 f910 	bl	8005028 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e08:	2000      	movs	r0, #0
        break;
 8004e0a:	e7c5      	b.n	8004d98 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e0c:	f000 fd9a 	bl	8005944 <USBD_LL_StallEP>
 8004e10:	e7f7      	b.n	8004e02 <USBD_StdEPReq+0x9a>
      switch (pdev->dev_state)
 8004e12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d006      	beq.n	8004e28 <USBD_StdEPReq+0xc0>
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d019      	beq.n	8004e52 <USBD_StdEPReq+0xea>
        USBD_CtlError(pdev, req);
 8004e1e:	4621      	mov	r1, r4
 8004e20:	f7ff fd7a 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e24:	2000      	movs	r0, #0
        break;
 8004e26:	e7b7      	b.n	8004d98 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e28:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004e2c:	bf18      	it	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2900      	cmp	r1, #0
 8004e32:	bf08      	it	eq
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b13b      	cbz	r3, 8004e48 <USBD_StdEPReq+0xe0>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e38:	f000 fd84 	bl	8005944 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fd80 	bl	8005944 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e44:	2000      	movs	r0, #0
 8004e46:	e7a7      	b.n	8004d98 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8004e48:	4621      	mov	r1, r4
 8004e4a:	f7ff fd65 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e4e:	2000      	movs	r0, #0
 8004e50:	e7a2      	b.n	8004d98 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004e52:	8863      	ldrh	r3, [r4, #2]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 809d 	bne.w	8004f94 <USBD_StdEPReq+0x22c>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004e5a:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004e5e:	d10a      	bne.n	8004e76 <USBD_StdEPReq+0x10e>
          (void)USBD_CtlSendStatus(pdev);
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 f8e1 	bl	8005028 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e66:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4628      	mov	r0, r5
 8004e70:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8004e72:	2000      	movs	r0, #0
 8004e74:	e790      	b.n	8004d98 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e76:	f000 fd6d 	bl	8005954 <USBD_LL_ClearStallEP>
 8004e7a:	e7f1      	b.n	8004e60 <USBD_StdEPReq+0xf8>
      switch (pdev->dev_state)
 8004e7c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d006      	beq.n	8004e92 <USBD_StdEPReq+0x12a>
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d02f      	beq.n	8004ee8 <USBD_StdEPReq+0x180>
        USBD_CtlError(pdev, req);
 8004e88:	4621      	mov	r1, r4
 8004e8a:	f7ff fd45 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004e8e:	2000      	movs	r0, #0
        break;
 8004e90:	e782      	b.n	8004d98 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e92:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8004e96:	bf18      	it	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	bf08      	it	eq
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b99b      	cbnz	r3, 8004eca <USBD_StdEPReq+0x162>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ea2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ea6:	d115      	bne.n	8004ed4 <USBD_StdEPReq+0x16c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004ea8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8004eb6:	4401      	add	r1, r0
 8004eb8:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8004eba:	2400      	movs	r4, #0
 8004ebc:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 f885 	bl	8004fd0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ec6:	4620      	mov	r0, r4
        break;
 8004ec8:	e766      	b.n	8004d98 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8004eca:	4621      	mov	r1, r4
 8004ecc:	f7ff fd24 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed0:	2000      	movs	r0, #0
          break;
 8004ed2:	e761      	b.n	8004d98 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ed4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004ed8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004edc:	008b      	lsls	r3, r1, #2
 8004ede:	f103 0110 	add.w	r1, r3, #16
 8004ee2:	4401      	add	r1, r0
 8004ee4:	3104      	adds	r1, #4
 8004ee6:	e7e8      	b.n	8004eba <USBD_StdEPReq+0x152>
        if ((ep_addr & 0x80U) == 0x80U)
 8004ee8:	b252      	sxtb	r2, r2
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	db24      	blt.n	8004f38 <USBD_StdEPReq+0x1d0>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004eee:	f001 030f 	and.w	r3, r1, #15
 8004ef2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ef6:	0098      	lsls	r0, r3, #2
 8004ef8:	4428      	add	r0, r5
 8004efa:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8004efe:	b353      	cbz	r3, 8004f56 <USBD_StdEPReq+0x1ee>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	db2e      	blt.n	8004f62 <USBD_StdEPReq+0x1fa>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004f04:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004f0c:	0093      	lsls	r3, r2, #2
 8004f0e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8004f12:	442c      	add	r4, r5
 8004f14:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004f16:	2980      	cmp	r1, #128	; 0x80
 8004f18:	bf14      	ite	ne
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	bf08      	it	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	b33b      	cbz	r3, 8004f76 <USBD_StdEPReq+0x20e>
            pep->status = 0x0000U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f000 f84e 	bl	8004fd0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f34:	2000      	movs	r0, #0
          break;
 8004f36:	e72f      	b.n	8004d98 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f38:	f001 030f 	and.w	r3, r1, #15
 8004f3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f40:	0098      	lsls	r0, r3, #2
 8004f42:	4428      	add	r0, r5
 8004f44:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1da      	bne.n	8004f00 <USBD_StdEPReq+0x198>
            USBD_CtlError(pdev, req);
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f7ff fce3 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f52:	2000      	movs	r0, #0
            break;
 8004f54:	e720      	b.n	8004d98 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8004f56:	4621      	mov	r1, r4
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f7ff fcdd 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f5e:	2000      	movs	r0, #0
            break;
 8004f60:	e71a      	b.n	8004d98 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f62:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8004f66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004f6a:	0093      	lsls	r3, r2, #2
 8004f6c:	f103 0410 	add.w	r4, r3, #16
 8004f70:	442c      	add	r4, r5
 8004f72:	3404      	adds	r4, #4
 8004f74:	e7cf      	b.n	8004f16 <USBD_StdEPReq+0x1ae>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 fc70 	bl	800585c <USBD_LL_IsStallEP>
 8004f7c:	b110      	cbz	r0, 8004f84 <USBD_StdEPReq+0x21c>
            pep->status = 0x0001U;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	e7d2      	b.n	8004f2a <USBD_StdEPReq+0x1c2>
            pep->status = 0x0000U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	e7cf      	b.n	8004f2a <USBD_StdEPReq+0x1c2>
      USBD_CtlError(pdev, req);
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	f7ff fcc4 	bl	8004918 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f90:	2000      	movs	r0, #0
      break;
 8004f92:	e701      	b.n	8004d98 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 8004f94:	2000      	movs	r0, #0
 8004f96:	e6ff      	b.n	8004d98 <USBD_StdEPReq+0x30>

08004f98 <USBD_GetString>:
  if (desc == NULL)
 8004f98:	b1c8      	cbz	r0, 8004fce <USBD_GetString+0x36>
{
 8004f9a:	b570      	push	{r4, r5, r6, lr}
 8004f9c:	460d      	mov	r5, r1
 8004f9e:	4616      	mov	r6, r2
 8004fa0:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004fa2:	f7ff fc91 	bl	80048c8 <USBD_GetLen>
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	0040      	lsls	r0, r0, #1
 8004faa:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004fac:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	706b      	strb	r3, [r5, #1]
  idx++;
 8004fb2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004fb4:	e007      	b.n	8004fc6 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 8004fb6:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004fb8:	3401      	adds	r4, #1
    idx++;
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004fc6:	7822      	ldrb	r2, [r4, #0]
 8004fc8:	2a00      	cmp	r2, #0
 8004fca:	d1f4      	bne.n	8004fb6 <USBD_GetString+0x1e>
}
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
 8004fce:	4770      	bx	lr

08004fd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004fda:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8004fdc:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004fde:	460a      	mov	r2, r1
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f000 fcc7 	bl	8005974 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004fea:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004fec:	4613      	mov	r3, r2
 8004fee:	460a      	mov	r2, r1
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f000 fcbf 	bl	8005974 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	bd08      	pop	{r3, pc}

08004ffa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004ffe:	2203      	movs	r2, #3
 8005000:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005004:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005008:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800500c:	460a      	mov	r2, r1
 800500e:	2100      	movs	r1, #0
 8005010:	f000 fcb8 	bl	8005984 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005014:	2000      	movs	r0, #0
 8005016:	bd10      	pop	{r4, pc}

08005018 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005018:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800501a:	4613      	mov	r3, r2
 800501c:	460a      	mov	r2, r1
 800501e:	2100      	movs	r1, #0
 8005020:	f000 fcb0 	bl	8005984 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005024:	2000      	movs	r0, #0
 8005026:	bd08      	pop	{r3, pc}

08005028 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005028:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800502a:	2304      	movs	r3, #4
 800502c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005030:	2300      	movs	r3, #0
 8005032:	461a      	mov	r2, r3
 8005034:	4619      	mov	r1, r3
 8005036:	f000 fc9d 	bl	8005974 <USBD_LL_Transmit>

  return USBD_OK;
}
 800503a:	2000      	movs	r0, #0
 800503c:	bd08      	pop	{r3, pc}

0800503e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800503e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005040:	2305      	movs	r3, #5
 8005042:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005046:	2300      	movs	r3, #0
 8005048:	461a      	mov	r2, r3
 800504a:	4619      	mov	r1, r3
 800504c:	f000 fc9a 	bl	8005984 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005050:	2000      	movs	r0, #0
 8005052:	bd08      	pop	{r3, pc}

08005054 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8005054:	b508      	push	{r3, lr}
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8005056:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 800505a:	4803      	ldr	r0, [pc, #12]	; (8005068 <GUI_X_Config+0x14>)
 800505c:	f003 f970 	bl	8008340 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8005060:	4802      	ldr	r0, [pc, #8]	; (800506c <GUI_X_Config+0x18>)
 8005062:	f002 fcdf 	bl	8007a24 <GUI_SetDefaultFont>
}
 8005066:	bd08      	pop	{r3, pc}
 8005068:	20000258 	.word	0x20000258
 800506c:	0800fbe4 	.word	0x0800fbe4

08005070 <GUI_X_GetTime>:
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
  return OS_TimeMS; 
 8005070:	4b01      	ldr	r3, [pc, #4]	; (8005078 <GUI_X_GetTime+0x8>)
 8005072:	6818      	ldr	r0, [r3, #0]
}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20019574 	.word	0x20019574

0800507c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
  int tEnd = OS_TimeMS + ms;
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <GUI_X_Delay+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4418      	add	r0, r3
  while ((tEnd - OS_TimeMS) > 0);
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <GUI_X_Delay+0x14>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1ac3      	subs	r3, r0, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	dcfa      	bgt.n	8005082 <GUI_X_Delay+0x6>
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20019574 	.word	0x20019574

08005094 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8005094:	4770      	bx	lr

08005096 <GUI_TOUCH_X_ActivateX>:



void GUI_TOUCH_X_ActivateX(void)
{
}
 8005096:	4770      	bx	lr

08005098 <GUI_TOUCH_X_ActivateY>:
void GUI_TOUCH_X_ActivateY(void)
{
}
 8005098:	4770      	bx	lr

0800509a <GUI_TOUCH_X_MeasureX>:
int  GUI_TOUCH_X_MeasureX(void)
{
 800509a:	b508      	push	{r3, lr}
  return STMPE610_GetX_TOUCH_RAW();
 800509c:	f7fc f9b6 	bl	800140c <STMPE610_GetX_TOUCH_RAW>
}
 80050a0:	bd08      	pop	{r3, pc}

080050a2 <GUI_TOUCH_X_MeasureY>:
int  GUI_TOUCH_X_MeasureY(void)
{
 80050a2:	b508      	push	{r3, lr}
  return STMPE610_GetY_TOUCH_RAW();
 80050a4:	f7fc f9b8 	bl	8001418 <STMPE610_GetY_TOUCH_RAW>
}
 80050a8:	bd08      	pop	{r3, pc}
	...

080050ac <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 80050ac:	b530      	push	{r4, r5, lr}
 80050ae:	b0a3      	sub	sp, #140	; 0x8c
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 80050b0:	2400      	movs	r4, #0
 80050b2:	941d      	str	r4, [sp, #116]	; 0x74
 80050b4:	941e      	str	r4, [sp, #120]	; 0x78
 80050b6:	941f      	str	r4, [sp, #124]	; 0x7c
 80050b8:	9420      	str	r4, [sp, #128]	; 0x80
 80050ba:	9421      	str	r4, [sp, #132]	; 0x84
  GUI_PORT_API PortAPI = {0};
 80050bc:	2268      	movs	r2, #104	; 0x68
 80050be:	4621      	mov	r1, r4
 80050c0:	a803      	add	r0, sp, #12
 80050c2:	f00a f930 	bl	800f326 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 80050c6:	4623      	mov	r3, r4
 80050c8:	4622      	mov	r2, r4
 80050ca:	491d      	ldr	r1, [pc, #116]	; (8005140 <LCD_X_Config+0x94>)
 80050cc:	481d      	ldr	r0, [pc, #116]	; (8005144 <LCD_X_Config+0x98>)
 80050ce:	f002 fc3f 	bl	8007950 <GUI_DEVICE_CreateAndLink>
 80050d2:	4605      	mov	r5, r0
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 80050d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80050d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80050dc:	4620      	mov	r0, r4
 80050de:	f001 fdc1 	bl	8006c64 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 80050e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80050e6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80050ea:	4620      	mov	r0, r4
 80050ec:	f001 fda2 	bl	8006c34 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = 0;
 80050f0:	941f      	str	r4, [sp, #124]	; 0x7c
  GUIDRV_FlexColor_Config(pDevice, &Config);
 80050f2:	a91d      	add	r1, sp, #116	; 0x74
 80050f4:	4628      	mov	r0, r5
 80050f6:	f001 fd66 	bl	8006bc6 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <LCD_X_Config+0x9c>)
 80050fc:	930b      	str	r3, [sp, #44]	; 0x2c
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <LCD_X_Config+0xa0>)
 8005100:	930c      	str	r3, [sp, #48]	; 0x30
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <LCD_X_Config+0xa4>)
 8005104:	930e      	str	r3, [sp, #56]	; 0x38
 // PortAPI.pfReadM16_A1  = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <LCD_X_Config+0xa8>)
 8005108:	4a13      	ldr	r2, [pc, #76]	; (8005158 <LCD_X_Config+0xac>)
 800510a:	a903      	add	r1, sp, #12
 800510c:	4628      	mov	r0, r5
 800510e:	f001 fd78 	bl	8006c02 <GUIDRV_FlexColor_SetFunc>

  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 800, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 8005112:	f44f 6375 	mov.w	r3, #3920	; 0xf50
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	236e      	movs	r3, #110	; 0x6e
 800511a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800511e:	4621      	mov	r1, r4
 8005120:	4620      	mov	r0, r4
 8005122:	f001 fe6b 	bl	8006dfc <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 480, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 8005126:	f640 7385 	movw	r3, #3973	; 0xf85
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005130:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005134:	4621      	mov	r1, r4
 8005136:	2001      	movs	r0, #1
 8005138:	f001 fe60 	bl	8006dfc <GUI_TOUCH_Calibrate>

}
 800513c:	b023      	add	sp, #140	; 0x8c
 800513e:	bd30      	pop	{r4, r5, pc}
 8005140:	08012154 	.word	0x08012154
 8005144:	08012118 	.word	0x08012118
 8005148:	08000f2d 	.word	0x08000f2d
 800514c:	08000f85 	.word	0x08000f85
 8005150:	08000fdd 	.word	0x08000fdd
 8005154:	080065cd 	.word	0x080065cd
 8005158:	08005f31 	.word	0x08005f31

0800515c <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 800515c:	2901      	cmp	r1, #1
 800515e:	d106      	bne.n	800516e <LCD_X_DisplayDriver+0x12>
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8005160:	b508      	push	{r3, lr}
    // display controller and put it into operation. If the display
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...
	  SSD1963_Init();
 8005162:	f7fb ff47 	bl	8000ff4 <SSD1963_Init>
	  STMPE610_Init();
 8005166:	f7fc f86b 	bl	8001240 <STMPE610_Init>
    return 0;
 800516a:	2000      	movs	r0, #0
  }
  default:
    r = -1;
  }
  return r;
}
 800516c:	bd08      	pop	{r3, pc}
  return r;
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005172:	4770      	bx	lr

08005174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005176:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005178:	2400      	movs	r4, #0
 800517a:	9405      	str	r4, [sp, #20]
 800517c:	9406      	str	r4, [sp, #24]
 800517e:	9407      	str	r4, [sp, #28]
 8005180:	9408      	str	r4, [sp, #32]
 8005182:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005184:	4b28      	ldr	r3, [pc, #160]	; (8005228 <MX_GPIO_Init+0xb4>)
 8005186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005188:	f042 0220 	orr.w	r2, r2, #32
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
 800518e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005190:	f002 0220 	and.w	r2, r2, #32
 8005194:	9200      	str	r2, [sp, #0]
 8005196:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
 80051a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80051a6:	9201      	str	r2, [sp, #4]
 80051a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
 80051b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b4:	f002 0201 	and.w	r2, r2, #1
 80051b8:	9202      	str	r2, [sp, #8]
 80051ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80051ca:	9203      	str	r2, [sp, #12]
 80051cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d0:	f042 0202 	orr.w	r2, r2, #2
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	9304      	str	r3, [sp, #16]
 80051de:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 80051e0:	4f12      	ldr	r7, [pc, #72]	; (800522c <MX_GPIO_Init+0xb8>)
 80051e2:	4622      	mov	r2, r4
 80051e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051e8:	4638      	mov	r0, r7
 80051ea:	f7fc fad3 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80051ee:	4d10      	ldr	r5, [pc, #64]	; (8005230 <MX_GPIO_Init+0xbc>)
 80051f0:	4622      	mov	r2, r4
 80051f2:	2118      	movs	r1, #24
 80051f4:	4628      	mov	r0, r5
 80051f6:	f7fc facd 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	2601      	movs	r6, #1
 8005202:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005206:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005208:	a905      	add	r1, sp, #20
 800520a:	4638      	mov	r0, r7
 800520c:	f7fc f9ce 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005210:	2318      	movs	r3, #24
 8005212:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005214:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005218:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521a:	a905      	add	r1, sp, #20
 800521c:	4628      	mov	r0, r5
 800521e:	f7fc f9c5 	bl	80015ac <HAL_GPIO_Init>

}
 8005222:	b00b      	add	sp, #44	; 0x2c
 8005224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	40021800 	.word	0x40021800
 8005230:	40020400 	.word	0x40020400

08005234 <MX_I2C1_Init>:
{
 8005234:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8005236:	4c0d      	ldr	r4, [pc, #52]	; (800526c <MX_I2C1_Init+0x38>)
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <MX_I2C1_Init+0x3c>)
 800523a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <MX_I2C1_Init+0x40>)
 800523e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005240:	2500      	movs	r5, #0
 8005242:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005244:	2301      	movs	r3, #1
 8005246:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005248:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800524a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800524c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800524e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005250:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005252:	4620      	mov	r0, r4
 8005254:	f7fc fc3a 	bl	8001acc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005258:	4629      	mov	r1, r5
 800525a:	4620      	mov	r0, r4
 800525c:	f7fc fe10 	bl	8001e80 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005260:	4629      	mov	r1, r5
 8005262:	4620      	mov	r0, r4
 8005264:	f7fc fe3a 	bl	8001edc <HAL_I2CEx_ConfigDigitalFilter>
}
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop
 800526c:	20019578 	.word	0x20019578
 8005270:	40005400 	.word	0x40005400
 8005274:	20303e5d 	.word	0x20303e5d

08005278 <MX_I2C2_Init>:
{
 8005278:	b538      	push	{r3, r4, r5, lr}
  hi2c2.Instance = I2C2;
 800527a:	4c0d      	ldr	r4, [pc, #52]	; (80052b0 <MX_I2C2_Init+0x38>)
 800527c:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <MX_I2C2_Init+0x3c>)
 800527e:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <MX_I2C2_Init+0x40>)
 8005282:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005284:	2500      	movs	r5, #0
 8005286:	60a5      	str	r5, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005288:	2301      	movs	r3, #1
 800528a:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800528c:	6125      	str	r5, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800528e:	6165      	str	r5, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005290:	61a5      	str	r5, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005292:	61e5      	str	r5, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005294:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005296:	4620      	mov	r0, r4
 8005298:	f7fc fc18 	bl	8001acc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800529c:	4629      	mov	r1, r5
 800529e:	4620      	mov	r0, r4
 80052a0:	f7fc fdee 	bl	8001e80 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80052a4:	4629      	mov	r1, r5
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7fc fe18 	bl	8001edc <HAL_I2CEx_ConfigDigitalFilter>
}
 80052ac:	bd38      	pop	{r3, r4, r5, pc}
 80052ae:	bf00      	nop
 80052b0:	200195c4 	.word	0x200195c4
 80052b4:	40005800 	.word	0x40005800
 80052b8:	20303e5d 	.word	0x20303e5d

080052bc <HAL_SYSTICK_Callback>:
	OS_TimeMS++;
 80052bc:	4a02      	ldr	r2, [pc, #8]	; (80052c8 <HAL_SYSTICK_Callback+0xc>)
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	6013      	str	r3, [r2, #0]
}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20019574 	.word	0x20019574

080052cc <SystemClock_Config>:
{
 80052cc:	b530      	push	{r4, r5, lr}
 80052ce:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052d0:	2230      	movs	r2, #48	; 0x30
 80052d2:	2100      	movs	r1, #0
 80052d4:	a828      	add	r0, sp, #160	; 0xa0
 80052d6:	f00a f826 	bl	800f326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052da:	2400      	movs	r4, #0
 80052dc:	9423      	str	r4, [sp, #140]	; 0x8c
 80052de:	9424      	str	r4, [sp, #144]	; 0x90
 80052e0:	9425      	str	r4, [sp, #148]	; 0x94
 80052e2:	9426      	str	r4, [sp, #152]	; 0x98
 80052e4:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052e6:	2284      	movs	r2, #132	; 0x84
 80052e8:	4621      	mov	r1, r4
 80052ea:	a802      	add	r0, sp, #8
 80052ec:	f00a f81b 	bl	800f326 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b21      	ldr	r3, [pc, #132]	; (8005378 <SystemClock_Config+0xac>)
 80052f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005304:	4b1d      	ldr	r3, [pc, #116]	; (800537c <SystemClock_Config+0xb0>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005318:	2301      	movs	r3, #1
 800531a:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800531c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005320:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005322:	2502      	movs	r5, #2
 8005324:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800532a:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800532c:	2319      	movs	r3, #25
 800532e:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 384;
 8005330:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005334:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005336:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005338:	2308      	movs	r3, #8
 800533a:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800533c:	a828      	add	r0, sp, #160	; 0xa0
 800533e:	f7fd fc07 	bl	8002b50 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005342:	f7fd fbc7 	bl	8002ad4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005346:	230f      	movs	r3, #15
 8005348:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800534a:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800534c:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800534e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005352:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005358:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800535a:	2106      	movs	r1, #6
 800535c:	a823      	add	r0, sp, #140	; 0x8c
 800535e:	f7fd fe65 	bl	800302c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8005362:	f44f 1303 	mov.w	r3, #2146304	; 0x20c000
 8005366:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005368:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800536a:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800536c:	9421      	str	r4, [sp, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800536e:	a802      	add	r0, sp, #8
 8005370:	f7fd ff16 	bl	80031a0 <HAL_RCCEx_PeriphCLKConfig>
}
 8005374:	b035      	add	sp, #212	; 0xd4
 8005376:	bd30      	pop	{r4, r5, pc}
 8005378:	40023800 	.word	0x40023800
 800537c:	40007000 	.word	0x40007000

08005380 <main>:
{
 8005380:	b500      	push	{lr}
 8005382:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8005384:	f7fc f874 	bl	8001470 <HAL_Init>
  SystemClock_Config();
 8005388:	f7ff ffa0 	bl	80052cc <SystemClock_Config>
  MX_GPIO_Init();
 800538c:	f7ff fef2 	bl	8005174 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005390:	f7ff ff50 	bl	8005234 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005394:	f7ff ff70 	bl	8005278 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8005398:	f000 f920 	bl	80055dc <MX_USB_DEVICE_Init>
  Init_LCD_GPIO();
 800539c:	f7fb fd4e 	bl	8000e3c <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 80053a0:	4e2b      	ldr	r6, [pc, #172]	; (8005450 <main+0xd0>)
 80053a2:	466c      	mov	r4, sp
 80053a4:	f106 0510 	add.w	r5, r6, #16
 80053a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80053c0:	f7fb fec4 	bl	800114c <Init_TOUCH_GPIO>
  STMPE610_Init();
 80053c4:	f7fb ff3c 	bl	8001240 <STMPE610_Init>
  GUI_Init();
 80053c8:	f002 fb9e 	bl	8007b08 <GUI_Init>
  GUI_SetBkColor(GUI_BLUE);
 80053cc:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80053d0:	f002 f8d6 	bl	8007580 <GUI_SetBkColor>
  GUI_Clear();
 80053d4:	f002 fb5e 	bl	8007a94 <GUI_Clear>
  GUI_SetBkColor(GUI_BLACK);
 80053d8:	2000      	movs	r0, #0
 80053da:	f002 f8d1 	bl	8007580 <GUI_SetBkColor>
  GUI_SetFont(&GUI_Font32_1);
 80053de:	481d      	ldr	r0, [pc, #116]	; (8005454 <main+0xd4>)
 80053e0:	f002 f8c4 	bl	800756c <GUI_SetFont>
  GUI_DispString("HELLO DM");
 80053e4:	481c      	ldr	r0, [pc, #112]	; (8005458 <main+0xd8>)
 80053e6:	f002 f9a7 	bl	8007738 <GUI_DispString>
  char msg[100u] = { 0u };
 80053ea:	2264      	movs	r2, #100	; 0x64
 80053ec:	2100      	movs	r1, #0
 80053ee:	a811      	add	r0, sp, #68	; 0x44
 80053f0:	f009 ff99 	bl	800f326 <memset>
	  STMPE610_read_xyz();
 80053f4:	f7fb ff6c 	bl	80012d0 <STMPE610_read_xyz>
	  	  GUI_TOUCH_Exec();
 80053f8:	f001 fd5e 	bl	8006eb8 <GUI_TOUCH_Exec>
	  	  keypressed = GUI_GetKey();
 80053fc:	f002 f94c 	bl	8007698 <GUI_GetKey>
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <main+0xdc>)
 8005402:	8018      	strh	r0, [r3, #0]
		  GUI_Delay(1);
 8005404:	2001      	movs	r0, #1
 8005406:	f001 fce5 	bl	8006dd4 <GUI_Delay>
		  X_koordinata = STMPE610_GetX_TOUCH();
 800540a:	f7fb ffa1 	bl	8001350 <STMPE610_GetX_TOUCH>
 800540e:	4c14      	ldr	r4, [pc, #80]	; (8005460 <main+0xe0>)
 8005410:	8020      	strh	r0, [r4, #0]
		  Y_koordinata = STMPE610_GetY_TOUCH();
 8005412:	f7fb ffcd 	bl	80013b0 <STMPE610_GetY_TOUCH>
 8005416:	4603      	mov	r3, r0
 8005418:	4a12      	ldr	r2, [pc, #72]	; (8005464 <main+0xe4>)
 800541a:	8010      	strh	r0, [r2, #0]
		  sprintf(msg, "X: %d, Y: %d", X_koordinata, Y_koordinata);
 800541c:	8822      	ldrh	r2, [r4, #0]
 800541e:	4912      	ldr	r1, [pc, #72]	; (8005468 <main+0xe8>)
 8005420:	a811      	add	r0, sp, #68	; 0x44
 8005422:	f00a f841 	bl	800f4a8 <siprintf>
		  GUI_DispString(msg);
 8005426:	a811      	add	r0, sp, #68	; 0x44
 8005428:	f002 f986 	bl	8007738 <GUI_DispString>
		  	  if(X_koordinata > 0 && X_koordinata < 80 && Y_koordinata > 0 && Y_koordinata < 80){
 800542c:	8823      	ldrh	r3, [r4, #0]
 800542e:	3b01      	subs	r3, #1
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b4e      	cmp	r3, #78	; 0x4e
 8005434:	d8de      	bhi.n	80053f4 <main+0x74>
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <main+0xe4>)
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0da      	beq.n	80053f4 <main+0x74>
 800543e:	2b4f      	cmp	r3, #79	; 0x4f
 8005440:	d8d8      	bhi.n	80053f4 <main+0x74>
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8005442:	2201      	movs	r2, #1
 8005444:	2118      	movs	r1, #24
 8005446:	4809      	ldr	r0, [pc, #36]	; (800546c <main+0xec>)
 8005448:	f7fc f9a4 	bl	8001794 <HAL_GPIO_WritePin>
 800544c:	e7d2      	b.n	80053f4 <main+0x74>
 800544e:	bf00      	nop
 8005450:	20019578 	.word	0x20019578
 8005454:	08011a14 	.word	0x08011a14
 8005458:	0800fb5c 	.word	0x0800fb5c
 800545c:	2001925c 	.word	0x2001925c
 8005460:	20019258 	.word	0x20019258
 8005464:	2001925a 	.word	0x2001925a
 8005468:	0800fb68 	.word	0x0800fb68
 800546c:	40020400 	.word	0x40020400

08005470 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005470:	4770      	bx	lr
	...

08005474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005474:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_MspInit+0x2c>)
 8005478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800547a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
 8005480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005482:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005486:	9200      	str	r2, [sp, #0]
 8005488:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800548a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800549c:	b002      	add	sp, #8
 800549e:	4770      	bx	lr
 80054a0:	40023800 	.word	0x40023800

080054a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054a4:	b510      	push	{r4, lr}
 80054a6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a8:	2300      	movs	r3, #0
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	9306      	str	r3, [sp, #24]
 80054ae:	9307      	str	r3, [sp, #28]
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 80054b4:	6803      	ldr	r3, [r0, #0]
 80054b6:	4a25      	ldr	r2, [pc, #148]	; (800554c <HAL_I2C_MspInit+0xa8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80054bc:	4a24      	ldr	r2, [pc, #144]	; (8005550 <HAL_I2C_MspInit+0xac>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d023      	beq.n	800550a <HAL_I2C_MspInit+0x66>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80054c2:	b00a      	add	sp, #40	; 0x28
 80054c4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054c6:	4c23      	ldr	r4, [pc, #140]	; (8005554 <HAL_I2C_MspInit+0xb0>)
 80054c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054ca:	f043 0302 	orr.w	r3, r3, #2
 80054ce:	6323      	str	r3, [r4, #48]	; 0x30
 80054d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054da:	23c0      	movs	r3, #192	; 0xc0
 80054dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054de:	2312      	movs	r3, #18
 80054e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054e2:	2301      	movs	r3, #1
 80054e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e6:	2303      	movs	r3, #3
 80054e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054ea:	2304      	movs	r3, #4
 80054ec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ee:	a905      	add	r1, sp, #20
 80054f0:	4819      	ldr	r0, [pc, #100]	; (8005558 <HAL_I2C_MspInit+0xb4>)
 80054f2:	f7fc f85b 	bl	80015ac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054fc:	6423      	str	r3, [r4, #64]	; 0x40
 80054fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005504:	9302      	str	r3, [sp, #8]
 8005506:	9b02      	ldr	r3, [sp, #8]
 8005508:	e7db      	b.n	80054c2 <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800550a:	4c12      	ldr	r4, [pc, #72]	; (8005554 <HAL_I2C_MspInit+0xb0>)
 800550c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800550e:	f043 0320 	orr.w	r3, r3, #32
 8005512:	6323      	str	r3, [r4, #48]	; 0x30
 8005514:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	9303      	str	r3, [sp, #12]
 800551c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800551e:	2303      	movs	r3, #3
 8005520:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005522:	2212      	movs	r2, #18
 8005524:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005526:	2201      	movs	r2, #1
 8005528:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800552c:	2304      	movs	r3, #4
 800552e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005530:	a905      	add	r1, sp, #20
 8005532:	480a      	ldr	r0, [pc, #40]	; (800555c <HAL_I2C_MspInit+0xb8>)
 8005534:	f7fc f83a 	bl	80015ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800553a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800553e:	6423      	str	r3, [r4, #64]	; 0x40
 8005540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	9b04      	ldr	r3, [sp, #16]
}
 800554a:	e7ba      	b.n	80054c2 <HAL_I2C_MspInit+0x1e>
 800554c:	40005400 	.word	0x40005400
 8005550:	40005800 	.word	0x40005800
 8005554:	40023800 	.word	0x40023800
 8005558:	40020400 	.word	0x40020400
 800555c:	40021400 	.word	0x40021400

08005560 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005560:	4770      	bx	lr

08005562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005562:	e7fe      	b.n	8005562 <HardFault_Handler>

08005564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005564:	e7fe      	b.n	8005564 <MemManage_Handler>

08005566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005566:	e7fe      	b.n	8005566 <BusFault_Handler>

08005568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005568:	e7fe      	b.n	8005568 <UsageFault_Handler>

0800556a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800556a:	4770      	bx	lr

0800556c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800556c:	4770      	bx	lr

0800556e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800556e:	4770      	bx	lr

08005570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005572:	f7fb ff89 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8005576:	f7fc f815 	bl	80015a4 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 800557a:	bd08      	pop	{r3, pc}

0800557c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800557c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <OTG_FS_IRQHandler+0xc>)
 8005580:	f7fc fe98 	bl	80022b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005584:	bd08      	pop	{r3, pc}
 8005586:	bf00      	nop
 8005588:	2001a8e0 	.word	0x2001a8e0

0800558c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800558c:	b508      	push	{r3, lr}
 800558e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005590:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <_sbrk+0x34>)
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	b142      	cbz	r2, 80055a8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <_sbrk+0x34>)
 8005598:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800559a:	4403      	add	r3, r0
 800559c:	466a      	mov	r2, sp
 800559e:	4293      	cmp	r3, r2
 80055a0:	d806      	bhi.n	80055b0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <_sbrk+0x34>)
 80055a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80055a6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80055a8:	4a05      	ldr	r2, [pc, #20]	; (80055c0 <_sbrk+0x34>)
 80055aa:	4906      	ldr	r1, [pc, #24]	; (80055c4 <_sbrk+0x38>)
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	e7f2      	b.n	8005596 <_sbrk+0xa>
		errno = ENOMEM;
 80055b0:	f009 fe4c 	bl	800f24c <__errno>
 80055b4:	230c      	movs	r3, #12
 80055b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	e7f3      	b.n	80055a6 <_sbrk+0x1a>
 80055be:	bf00      	nop
 80055c0:	20019260 	.word	0x20019260
 80055c4:	2001b070 	.word	0x2001b070

080055c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055c8:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <SystemInit+0x10>)
 80055ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055d6:	4770      	bx	lr
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80055de:	2200      	movs	r2, #0
 80055e0:	490f      	ldr	r1, [pc, #60]	; (8005620 <MX_USB_DEVICE_Init+0x44>)
 80055e2:	4810      	ldr	r0, [pc, #64]	; (8005624 <MX_USB_DEVICE_Init+0x48>)
 80055e4:	f7ff f80b 	bl	80045fe <USBD_Init>
 80055e8:	b970      	cbnz	r0, 8005608 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80055ea:	490f      	ldr	r1, [pc, #60]	; (8005628 <MX_USB_DEVICE_Init+0x4c>)
 80055ec:	480d      	ldr	r0, [pc, #52]	; (8005624 <MX_USB_DEVICE_Init+0x48>)
 80055ee:	f7ff f822 	bl	8004636 <USBD_RegisterClass>
 80055f2:	b960      	cbnz	r0, 800560e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80055f4:	490d      	ldr	r1, [pc, #52]	; (800562c <MX_USB_DEVICE_Init+0x50>)
 80055f6:	480b      	ldr	r0, [pc, #44]	; (8005624 <MX_USB_DEVICE_Init+0x48>)
 80055f8:	f7fe ffd3 	bl	80045a2 <USBD_CDC_RegisterInterface>
 80055fc:	b950      	cbnz	r0, 8005614 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055fe:	4809      	ldr	r0, [pc, #36]	; (8005624 <MX_USB_DEVICE_Init+0x48>)
 8005600:	f7ff f82d 	bl	800465e <USBD_Start>
 8005604:	b948      	cbnz	r0, 800561a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005606:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005608:	f7ff ff32 	bl	8005470 <Error_Handler>
 800560c:	e7ed      	b.n	80055ea <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800560e:	f7ff ff2f 	bl	8005470 <Error_Handler>
 8005612:	e7ef      	b.n	80055f4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005614:	f7ff ff2c 	bl	8005470 <Error_Handler>
 8005618:	e7f1      	b.n	80055fe <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800561a:	f7ff ff29 	bl	8005470 <Error_Handler>
}
 800561e:	e7f2      	b.n	8005606 <MX_USB_DEVICE_Init+0x2a>
 8005620:	20000130 	.word	0x20000130
 8005624:	20019610 	.word	0x20019610
 8005628:	20000008 	.word	0x20000008
 800562c:	2000011c 	.word	0x2000011c

08005630 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005630:	2000      	movs	r0, #0
 8005632:	4770      	bx	lr

08005634 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005634:	2000      	movs	r0, #0
 8005636:	4770      	bx	lr

08005638 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8005638:	2000      	movs	r0, #0
 800563a:	4770      	bx	lr

0800563c <CDC_Receive_FS>:
{
 800563c:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800563e:	4c05      	ldr	r4, [pc, #20]	; (8005654 <CDC_Receive_FS+0x18>)
 8005640:	4601      	mov	r1, r0
 8005642:	4620      	mov	r0, r4
 8005644:	f7fe ffbc 	bl	80045c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005648:	4620      	mov	r0, r4
 800564a:	f7fe ffbf 	bl	80045cc <USBD_CDC_ReceivePacket>
}
 800564e:	2000      	movs	r0, #0
 8005650:	bd10      	pop	{r4, pc}
 8005652:	bf00      	nop
 8005654:	20019610 	.word	0x20019610

08005658 <CDC_Init_FS>:
{
 8005658:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800565a:	4c06      	ldr	r4, [pc, #24]	; (8005674 <CDC_Init_FS+0x1c>)
 800565c:	2200      	movs	r2, #0
 800565e:	4906      	ldr	r1, [pc, #24]	; (8005678 <CDC_Init_FS+0x20>)
 8005660:	4620      	mov	r0, r4
 8005662:	f7fe ffa5 	bl	80045b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005666:	4905      	ldr	r1, [pc, #20]	; (800567c <CDC_Init_FS+0x24>)
 8005668:	4620      	mov	r0, r4
 800566a:	f7fe ffa9 	bl	80045c0 <USBD_CDC_SetRxBuffer>
}
 800566e:	2000      	movs	r0, #0
 8005670:	bd10      	pop	{r4, pc}
 8005672:	bf00      	nop
 8005674:	20019610 	.word	0x20019610
 8005678:	2001a0e0 	.word	0x2001a0e0
 800567c:	200198e0 	.word	0x200198e0

08005680 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8005680:	b508      	push	{r3, lr}
  SystemClock_Config();
 8005682:	f7ff fe23 	bl	80052cc <SystemClock_Config>
}
 8005686:	bd08      	pop	{r3, pc}

08005688 <HAL_PCD_MspInit>:
{
 8005688:	b510      	push	{r4, lr}
 800568a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	2300      	movs	r3, #0
 800568e:	9303      	str	r3, [sp, #12]
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	9306      	str	r3, [sp, #24]
 8005696:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005698:	6803      	ldr	r3, [r0, #0]
 800569a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800569e:	d001      	beq.n	80056a4 <HAL_PCD_MspInit+0x1c>
}
 80056a0:	b008      	add	sp, #32
 80056a2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a4:	4c18      	ldr	r4, [pc, #96]	; (8005708 <HAL_PCD_MspInit+0x80>)
 80056a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6323      	str	r3, [r4, #48]	; 0x30
 80056ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80056b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80056bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056be:	2302      	movs	r3, #2
 80056c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c2:	2303      	movs	r3, #3
 80056c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80056c6:	230a      	movs	r3, #10
 80056c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ca:	a903      	add	r1, sp, #12
 80056cc:	480f      	ldr	r0, [pc, #60]	; (800570c <HAL_PCD_MspInit+0x84>)
 80056ce:	f7fb ff6d 	bl	80015ac <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80056d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	6363      	str	r3, [r4, #52]	; 0x34
 80056da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ea:	6463      	str	r3, [r4, #68]	; 0x44
 80056ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80056f6:	2200      	movs	r2, #0
 80056f8:	4611      	mov	r1, r2
 80056fa:	2043      	movs	r0, #67	; 0x43
 80056fc:	f7fb fefc 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005700:	2043      	movs	r0, #67	; 0x43
 8005702:	f7fb ff2b 	bl	800155c <HAL_NVIC_EnableIRQ>
}
 8005706:	e7cb      	b.n	80056a0 <HAL_PCD_MspInit+0x18>
 8005708:	40023800 	.word	0x40023800
 800570c:	40020000 	.word	0x40020000

08005710 <HAL_PCD_SetupStageCallback>:
{
 8005710:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005712:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8005716:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800571a:	f7fe ffb5 	bl	8004688 <USBD_LL_SetupStage>
}
 800571e:	bd08      	pop	{r3, pc}

08005720 <HAL_PCD_DataOutStageCallback>:
{
 8005720:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005722:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8005726:	0093      	lsls	r3, r2, #2
 8005728:	4403      	add	r3, r0
 800572a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800572e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8005732:	f7fe ffd5 	bl	80046e0 <USBD_LL_DataOutStage>
}
 8005736:	bd08      	pop	{r3, pc}

08005738 <HAL_PCD_DataInStageCallback>:
{
 8005738:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800573a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800573e:	0093      	lsls	r3, r2, #2
 8005740:	4403      	add	r3, r0
 8005742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005744:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8005748:	f7ff f803 	bl	8004752 <USBD_LL_DataInStage>
}
 800574c:	bd08      	pop	{r3, pc}

0800574e <HAL_PCD_SOFCallback>:
{
 800574e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005750:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8005754:	f7ff f898 	bl	8004888 <USBD_LL_SOF>
}
 8005758:	bd08      	pop	{r3, pc}

0800575a <HAL_PCD_ResetCallback>:
{ 
 800575a:	b510      	push	{r4, lr}
 800575c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800575e:	68c3      	ldr	r3, [r0, #12]
 8005760:	b12b      	cbz	r3, 800576e <HAL_PCD_ResetCallback+0x14>
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005762:	2b02      	cmp	r3, #2
 8005764:	d00d      	beq.n	8005782 <HAL_PCD_ResetCallback+0x28>
    Error_Handler();
 8005766:	f7ff fe83 	bl	8005470 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800576a:	2101      	movs	r1, #1
 800576c:	e000      	b.n	8005770 <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 800576e:	2100      	movs	r1, #0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005770:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8005774:	f7ff f871 	bl	800485a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005778:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 800577c:	f7ff f844 	bl	8004808 <USBD_LL_Reset>
}
 8005780:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 8005782:	2101      	movs	r1, #1
 8005784:	e7f4      	b.n	8005770 <HAL_PCD_ResetCallback+0x16>
	...

08005788 <HAL_PCD_SuspendCallback>:
{
 8005788:	b510      	push	{r4, lr}
 800578a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800578c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8005790:	f7ff f866 	bl	8004860 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (hpcd->Init.low_power_enable)
 80057a2:	6a23      	ldr	r3, [r4, #32]
 80057a4:	b123      	cbz	r3, 80057b0 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80057a6:	4a03      	ldr	r2, [pc, #12]	; (80057b4 <HAL_PCD_SuspendCallback+0x2c>)
 80057a8:	6913      	ldr	r3, [r2, #16]
 80057aa:	f043 0306 	orr.w	r3, r3, #6
 80057ae:	6113      	str	r3, [r2, #16]
}
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	bf00      	nop
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <HAL_PCD_ResumeCallback>:
{
 80057b8:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80057ba:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80057be:	f7ff f858 	bl	8004872 <USBD_LL_Resume>
}
 80057c2:	bd08      	pop	{r3, pc}

080057c4 <HAL_PCD_ISOOUTIncompleteCallback>:
{
 80057c4:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80057c6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80057ca:	f7ff f86d 	bl	80048a8 <USBD_LL_IsoOUTIncomplete>
}
 80057ce:	bd08      	pop	{r3, pc}

080057d0 <HAL_PCD_ISOINIncompleteCallback>:
{
 80057d0:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80057d2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80057d6:	f7ff f865 	bl	80048a4 <USBD_LL_IsoINIncomplete>
}
 80057da:	bd08      	pop	{r3, pc}

080057dc <HAL_PCD_ConnectCallback>:
{
 80057dc:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80057de:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80057e2:	f7ff f863 	bl	80048ac <USBD_LL_DevConnected>
}
 80057e6:	bd08      	pop	{r3, pc}

080057e8 <HAL_PCD_DisconnectCallback>:
{
 80057e8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80057ea:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80057ee:	f7ff f85f 	bl	80048b0 <USBD_LL_DevDisconnected>
}
 80057f2:	bd08      	pop	{r3, pc}

080057f4 <USBD_LL_Init>:
  if (pdev->id == DEVICE_FS) {
 80057f4:	7803      	ldrb	r3, [r0, #0]
 80057f6:	b10b      	cbz	r3, 80057fc <USBD_LL_Init+0x8>
}
 80057f8:	2000      	movs	r0, #0
 80057fa:	4770      	bx	lr
{
 80057fc:	b510      	push	{r4, lr}
 80057fe:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8005800:	4815      	ldr	r0, [pc, #84]	; (8005858 <USBD_LL_Init+0x64>)
 8005802:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8005806:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800580a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800580e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005810:	2306      	movs	r3, #6
 8005812:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005814:	2202      	movs	r2, #2
 8005816:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800581c:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800581e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005820:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005822:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005824:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005826:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005828:	f7fc fbee 	bl	8002008 <HAL_PCD_Init>
 800582c:	b980      	cbnz	r0, 8005850 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800582e:	4c0a      	ldr	r4, [pc, #40]	; (8005858 <USBD_LL_Init+0x64>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	4620      	mov	r0, r4
 8005834:	f7fd f935 	bl	8002aa2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	2100      	movs	r1, #0
 800583c:	4620      	mov	r0, r4
 800583e:	f7fd f90c 	bl	8002a5a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	2101      	movs	r1, #1
 8005846:	4620      	mov	r0, r4
 8005848:	f7fd f907 	bl	8002a5a <HAL_PCDEx_SetTxFiFo>
}
 800584c:	2000      	movs	r0, #0
 800584e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005850:	f7ff fe0e 	bl	8005470 <Error_Handler>
 8005854:	e7eb      	b.n	800582e <USBD_LL_Init+0x3a>
 8005856:	bf00      	nop
 8005858:	2001a8e0 	.word	0x2001a8e0

0800585c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800585c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8005860:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005864:	d108      	bne.n	8005878 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005866:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800586a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800586e:	008a      	lsls	r2, r1, #2
 8005870:	4413      	add	r3, r2
 8005872:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
}
 8005876:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005878:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800587c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005880:	008a      	lsls	r2, r1, #2
 8005882:	4413      	add	r3, r2
 8005884:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8005888:	4770      	bx	lr

0800588a <USBD_LL_GetRxDataSize>:
{
 800588a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800588c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005890:	f7fd f838 	bl	8002904 <HAL_PCD_EP_GetRxCount>
}
 8005894:	bd08      	pop	{r3, pc}
	...

08005898 <HAL_PCDEx_LPM_Callback>:
{
 8005898:	b510      	push	{r4, lr}
 800589a:	4604      	mov	r4, r0
  switch (msg)
 800589c:	b111      	cbz	r1, 80058a4 <HAL_PCDEx_LPM_Callback+0xc>
 800589e:	2901      	cmp	r1, #1
 80058a0:	d016      	beq.n	80058d0 <HAL_PCDEx_LPM_Callback+0x38>
}
 80058a2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80058a4:	6a03      	ldr	r3, [r0, #32]
 80058a6:	b95b      	cbnz	r3, 80058c0 <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80058b6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 80058ba:	f7fe ffda 	bl	8004872 <USBD_LL_Resume>
    break;
 80058be:	e7f0      	b.n	80058a2 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 80058c0:	f7ff fede 	bl	8005680 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <HAL_PCDEx_LPM_Callback+0x60>)
 80058c6:	6913      	ldr	r3, [r2, #16]
 80058c8:	f023 0306 	bic.w	r3, r3, #6
 80058cc:	6113      	str	r3, [r2, #16]
 80058ce:	e7eb      	b.n	80058a8 <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80058d0:	6802      	ldr	r2, [r0, #0]
 80058d2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80058de:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80058e2:	f7fe ffbd 	bl	8004860 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80058e6:	6a23      	ldr	r3, [r4, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0da      	beq.n	80058a2 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058ec:	4a02      	ldr	r2, [pc, #8]	; (80058f8 <HAL_PCDEx_LPM_Callback+0x60>)
 80058ee:	6913      	ldr	r3, [r2, #16]
 80058f0:	f043 0306 	orr.w	r3, r3, #6
 80058f4:	6113      	str	r3, [r2, #16]
}
 80058f6:	e7d4      	b.n	80058a2 <HAL_PCDEx_LPM_Callback+0xa>
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80058fc:	b118      	cbz	r0, 8005906 <USBD_Get_USB_Status+0xa>
 80058fe:	2802      	cmp	r0, #2
 8005900:	d003      	beq.n	800590a <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005902:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005904:	4770      	bx	lr
      usb_status = USBD_OK;
 8005906:	2000      	movs	r0, #0
 8005908:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800590a:	2001      	movs	r0, #1
    break;
 800590c:	4770      	bx	lr

0800590e <USBD_LL_Start>:
{
 800590e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005910:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005914:	f7fc fc10 	bl	8002138 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005918:	f7ff fff0 	bl	80058fc <USBD_Get_USB_Status>
}
 800591c:	bd08      	pop	{r3, pc}

0800591e <USBD_LL_OpenEP>:
{
 800591e:	b510      	push	{r4, lr}
 8005920:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005922:	4613      	mov	r3, r2
 8005924:	4622      	mov	r2, r4
 8005926:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800592a:	f7fc ff45 	bl	80027b8 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800592e:	f7ff ffe5 	bl	80058fc <USBD_Get_USB_Status>
}
 8005932:	bd10      	pop	{r4, pc}

08005934 <USBD_LL_CloseEP>:
{
 8005934:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005936:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800593a:	f7fc ff7e 	bl	800283a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800593e:	f7ff ffdd 	bl	80058fc <USBD_Get_USB_Status>
}
 8005942:	bd08      	pop	{r3, pc}

08005944 <USBD_LL_StallEP>:
{
 8005944:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005946:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800594a:	f7fd f80e 	bl	800296a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800594e:	f7ff ffd5 	bl	80058fc <USBD_Get_USB_Status>
}
 8005952:	bd08      	pop	{r3, pc}

08005954 <USBD_LL_ClearStallEP>:
{
 8005954:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005956:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800595a:	f7fd f847 	bl	80029ec <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800595e:	f7ff ffcd 	bl	80058fc <USBD_Get_USB_Status>
}
 8005962:	bd08      	pop	{r3, pc}

08005964 <USBD_LL_SetUSBAddress>:
{
 8005964:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005966:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800596a:	f7fc ff11 	bl	8002790 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800596e:	f7ff ffc5 	bl	80058fc <USBD_Get_USB_Status>
}
 8005972:	bd08      	pop	{r3, pc}

08005974 <USBD_LL_Transmit>:
{
 8005974:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005976:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800597a:	f7fc ffcc 	bl	8002916 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800597e:	f7ff ffbd 	bl	80058fc <USBD_Get_USB_Status>
}
 8005982:	bd08      	pop	{r3, pc}

08005984 <USBD_LL_PrepareReceive>:
{
 8005984:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005986:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800598a:	f7fc ff8d 	bl	80028a8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800598e:	f7ff ffb5 	bl	80058fc <USBD_Get_USB_Status>
}
 8005992:	bd08      	pop	{r3, pc}

08005994 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005994:	2312      	movs	r3, #18
 8005996:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005998:	4800      	ldr	r0, [pc, #0]	; (800599c <USBD_FS_DeviceDescriptor+0x8>)
 800599a:	4770      	bx	lr
 800599c:	2000015c 	.word	0x2000015c

080059a0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80059a0:	2304      	movs	r3, #4
 80059a2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80059a4:	4800      	ldr	r0, [pc, #0]	; (80059a8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80059a6:	4770      	bx	lr
 80059a8:	20000170 	.word	0x20000170

080059ac <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80059ac:	230c      	movs	r3, #12
 80059ae:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80059b0:	4800      	ldr	r0, [pc, #0]	; (80059b4 <USBD_FS_USR_BOSDescriptor+0x8>)
 80059b2:	4770      	bx	lr
 80059b4:	20000150 	.word	0x20000150

080059b8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d216      	bcs.n	80059ec <IntToUnicode+0x34>
{
 80059be:	b430      	push	{r4, r5}
 80059c0:	e00b      	b.n	80059da <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80059c2:	3437      	adds	r4, #55	; 0x37
 80059c4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 80059c8:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80059ca:	005c      	lsls	r4, r3, #1
 80059cc:	3401      	adds	r4, #1
 80059ce:	2500      	movs	r5, #0
 80059d0:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 80059d2:	3301      	adds	r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d206      	bcs.n	80059e8 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 80059da:	0f04      	lsrs	r4, r0, #28
 80059dc:	2c09      	cmp	r4, #9
 80059de:	d8f0      	bhi.n	80059c2 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80059e0:	3430      	adds	r4, #48	; 0x30
 80059e2:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 80059e6:	e7ef      	b.n	80059c8 <IntToUnicode+0x10>
  }
}
 80059e8:	bc30      	pop	{r4, r5}
 80059ea:	4770      	bx	lr
 80059ec:	4770      	bx	lr
	...

080059f0 <Get_SerialNum>:
{
 80059f0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <Get_SerialNum+0x2c>)
 80059f4:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80059f6:	3304      	adds	r3, #4
 80059f8:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80059fa:	3304      	adds	r3, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80059fe:	18c0      	adds	r0, r0, r3
 8005a00:	d100      	bne.n	8005a04 <Get_SerialNum+0x14>
}
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005a04:	4d06      	ldr	r5, [pc, #24]	; (8005a20 <Get_SerialNum+0x30>)
 8005a06:	2208      	movs	r2, #8
 8005a08:	1ca9      	adds	r1, r5, #2
 8005a0a:	f7ff ffd5 	bl	80059b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005a0e:	2204      	movs	r2, #4
 8005a10:	f105 0112 	add.w	r1, r5, #18
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff ffcf 	bl	80059b8 <IntToUnicode>
}
 8005a1a:	e7f2      	b.n	8005a02 <Get_SerialNum+0x12>
 8005a1c:	1ff0f420 	.word	0x1ff0f420
 8005a20:	20000174 	.word	0x20000174

08005a24 <USBD_FS_SerialStrDescriptor>:
{
 8005a24:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005a26:	231a      	movs	r3, #26
 8005a28:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005a2a:	f7ff ffe1 	bl	80059f0 <Get_SerialNum>
}
 8005a2e:	4801      	ldr	r0, [pc, #4]	; (8005a34 <USBD_FS_SerialStrDescriptor+0x10>)
 8005a30:	bd08      	pop	{r3, pc}
 8005a32:	bf00      	nop
 8005a34:	20000174 	.word	0x20000174

08005a38 <USBD_FS_ProductStrDescriptor>:
{
 8005a38:	b508      	push	{r3, lr}
 8005a3a:	460a      	mov	r2, r1
  if(speed == 0)
 8005a3c:	b128      	cbz	r0, 8005a4a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a3e:	4905      	ldr	r1, [pc, #20]	; (8005a54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005a40:	4805      	ldr	r0, [pc, #20]	; (8005a58 <USBD_FS_ProductStrDescriptor+0x20>)
 8005a42:	f7ff faa9 	bl	8004f98 <USBD_GetString>
}
 8005a46:	4803      	ldr	r0, [pc, #12]	; (8005a54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005a48:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a4a:	4902      	ldr	r1, [pc, #8]	; (8005a54 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005a4c:	4802      	ldr	r0, [pc, #8]	; (8005a58 <USBD_FS_ProductStrDescriptor+0x20>)
 8005a4e:	f7ff faa3 	bl	8004f98 <USBD_GetString>
 8005a52:	e7f8      	b.n	8005a46 <USBD_FS_ProductStrDescriptor+0xe>
 8005a54:	2001ace4 	.word	0x2001ace4
 8005a58:	0800fbb8 	.word	0x0800fbb8

08005a5c <USBD_FS_ManufacturerStrDescriptor>:
{
 8005a5c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005a5e:	4c04      	ldr	r4, [pc, #16]	; (8005a70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005a60:	460a      	mov	r2, r1
 8005a62:	4621      	mov	r1, r4
 8005a64:	4803      	ldr	r0, [pc, #12]	; (8005a74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005a66:	f7ff fa97 	bl	8004f98 <USBD_GetString>
}
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	bf00      	nop
 8005a70:	2001ace4 	.word	0x2001ace4
 8005a74:	0800fba4 	.word	0x0800fba4

08005a78 <USBD_FS_ConfigStrDescriptor>:
{
 8005a78:	b508      	push	{r3, lr}
 8005a7a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005a7c:	b128      	cbz	r0, 8005a8a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005a7e:	4905      	ldr	r1, [pc, #20]	; (8005a94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005a80:	4805      	ldr	r0, [pc, #20]	; (8005a98 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005a82:	f7ff fa89 	bl	8004f98 <USBD_GetString>
}
 8005a86:	4803      	ldr	r0, [pc, #12]	; (8005a94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005a88:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005a8a:	4902      	ldr	r1, [pc, #8]	; (8005a94 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005a8c:	4802      	ldr	r0, [pc, #8]	; (8005a98 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005a8e:	f7ff fa83 	bl	8004f98 <USBD_GetString>
 8005a92:	e7f8      	b.n	8005a86 <USBD_FS_ConfigStrDescriptor+0xe>
 8005a94:	2001ace4 	.word	0x2001ace4
 8005a98:	0800fb88 	.word	0x0800fb88

08005a9c <USBD_FS_InterfaceStrDescriptor>:
{
 8005a9c:	b508      	push	{r3, lr}
 8005a9e:	460a      	mov	r2, r1
  if(speed == 0)
 8005aa0:	b128      	cbz	r0, 8005aae <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005aa2:	4905      	ldr	r1, [pc, #20]	; (8005ab8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005aa4:	4805      	ldr	r0, [pc, #20]	; (8005abc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005aa6:	f7ff fa77 	bl	8004f98 <USBD_GetString>
}
 8005aaa:	4803      	ldr	r0, [pc, #12]	; (8005ab8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005aac:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005aae:	4902      	ldr	r1, [pc, #8]	; (8005ab8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005ab0:	4802      	ldr	r0, [pc, #8]	; (8005abc <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005ab2:	f7ff fa71 	bl	8004f98 <USBD_GetString>
 8005ab6:	e7f8      	b.n	8005aaa <USBD_FS_InterfaceStrDescriptor+0xe>
 8005ab8:	2001ace4 	.word	0x2001ace4
 8005abc:	0800fb94 	.word	0x0800fb94

08005ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ac4:	480d      	ldr	r0, [pc, #52]	; (8005afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005ac6:	490e      	ldr	r1, [pc, #56]	; (8005b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ac8:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005acc:	e002      	b.n	8005ad4 <LoopCopyDataInit>

08005ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ad2:	3304      	adds	r3, #4

08005ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ad8:	d3f9      	bcc.n	8005ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ada:	4a0b      	ldr	r2, [pc, #44]	; (8005b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005adc:	4c0b      	ldr	r4, [pc, #44]	; (8005b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ae0:	e001      	b.n	8005ae6 <LoopFillZerobss>

08005ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ae4:	3204      	adds	r2, #4

08005ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ae8:	d3fb      	bcc.n	8005ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005aea:	f7ff fd6d 	bl	80055c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aee:	f009 fbb3 	bl	800f258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005af2:	f7ff fc45 	bl	8005380 <main>
  bx  lr    
 8005af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005af8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b00:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005b04:	08014280 	.word	0x08014280
  ldr r2, =_sbss
 8005b08:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8005b0c:	2001b070 	.word	0x2001b070

08005b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b10:	e7fe      	b.n	8005b10 <ADC_IRQHandler>

08005b12 <_SetPhysRAMAddr>:
 8005b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b16:	4604      	mov	r4, r0
 8005b18:	460e      	mov	r6, r1
 8005b1a:	4615      	mov	r5, r2
 8005b1c:	b15b      	cbz	r3, 8005b36 <_SetPhysRAMAddr+0x24>
 8005b1e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005b22:	4798      	blx	r3
 8005b24:	4631      	mov	r1, r6
 8005b26:	4607      	mov	r7, r0
 8005b28:	462a      	mov	r2, r5
 8005b2a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005b2e:	4620      	mov	r0, r4
 8005b30:	4798      	blx	r3
 8005b32:	463e      	mov	r6, r7
 8005b34:	4605      	mov	r5, r0
 8005b36:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	212a      	movs	r1, #42	; 0x2a
 8005b3e:	4798      	blx	r3
 8005b40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b46:	4431      	add	r1, r6
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005b4e:	4798      	blx	r3
 8005b50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b56:	b2b7      	uxth	r7, r6
 8005b58:	4439      	add	r1, r7
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	b2c9      	uxtb	r1, r1
 8005b5e:	4798      	blx	r3
 8005b60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b66:	4431      	add	r1, r6
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005b6e:	4798      	blx	r3
 8005b70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b76:	4439      	add	r1, r7
 8005b78:	4620      	mov	r0, r4
 8005b7a:	b2c9      	uxtb	r1, r1
 8005b7c:	4798      	blx	r3
 8005b7e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005b82:	4620      	mov	r0, r4
 8005b84:	212b      	movs	r1, #43	; 0x2b
 8005b86:	4798      	blx	r3
 8005b88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b8e:	4429      	add	r1, r5
 8005b90:	4620      	mov	r0, r4
 8005b92:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005b96:	4798      	blx	r3
 8005b98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005b9e:	b2ae      	uxth	r6, r5
 8005ba0:	4431      	add	r1, r6
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	b2c9      	uxtb	r1, r1
 8005ba6:	4798      	blx	r3
 8005ba8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005baa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005bae:	4429      	add	r1, r5
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005bb6:	4798      	blx	r3
 8005bb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005bba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005bbe:	4431      	add	r1, r6
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	b2c9      	uxtb	r1, r1
 8005bc4:	4798      	blx	r3
 8005bc6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005bca:	4620      	mov	r0, r4
 8005bcc:	212c      	movs	r1, #44	; 0x2c
 8005bce:	4798      	blx	r3
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bd2 <_SetRect>:
 8005bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd6:	4698      	mov	r8, r3
 8005bd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005bda:	9f08      	ldr	r7, [sp, #32]
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4689      	mov	r9, r1
 8005be0:	4615      	mov	r5, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d064      	beq.n	8005cb0 <_SetRect+0xde>
 8005be6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005bea:	4798      	blx	r3
 8005bec:	463a      	mov	r2, r7
 8005bee:	4606      	mov	r6, r0
 8005bf0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4798      	blx	r3
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	4682      	mov	sl, r0
 8005bfe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005c02:	4649      	mov	r1, r9
 8005c04:	4620      	mov	r0, r4
 8005c06:	4798      	blx	r3
 8005c08:	463a      	mov	r2, r7
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005c14:	4798      	blx	r3
 8005c16:	45b2      	cmp	sl, r6
 8005c18:	4607      	mov	r7, r0
 8005c1a:	db02      	blt.n	8005c22 <_SetRect+0x50>
 8005c1c:	4653      	mov	r3, sl
 8005c1e:	46b2      	mov	sl, r6
 8005c20:	461e      	mov	r6, r3
 8005c22:	42af      	cmp	r7, r5
 8005c24:	db02      	blt.n	8005c2c <_SetRect+0x5a>
 8005c26:	463b      	mov	r3, r7
 8005c28:	462f      	mov	r7, r5
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c30:	4620      	mov	r0, r4
 8005c32:	212a      	movs	r1, #42	; 0x2a
 8005c34:	4798      	blx	r3
 8005c36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c38:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c3c:	4451      	add	r1, sl
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005c44:	4798      	blx	r3
 8005c46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c48:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c4c:	4451      	add	r1, sl
 8005c4e:	4620      	mov	r0, r4
 8005c50:	b2c9      	uxtb	r1, r1
 8005c52:	4798      	blx	r3
 8005c54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c5a:	4431      	add	r1, r6
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005c62:	4798      	blx	r3
 8005c64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c6a:	4431      	add	r1, r6
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	b2c9      	uxtb	r1, r1
 8005c70:	4798      	blx	r3
 8005c72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c76:	4620      	mov	r0, r4
 8005c78:	212b      	movs	r1, #43	; 0x2b
 8005c7a:	4798      	blx	r3
 8005c7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c7e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c82:	4439      	add	r1, r7
 8005c84:	4620      	mov	r0, r4
 8005c86:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005c8a:	4798      	blx	r3
 8005c8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c92:	4439      	add	r1, r7
 8005c94:	4620      	mov	r0, r4
 8005c96:	b2c9      	uxtb	r1, r1
 8005c98:	4798      	blx	r3
 8005c9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005ca0:	4429      	add	r1, r5
 8005ca2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4798      	blx	r3
 8005caa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005cac:	4429      	add	r1, r5
 8005cae:	e03f      	b.n	8005d30 <_SetRect+0x15e>
 8005cb0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8005cb4:	212a      	movs	r1, #42	; 0x2a
 8005cb6:	4798      	blx	r3
 8005cb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005cba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005cbe:	4449      	add	r1, r9
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005cc6:	4798      	blx	r3
 8005cc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005cca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005cce:	4449      	add	r1, r9
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	b2c9      	uxtb	r1, r1
 8005cd4:	4798      	blx	r3
 8005cd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005cd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005cdc:	4441      	add	r1, r8
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005ce4:	4798      	blx	r3
 8005ce6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ce8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005cec:	4441      	add	r1, r8
 8005cee:	4620      	mov	r0, r4
 8005cf0:	b2c9      	uxtb	r1, r1
 8005cf2:	4798      	blx	r3
 8005cf4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	212b      	movs	r1, #43	; 0x2b
 8005cfc:	4798      	blx	r3
 8005cfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005d04:	4429      	add	r1, r5
 8005d06:	4620      	mov	r0, r4
 8005d08:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005d0c:	4798      	blx	r3
 8005d0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d10:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005d14:	4429      	add	r1, r5
 8005d16:	4620      	mov	r0, r4
 8005d18:	b2c9      	uxtb	r1, r1
 8005d1a:	4798      	blx	r3
 8005d1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005d22:	4439      	add	r1, r7
 8005d24:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005d28:	4620      	mov	r0, r4
 8005d2a:	4798      	blx	r3
 8005d2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d2e:	4439      	add	r1, r7
 8005d30:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005d34:	4620      	mov	r0, r4
 8005d36:	b2c9      	uxtb	r1, r1
 8005d38:	4798      	blx	r3
 8005d3a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d3e:	4620      	mov	r0, r4
 8005d40:	212c      	movs	r1, #44	; 0x2c
 8005d42:	4798      	blx	r3
 8005d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d48 <_SetOrientation>:
 8005d48:	b513      	push	{r0, r1, r4, lr}
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <_SetOrientation+0x38>)
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	6851      	ldr	r1, [r2, #4]
 8005d50:	6810      	ldr	r0, [r2, #0]
 8005d52:	466b      	mov	r3, sp
 8005d54:	c303      	stmia	r3!, {r0, r1}
 8005d56:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	2136      	movs	r1, #54	; 0x36
 8005d5e:	4798      	blx	r3
 8005d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d62:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8005d64:	aa02      	add	r2, sp, #8
 8005d66:	4413      	add	r3, r2
 8005d68:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8005d6c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005d70:	4319      	orrs	r1, r3
 8005d72:	4620      	mov	r0, r4
 8005d74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005d78:	b289      	uxth	r1, r1
 8005d7a:	4798      	blx	r3
 8005d7c:	b002      	add	sp, #8
 8005d7e:	bd10      	pop	{r4, pc}
 8005d80:	0800fb14 	.word	0x0800fb14

08005d84 <_ReadPixel_16bpp_B8>:
 8005d84:	b513      	push	{r0, r1, r4, lr}
 8005d86:	4604      	mov	r4, r0
 8005d88:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8005d8c:	202e      	movs	r0, #46	; 0x2e
 8005d8e:	4798      	blx	r3
 8005d90:	6a21      	ldr	r1, [r4, #32]
 8005d92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005d96:	4668      	mov	r0, sp
 8005d98:	3103      	adds	r1, #3
 8005d9a:	4798      	blx	r3
 8005d9c:	6a22      	ldr	r2, [r4, #32]
 8005d9e:	ab00      	add	r3, sp, #0
 8005da0:	4413      	add	r3, r2
 8005da2:	f81d 2002 	ldrb.w	r2, [sp, r2]
 8005da6:	7859      	ldrb	r1, [r3, #1]
 8005da8:	7898      	ldrb	r0, [r3, #2]
 8005daa:	08d2      	lsrs	r2, r2, #3
 8005dac:	0889      	lsrs	r1, r1, #2
 8005dae:	02d2      	lsls	r2, r2, #11
 8005db0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8005db4:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 8005db8:	b002      	add	sp, #8
 8005dba:	bd10      	pop	{r4, pc}

08005dbc <_ReadPixel_16bpp_B16_I>:
 8005dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8005dc4:	202e      	movs	r0, #46	; 0x2e
 8005dc6:	4798      	blx	r3
 8005dc8:	6a21      	ldr	r1, [r4, #32]
 8005dca:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005dce:	4668      	mov	r0, sp
 8005dd0:	3102      	adds	r1, #2
 8005dd2:	4798      	blx	r3
 8005dd4:	6a23      	ldr	r3, [r4, #32]
 8005dd6:	a900      	add	r1, sp, #0
 8005dd8:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 8005ddc:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 8005de0:	8852      	ldrh	r2, [r2, #2]
 8005de2:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 8005de6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8005dea:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 8005dee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8005df2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8005df6:	b004      	add	sp, #16
 8005df8:	bd10      	pop	{r4, pc}

08005dfa <_SetReg_B8>:
 8005dfa:	b538      	push	{r3, r4, r5, lr}
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8005e04:	0a08      	lsrs	r0, r1, #8
 8005e06:	4798      	blx	r3
 8005e08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8005e0c:	b2e8      	uxtb	r0, r5
 8005e0e:	4798      	blx	r3
 8005e10:	bd38      	pop	{r3, r4, r5, pc}

08005e12 <_SetReg_B16>:
 8005e12:	b508      	push	{r3, lr}
 8005e14:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4798      	blx	r3
 8005e1c:	bd08      	pop	{r3, pc}

08005e1e <_WritePara_B8>:
 8005e1e:	b508      	push	{r3, lr}
 8005e20:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8005e24:	b2c8      	uxtb	r0, r1
 8005e26:	4798      	blx	r3
 8005e28:	bd08      	pop	{r3, pc}

08005e2a <_WritePara_B16>:
 8005e2a:	b508      	push	{r3, lr}
 8005e2c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8005e30:	4608      	mov	r0, r1
 8005e32:	4798      	blx	r3
 8005e34:	bd08      	pop	{r3, pc}
	...

08005e38 <_SetInterface>:
 8005e38:	2908      	cmp	r1, #8
 8005e3a:	d002      	beq.n	8005e42 <_SetInterface+0xa>
 8005e3c:	2910      	cmp	r1, #16
 8005e3e:	d005      	beq.n	8005e4c <_SetInterface+0x14>
 8005e40:	4770      	bx	lr
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <_SetInterface+0x24>)
 8005e44:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <_SetInterface+0x28>)
 8005e4a:	e003      	b.n	8005e54 <_SetInterface+0x1c>
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <_SetInterface+0x2c>)
 8005e4e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <_SetInterface+0x30>)
 8005e54:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	08005dfb 	.word	0x08005dfb
 8005e60:	08005e1f 	.word	0x08005e1f
 8005e64:	08005e13 	.word	0x08005e13
 8005e68:	08005e2b 	.word	0x08005e2b

08005e6c <_ReadRect_16bpp_B8>:
 8005e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	6884      	ldr	r4, [r0, #8]
 8005e72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005e74:	9700      	str	r7, [sp, #0]
 8005e76:	1abd      	subs	r5, r7, r2
 8005e78:	1a58      	subs	r0, r3, r1
 8005e7a:	3501      	adds	r5, #1
 8005e7c:	fb00 5505 	mla	r5, r0, r5, r5
 8005e80:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8005e84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e86:	4620      	mov	r0, r4
 8005e88:	47b8      	blx	r7
 8005e8a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8005e8e:	202e      	movs	r0, #46	; 0x2e
 8005e90:	4798      	blx	r3
 8005e92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e96:	6a21      	ldr	r1, [r4, #32]
 8005e98:	a802      	add	r0, sp, #8
 8005e9a:	4798      	blx	r3
 8005e9c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005ea0:	a802      	add	r0, sp, #8
 8005ea2:	2103      	movs	r1, #3
 8005ea4:	4798      	blx	r3
 8005ea6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005eaa:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005eae:	08db      	lsrs	r3, r3, #3
 8005eb0:	0892      	lsrs	r2, r2, #2
 8005eb2:	02db      	lsls	r3, r3, #11
 8005eb4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005eb8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8005ebc:	3d01      	subs	r5, #1
 8005ebe:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8005ec2:	f826 3b02 	strh.w	r3, [r6], #2
 8005ec6:	d1e9      	bne.n	8005e9c <_ReadRect_16bpp_B8+0x30>
 8005ec8:	b005      	add	sp, #20
 8005eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ecc <_ReadRect_16bpp_B16_I>:
 8005ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	6884      	ldr	r4, [r0, #8]
 8005ed2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005ed4:	9700      	str	r7, [sp, #0]
 8005ed6:	1abd      	subs	r5, r7, r2
 8005ed8:	1a58      	subs	r0, r3, r1
 8005eda:	3501      	adds	r5, #1
 8005edc:	fb00 5505 	mla	r5, r0, r5, r5
 8005ee0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8005ee4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	47b8      	blx	r7
 8005eea:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8005eee:	202e      	movs	r0, #46	; 0x2e
 8005ef0:	4798      	blx	r3
 8005ef2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005ef6:	6a21      	ldr	r1, [r4, #32]
 8005ef8:	a802      	add	r0, sp, #8
 8005efa:	4798      	blx	r3
 8005efc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005f00:	a802      	add	r0, sp, #8
 8005f02:	2102      	movs	r1, #2
 8005f04:	4798      	blx	r3
 8005f06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005f0a:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8005f0e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005f12:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 8005f16:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005f1a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8005f1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f22:	3d01      	subs	r5, #1
 8005f24:	f826 3b02 	strh.w	r3, [r6], #2
 8005f28:	d1e8      	bne.n	8005efc <_ReadRect_16bpp_B16_I+0x30>
 8005f2a:	b007      	add	sp, #28
 8005f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005f30 <GUIDRV_FlexColor_SetFunc66720>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	4604      	mov	r4, r0
 8005f34:	f000 fda6 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8005f38:	68a3      	ldr	r3, [r4, #8]
 8005f3a:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <GUIDRV_FlexColor_SetFunc66720+0x54>)
 8005f3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <GUIDRV_FlexColor_SetFunc66720+0x58>)
 8005f42:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005f46:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 8005f48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005f4c:	4a10      	ldr	r2, [pc, #64]	; (8005f90 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 8005f4e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005f58:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8005f5c:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <GUIDRV_FlexColor_SetFunc66720+0x64>)
 8005f5e:	490e      	ldr	r1, [pc, #56]	; (8005f98 <GUIDRV_FlexColor_SetFunc66720+0x68>)
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8005f66:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005f68:	6809      	ldr	r1, [r1, #0]
 8005f6a:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8005f6e:	f022 0203 	bic.w	r2, r2, #3
 8005f72:	490a      	ldr	r1, [pc, #40]	; (8005f9c <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 8005f74:	84da      	strh	r2, [r3, #38]	; 0x26
 8005f76:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 8005f78:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8005f7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	bf00      	nop
 8005f84:	08005b13 	.word	0x08005b13
 8005f88:	08005bd3 	.word	0x08005bd3
 8005f8c:	08005d49 	.word	0x08005d49
 8005f90:	08005d85 	.word	0x08005d85
 8005f94:	20000194 	.word	0x20000194
 8005f98:	20000190 	.word	0x20000190
 8005f9c:	08005e6d 	.word	0x08005e6d
 8005fa0:	08005e39 	.word	0x08005e39

08005fa4 <_ReadData>:
 8005fa4:	b508      	push	{r3, lr}
 8005fa6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8005faa:	4798      	blx	r3
 8005fac:	bd08      	pop	{r3, pc}

08005fae <_WriteData>:
 8005fae:	b508      	push	{r3, lr}
 8005fb0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8005fb4:	b288      	uxth	r0, r1
 8005fb6:	4798      	blx	r3
 8005fb8:	bd08      	pop	{r3, pc}
	...

08005fbc <_FillRect>:
 8005fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc0:	4f3d      	ldr	r7, [pc, #244]	; (80060b8 <_FillRect+0xfc>)
 8005fc2:	6884      	ldr	r4, [r0, #8]
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	6838      	ldr	r0, [r7, #0]
 8005fc8:	7c00      	ldrb	r0, [r0, #16]
 8005fca:	f010 0f01 	tst.w	r0, #1
 8005fce:	b085      	sub	sp, #20
 8005fd0:	460e      	mov	r6, r1
 8005fd2:	4615      	mov	r5, r2
 8005fd4:	4698      	mov	r8, r3
 8005fd6:	ebc1 0903 	rsb	r9, r1, r3
 8005fda:	d045      	beq.n	8006068 <_FillRect+0xac>
 8005fdc:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8005fe0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005fe2:	4285      	cmp	r5, r0
 8005fe4:	dc65      	bgt.n	80060b2 <_FillRect+0xf6>
 8005fe6:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 8005fea:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8005fec:	f1bc 0f00 	cmp.w	ip, #0
 8005ff0:	d101      	bne.n	8005ff6 <_FillRect+0x3a>
 8005ff2:	46b4      	mov	ip, r6
 8005ff4:	e007      	b.n	8006006 <_FillRect+0x4a>
 8005ff6:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8005ffa:	4650      	mov	r0, sl
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	462a      	mov	r2, r5
 8006000:	4643      	mov	r3, r8
 8006002:	47e0      	blx	ip
 8006004:	e011      	b.n	800602a <_FillRect+0x6e>
 8006006:	45c4      	cmp	ip, r8
 8006008:	dc0e      	bgt.n	8006028 <_FillRect+0x6c>
 800600a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800600e:	f8cd c00c 	str.w	ip, [sp, #12]
 8006012:	4661      	mov	r1, ip
 8006014:	4650      	mov	r0, sl
 8006016:	462a      	mov	r2, r5
 8006018:	4798      	blx	r3
 800601a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800601e:	f827 0b02 	strh.w	r0, [r7], #2
 8006022:	f10c 0c01 	add.w	ip, ip, #1
 8006026:	e7ee      	b.n	8006006 <_FillRect+0x4a>
 8006028:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800602a:	1ebb      	subs	r3, r7, #2
 800602c:	f109 0c01 	add.w	ip, r9, #1
 8006030:	445f      	add	r7, fp
 8006032:	42bb      	cmp	r3, r7
 8006034:	d005      	beq.n	8006042 <_FillRect+0x86>
 8006036:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006038:	8859      	ldrh	r1, [r3, #2]
 800603a:	404a      	eors	r2, r1
 800603c:	f823 2f02 	strh.w	r2, [r3, #2]!
 8006040:	e7f7      	b.n	8006032 <_FillRect+0x76>
 8006042:	9500      	str	r5, [sp, #0]
 8006044:	462a      	mov	r2, r5
 8006046:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800604a:	f8cd c00c 	str.w	ip, [sp, #12]
 800604e:	4620      	mov	r0, r4
 8006050:	4631      	mov	r1, r6
 8006052:	4643      	mov	r3, r8
 8006054:	47b8      	blx	r7
 8006056:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800605a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800605e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006060:	4661      	mov	r1, ip
 8006062:	4798      	blx	r3
 8006064:	3501      	adds	r5, #1
 8006066:	e7bb      	b.n	8005fe0 <_FillRect+0x24>
 8006068:	980e      	ldr	r0, [sp, #56]	; 0x38
 800606a:	9000      	str	r0, [sp, #0]
 800606c:	1a85      	subs	r5, r0, r2
 800606e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006072:	4620      	mov	r0, r4
 8006074:	47b0      	blx	r6
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 800607a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607c:	f109 0901 	add.w	r9, r9, #1
 8006080:	f8d3 8000 	ldr.w	r8, [r3]
 8006084:	fb05 9509 	mla	r5, r5, r9, r9
 8006088:	2301      	movs	r3, #1
 800608a:	b195      	cbz	r5, 80060b2 <_FillRect+0xf6>
 800608c:	2dfa      	cmp	r5, #250	; 0xfa
 800608e:	bf34      	ite	cc
 8006090:	462e      	movcc	r6, r5
 8006092:	26fa      	movcs	r6, #250	; 0xfa
 8006094:	b12b      	cbz	r3, 80060a2 <_FillRect+0xe6>
 8006096:	4638      	mov	r0, r7
 8006098:	fa1f f188 	uxth.w	r1, r8
 800609c:	4632      	mov	r2, r6
 800609e:	f000 fe41 	bl	8006d24 <GUI__memset16>
 80060a2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80060a6:	4638      	mov	r0, r7
 80060a8:	4631      	mov	r1, r6
 80060aa:	4798      	blx	r3
 80060ac:	1bad      	subs	r5, r5, r6
 80060ae:	2300      	movs	r3, #0
 80060b0:	e7eb      	b.n	800608a <_FillRect+0xce>
 80060b2:	b005      	add	sp, #20
 80060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b8:	200001b0 	.word	0x200001b0

080060bc <_DrawBitmap>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	b08d      	sub	sp, #52	; 0x34
 80060c2:	6885      	ldr	r5, [r0, #8]
 80060c4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80060c6:	9305      	str	r3, [sp, #20]
 80060c8:	1e7b      	subs	r3, r7, #1
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	9009      	str	r0, [sp, #36]	; 0x24
 80060ce:	9108      	str	r1, [sp, #32]
 80060d0:	920a      	str	r2, [sp, #40]	; 0x28
 80060d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80060d4:	d903      	bls.n	80060de <_DrawBitmap+0x22>
 80060d6:	2f04      	cmp	r7, #4
 80060d8:	d001      	beq.n	80060de <_DrawBitmap+0x22>
 80060da:	2f08      	cmp	r7, #8
 80060dc:	d106      	bne.n	80060ec <_DrawBitmap+0x30>
 80060de:	4b8f      	ldr	r3, [pc, #572]	; (800631c <_DrawBitmap+0x260>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d010      	beq.n	800610e <_DrawBitmap+0x52>
 80060ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ee:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80060f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80060f2:	9908      	ldr	r1, [sp, #32]
 80060f4:	9b05      	ldr	r3, [sp, #20]
 80060f6:	443a      	add	r2, r7
 80060f8:	4429      	add	r1, r5
 80060fa:	3a01      	subs	r2, #1
 80060fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80060fe:	9200      	str	r2, [sp, #0]
 8006100:	440b      	add	r3, r1
 8006102:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8006106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006108:	4628      	mov	r0, r5
 800610a:	3b01      	subs	r3, #1
 800610c:	47a0      	blx	r4
 800610e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006112:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006114:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006116:	ebc7 030b 	rsb	r3, r7, fp
 800611a:	42ab      	cmp	r3, r5
 800611c:	f280 8251 	bge.w	80065c2 <_DrawBitmap+0x506>
 8006120:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8006122:	1e7b      	subs	r3, r7, #1
 8006124:	2b0f      	cmp	r3, #15
 8006126:	f200 8245 	bhi.w	80065b4 <_DrawBitmap+0x4f8>
 800612a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800612e:	0010      	.short	0x0010
 8006130:	024300b7 	.word	0x024300b7
 8006134:	02430140 	.word	0x02430140
 8006138:	02430243 	.word	0x02430243
 800613c:	024301d7 	.word	0x024301d7
 8006140:	02430243 	.word	0x02430243
 8006144:	02430243 	.word	0x02430243
 8006148:	02430243 	.word	0x02430243
 800614c:	023d      	.short	0x023d
 800614e:	4b73      	ldr	r3, [pc, #460]	; (800631c <_DrawBitmap+0x260>)
 8006150:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ac      	ldr	r4, [r5, #8]
 8006156:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006158:	7c1b      	ldrb	r3, [r3, #16]
 800615a:	682f      	ldr	r7, [r5, #0]
 800615c:	686d      	ldr	r5, [r5, #4]
 800615e:	9507      	str	r5, [sp, #28]
 8006160:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006164:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b02      	cmp	r3, #2
 800616c:	44aa      	add	sl, r5
 800616e:	d01b      	beq.n	80061a8 <_DrawBitmap+0xec>
 8006170:	2b03      	cmp	r3, #3
 8006172:	d06e      	beq.n	8006252 <_DrawBitmap+0x196>
 8006174:	2b01      	cmp	r3, #1
 8006176:	d06c      	beq.n	8006252 <_DrawBitmap+0x196>
 8006178:	9e05      	ldr	r6, [sp, #20]
 800617a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800617e:	f898 1000 	ldrb.w	r1, [r8]
 8006182:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8006186:	2280      	movs	r2, #128	; 0x80
 8006188:	412a      	asrs	r2, r5
 800618a:	4211      	tst	r1, r2
 800618c:	bf16      	itet	ne
 800618e:	9907      	ldrne	r1, [sp, #28]
 8006190:	b2b8      	uxtheq	r0, r7
 8006192:	b288      	uxthne	r0, r1
 8006194:	3501      	adds	r5, #1
 8006196:	4798      	blx	r3
 8006198:	2d08      	cmp	r5, #8
 800619a:	bf04      	itt	eq
 800619c:	f108 0801 	addeq.w	r8, r8, #1
 80061a0:	2500      	moveq	r5, #0
 80061a2:	3e01      	subs	r6, #1
 80061a4:	d1eb      	bne.n	800617e <_DrawBitmap+0xc2>
 80061a6:	e205      	b.n	80065b4 <_DrawBitmap+0x4f8>
 80061a8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80061aa:	9506      	str	r5, [sp, #24]
 80061ac:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 80061b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061b4:	f8cd a00c 	str.w	sl, [sp, #12]
 80061b8:	2500      	movs	r5, #0
 80061ba:	4656      	mov	r6, sl
 80061bc:	462b      	mov	r3, r5
 80061be:	9f06      	ldr	r7, [sp, #24]
 80061c0:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80061c4:	783a      	ldrb	r2, [r7, #0]
 80061c6:	fa4c fc08 	asr.w	ip, ip, r8
 80061ca:	ea12 0c0c 	ands.w	ip, r2, ip
 80061ce:	d00b      	beq.n	80061e8 <_DrawBitmap+0x12c>
 80061d0:	b913      	cbnz	r3, 80061d8 <_DrawBitmap+0x11c>
 80061d2:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 80061d6:	9603      	str	r6, [sp, #12]
 80061d8:	9f07      	ldr	r7, [sp, #28]
 80061da:	f8a9 7000 	strh.w	r7, [r9]
 80061de:	3501      	adds	r5, #1
 80061e0:	f109 0902 	add.w	r9, r9, #2
 80061e4:	2301      	movs	r3, #1
 80061e6:	e017      	b.n	8006218 <_DrawBitmap+0x15c>
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d114      	bne.n	8006216 <_DrawBitmap+0x15a>
 80061ec:	f8cd b000 	str.w	fp, [sp]
 80061f0:	f8cd c010 	str.w	ip, [sp, #16]
 80061f4:	4620      	mov	r0, r4
 80061f6:	9903      	ldr	r1, [sp, #12]
 80061f8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80061fc:	465a      	mov	r2, fp
 80061fe:	1e73      	subs	r3, r6, #1
 8006200:	47b8      	blx	r7
 8006202:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8006206:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006208:	4629      	mov	r1, r5
 800620a:	4798      	blx	r3
 800620c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006210:	4665      	mov	r5, ip
 8006212:	4663      	mov	r3, ip
 8006214:	e000      	b.n	8006218 <_DrawBitmap+0x15c>
 8006216:	4663      	mov	r3, ip
 8006218:	f108 0801 	add.w	r8, r8, #1
 800621c:	f1b8 0f08 	cmp.w	r8, #8
 8006220:	f106 0601 	add.w	r6, r6, #1
 8006224:	d104      	bne.n	8006230 <_DrawBitmap+0x174>
 8006226:	9f06      	ldr	r7, [sp, #24]
 8006228:	3701      	adds	r7, #1
 800622a:	9706      	str	r7, [sp, #24]
 800622c:	f04f 0800 	mov.w	r8, #0
 8006230:	9a05      	ldr	r2, [sp, #20]
 8006232:	4452      	add	r2, sl
 8006234:	42b2      	cmp	r2, r6
 8006236:	d1c2      	bne.n	80061be <_DrawBitmap+0x102>
 8006238:	9f05      	ldr	r7, [sp, #20]
 800623a:	1e7b      	subs	r3, r7, #1
 800623c:	4453      	add	r3, sl
 800623e:	2d00      	cmp	r5, #0
 8006240:	f000 81b8 	beq.w	80065b4 <_DrawBitmap+0x4f8>
 8006244:	f8cd b000 	str.w	fp, [sp]
 8006248:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800624c:	9903      	ldr	r1, [sp, #12]
 800624e:	4620      	mov	r0, r4
 8006250:	e13d      	b.n	80064ce <_DrawBitmap+0x412>
 8006252:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006256:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006258:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800625a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800625e:	782a      	ldrb	r2, [r5, #0]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	4133      	asrs	r3, r6
 8006264:	44d1      	add	r9, sl
 8006266:	421a      	tst	r2, r3
 8006268:	ebc8 0909 	rsb	r9, r8, r9
 800626c:	d00d      	beq.n	800628a <_DrawBitmap+0x1ce>
 800626e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8006272:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006274:	4649      	mov	r1, r9
 8006276:	465a      	mov	r2, fp
 8006278:	4798      	blx	r3
 800627a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800627c:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 8006280:	4043      	eors	r3, r0
 8006282:	4649      	mov	r1, r9
 8006284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006286:	465a      	mov	r2, fp
 8006288:	47b8      	blx	r7
 800628a:	3601      	adds	r6, #1
 800628c:	2e08      	cmp	r6, #8
 800628e:	bf04      	itt	eq
 8006290:	3501      	addeq	r5, #1
 8006292:	2600      	moveq	r6, #0
 8006294:	f1b8 0801 	subs.w	r8, r8, #1
 8006298:	d1df      	bne.n	800625a <_DrawBitmap+0x19e>
 800629a:	e18b      	b.n	80065b4 <_DrawBitmap+0x4f8>
 800629c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800629e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80062a0:	68ac      	ldr	r4, [r5, #8]
 80062a2:	2f00      	cmp	r7, #0
 80062a4:	f000 8186 	beq.w	80065b4 <_DrawBitmap+0x4f8>
 80062a8:	4b1c      	ldr	r3, [pc, #112]	; (800631c <_DrawBitmap+0x260>)
 80062aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f895 a000 	ldrb.w	sl, [r5]
 80062b2:	7c1b      	ldrb	r3, [r3, #16]
 80062b4:	f013 0303 	ands.w	r3, r3, #3
 80062b8:	d011      	beq.n	80062de <_DrawBitmap+0x222>
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	f040 817a 	bne.w	80065b4 <_DrawBitmap+0x4f8>
 80062c0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80062c2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062c6:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80062c8:	9703      	str	r7, [sp, #12]
 80062ca:	44a9      	add	r9, r5
 80062cc:	46a8      	mov	r8, r5
 80062ce:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80062d0:	9507      	str	r5, [sp, #28]
 80062d2:	2500      	movs	r5, #0
 80062d4:	f8cd 9018 	str.w	r9, [sp, #24]
 80062d8:	464e      	mov	r6, r9
 80062da:	462b      	mov	r3, r5
 80062dc:	e040      	b.n	8006360 <_DrawBitmap+0x2a4>
 80062de:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80062e0:	9e05      	ldr	r6, [sp, #20]
 80062e2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80062e4:	f1c5 0303 	rsb	r3, r5, #3
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	f1c3 0206 	rsb	r2, r3, #6
 80062ee:	21c0      	movs	r1, #192	; 0xc0
 80062f0:	fa41 f202 	asr.w	r2, r1, r2
 80062f4:	ea02 020a 	and.w	r2, r2, sl
 80062f8:	40da      	lsrs	r2, r3
 80062fa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80062fc:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8006300:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 8006304:	3501      	adds	r5, #1
 8006306:	4798      	blx	r3
 8006308:	2d04      	cmp	r5, #4
 800630a:	d103      	bne.n	8006314 <_DrawBitmap+0x258>
 800630c:	f897 a001 	ldrb.w	sl, [r7, #1]
 8006310:	2500      	movs	r5, #0
 8006312:	3701      	adds	r7, #1
 8006314:	3e01      	subs	r6, #1
 8006316:	d1e5      	bne.n	80062e4 <_DrawBitmap+0x228>
 8006318:	e14c      	b.n	80065b4 <_DrawBitmap+0x4f8>
 800631a:	bf00      	nop
 800631c:	200001b0 	.word	0x200001b0
 8006320:	b913      	cbnz	r3, 8006328 <_DrawBitmap+0x26c>
 8006322:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006324:	9703      	str	r7, [sp, #12]
 8006326:	9606      	str	r6, [sp, #24]
 8006328:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800632a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800632e:	9f03      	ldr	r7, [sp, #12]
 8006330:	803b      	strh	r3, [r7, #0]
 8006332:	3702      	adds	r7, #2
 8006334:	3501      	adds	r5, #1
 8006336:	9703      	str	r7, [sp, #12]
 8006338:	2301      	movs	r3, #1
 800633a:	f108 0801 	add.w	r8, r8, #1
 800633e:	f1b8 0f04 	cmp.w	r8, #4
 8006342:	f106 0601 	add.w	r6, r6, #1
 8006346:	d106      	bne.n	8006356 <_DrawBitmap+0x29a>
 8006348:	9f07      	ldr	r7, [sp, #28]
 800634a:	f897 a001 	ldrb.w	sl, [r7, #1]
 800634e:	3701      	adds	r7, #1
 8006350:	9707      	str	r7, [sp, #28]
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	9a05      	ldr	r2, [sp, #20]
 8006358:	444a      	add	r2, r9
 800635a:	42b2      	cmp	r2, r6
 800635c:	f000 80ac 	beq.w	80064b8 <_DrawBitmap+0x3fc>
 8006360:	f1c8 0203 	rsb	r2, r8, #3
 8006364:	0052      	lsls	r2, r2, #1
 8006366:	f1c2 0106 	rsb	r1, r2, #6
 800636a:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800636e:	fa4c fc01 	asr.w	ip, ip, r1
 8006372:	ea0c 0c0a 	and.w	ip, ip, sl
 8006376:	fa3c fc02 	lsrs.w	ip, ip, r2
 800637a:	d1d1      	bne.n	8006320 <_DrawBitmap+0x264>
 800637c:	2b01      	cmp	r3, #1
 800637e:	d114      	bne.n	80063aa <_DrawBitmap+0x2ee>
 8006380:	f8cd b000 	str.w	fp, [sp]
 8006384:	f8cd c010 	str.w	ip, [sp, #16]
 8006388:	4620      	mov	r0, r4
 800638a:	9906      	ldr	r1, [sp, #24]
 800638c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006390:	465a      	mov	r2, fp
 8006392:	1e73      	subs	r3, r6, #1
 8006394:	47b8      	blx	r7
 8006396:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800639a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800639c:	4629      	mov	r1, r5
 800639e:	4798      	blx	r3
 80063a0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80063a4:	4665      	mov	r5, ip
 80063a6:	4663      	mov	r3, ip
 80063a8:	e7c7      	b.n	800633a <_DrawBitmap+0x27e>
 80063aa:	4663      	mov	r3, ip
 80063ac:	e7c5      	b.n	800633a <_DrawBitmap+0x27e>
 80063ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063b0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	2f00      	cmp	r7, #0
 80063b6:	f000 80fd 	beq.w	80065b4 <_DrawBitmap+0x4f8>
 80063ba:	4b83      	ldr	r3, [pc, #524]	; (80065c8 <_DrawBitmap+0x50c>)
 80063bc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f895 a000 	ldrb.w	sl, [r5]
 80063c4:	7c1b      	ldrb	r3, [r3, #16]
 80063c6:	f013 0303 	ands.w	r3, r3, #3
 80063ca:	d011      	beq.n	80063f0 <_DrawBitmap+0x334>
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f040 80f1 	bne.w	80065b4 <_DrawBitmap+0x4f8>
 80063d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80063d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063d8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80063da:	9703      	str	r7, [sp, #12]
 80063dc:	44a9      	add	r9, r5
 80063de:	46a8      	mov	r8, r5
 80063e0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80063e2:	9507      	str	r5, [sp, #28]
 80063e4:	2500      	movs	r5, #0
 80063e6:	f8cd 9018 	str.w	r9, [sp, #24]
 80063ea:	464e      	mov	r6, r9
 80063ec:	462b      	mov	r3, r5
 80063ee:	e03c      	b.n	800646a <_DrawBitmap+0x3ae>
 80063f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80063f2:	9e05      	ldr	r6, [sp, #20]
 80063f4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80063f6:	f1c5 0301 	rsb	r3, r5, #1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	f1c3 0204 	rsb	r2, r3, #4
 8006400:	21f0      	movs	r1, #240	; 0xf0
 8006402:	fa41 f202 	asr.w	r2, r1, r2
 8006406:	ea02 020a 	and.w	r2, r2, sl
 800640a:	40da      	lsrs	r2, r3
 800640c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800640e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8006412:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 8006416:	3501      	adds	r5, #1
 8006418:	4798      	blx	r3
 800641a:	2d02      	cmp	r5, #2
 800641c:	d103      	bne.n	8006426 <_DrawBitmap+0x36a>
 800641e:	f897 a001 	ldrb.w	sl, [r7, #1]
 8006422:	2500      	movs	r5, #0
 8006424:	3701      	adds	r7, #1
 8006426:	3e01      	subs	r6, #1
 8006428:	d1e5      	bne.n	80063f6 <_DrawBitmap+0x33a>
 800642a:	e0c3      	b.n	80065b4 <_DrawBitmap+0x4f8>
 800642c:	b913      	cbnz	r3, 8006434 <_DrawBitmap+0x378>
 800642e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006430:	9703      	str	r7, [sp, #12]
 8006432:	9606      	str	r6, [sp, #24]
 8006434:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006436:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800643a:	9f03      	ldr	r7, [sp, #12]
 800643c:	803b      	strh	r3, [r7, #0]
 800643e:	3702      	adds	r7, #2
 8006440:	3501      	adds	r5, #1
 8006442:	9703      	str	r7, [sp, #12]
 8006444:	2301      	movs	r3, #1
 8006446:	f108 0801 	add.w	r8, r8, #1
 800644a:	f1b8 0f02 	cmp.w	r8, #2
 800644e:	f106 0601 	add.w	r6, r6, #1
 8006452:	d106      	bne.n	8006462 <_DrawBitmap+0x3a6>
 8006454:	9f07      	ldr	r7, [sp, #28]
 8006456:	f897 a001 	ldrb.w	sl, [r7, #1]
 800645a:	3701      	adds	r7, #1
 800645c:	9707      	str	r7, [sp, #28]
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	9a05      	ldr	r2, [sp, #20]
 8006464:	444a      	add	r2, r9
 8006466:	42b2      	cmp	r2, r6
 8006468:	d026      	beq.n	80064b8 <_DrawBitmap+0x3fc>
 800646a:	f1c8 0201 	rsb	r2, r8, #1
 800646e:	0092      	lsls	r2, r2, #2
 8006470:	f1c2 0104 	rsb	r1, r2, #4
 8006474:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8006478:	fa4c fc01 	asr.w	ip, ip, r1
 800647c:	ea0c 0c0a 	and.w	ip, ip, sl
 8006480:	fa3c fc02 	lsrs.w	ip, ip, r2
 8006484:	d1d2      	bne.n	800642c <_DrawBitmap+0x370>
 8006486:	2b01      	cmp	r3, #1
 8006488:	d114      	bne.n	80064b4 <_DrawBitmap+0x3f8>
 800648a:	f8cd b000 	str.w	fp, [sp]
 800648e:	f8cd c010 	str.w	ip, [sp, #16]
 8006492:	4620      	mov	r0, r4
 8006494:	9906      	ldr	r1, [sp, #24]
 8006496:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800649a:	465a      	mov	r2, fp
 800649c:	1e73      	subs	r3, r6, #1
 800649e:	47b8      	blx	r7
 80064a0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80064a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064a6:	4629      	mov	r1, r5
 80064a8:	4798      	blx	r3
 80064aa:	f8dd c010 	ldr.w	ip, [sp, #16]
 80064ae:	4665      	mov	r5, ip
 80064b0:	4663      	mov	r3, ip
 80064b2:	e7c8      	b.n	8006446 <_DrawBitmap+0x38a>
 80064b4:	4663      	mov	r3, ip
 80064b6:	e7c6      	b.n	8006446 <_DrawBitmap+0x38a>
 80064b8:	9f05      	ldr	r7, [sp, #20]
 80064ba:	1e7b      	subs	r3, r7, #1
 80064bc:	444b      	add	r3, r9
 80064be:	2d00      	cmp	r5, #0
 80064c0:	d078      	beq.n	80065b4 <_DrawBitmap+0x4f8>
 80064c2:	f8cd b000 	str.w	fp, [sp]
 80064c6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80064ca:	9906      	ldr	r1, [sp, #24]
 80064cc:	4620      	mov	r0, r4
 80064ce:	465a      	mov	r2, fp
 80064d0:	47b0      	blx	r6
 80064d2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80064d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064d8:	4629      	mov	r1, r5
 80064da:	e06a      	b.n	80065b2 <_DrawBitmap+0x4f6>
 80064dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064de:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80064e0:	68ac      	ldr	r4, [r5, #8]
 80064e2:	2f00      	cmp	r7, #0
 80064e4:	d066      	beq.n	80065b4 <_DrawBitmap+0x4f8>
 80064e6:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <_DrawBitmap+0x50c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	7c1b      	ldrb	r3, [r3, #16]
 80064ec:	f013 0303 	ands.w	r3, r3, #3
 80064f0:	d009      	beq.n	8006506 <_DrawBitmap+0x44a>
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d15e      	bne.n	80065b4 <_DrawBitmap+0x4f8>
 80064f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064fa:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80064fe:	2600      	movs	r6, #0
 8006500:	464f      	mov	r7, r9
 8006502:	4633      	mov	r3, r6
 8006504:	e022      	b.n	800654c <_DrawBitmap+0x490>
 8006506:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800650a:	9f05      	ldr	r7, [sp, #20]
 800650c:	443b      	add	r3, r7
 800650e:	1b5b      	subs	r3, r3, r5
 8006510:	2b00      	cmp	r3, #0
 8006512:	dd4f      	ble.n	80065b4 <_DrawBitmap+0x4f8>
 8006514:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006518:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800651a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800651e:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 8006522:	4798      	blx	r3
 8006524:	e7f0      	b.n	8006508 <_DrawBitmap+0x44c>
 8006526:	b913      	cbnz	r3, 800652e <_DrawBitmap+0x472>
 8006528:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800652c:	46b9      	mov	r9, r7
 800652e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006530:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8006534:	f8a8 3000 	strh.w	r3, [r8]
 8006538:	3601      	adds	r6, #1
 800653a:	f108 0802 	add.w	r8, r8, #2
 800653e:	2301      	movs	r3, #1
 8006540:	9a08      	ldr	r2, [sp, #32]
 8006542:	9d05      	ldr	r5, [sp, #20]
 8006544:	3701      	adds	r7, #1
 8006546:	442a      	add	r2, r5
 8006548:	42ba      	cmp	r2, r7
 800654a:	d01c      	beq.n	8006586 <_DrawBitmap+0x4ca>
 800654c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800654e:	9808      	ldr	r0, [sp, #32]
 8006550:	1a2a      	subs	r2, r5, r0
 8006552:	f812 a007 	ldrb.w	sl, [r2, r7]
 8006556:	f1ba 0f00 	cmp.w	sl, #0
 800655a:	d1e4      	bne.n	8006526 <_DrawBitmap+0x46a>
 800655c:	2b01      	cmp	r3, #1
 800655e:	d110      	bne.n	8006582 <_DrawBitmap+0x4c6>
 8006560:	f8cd b000 	str.w	fp, [sp]
 8006564:	4620      	mov	r0, r4
 8006566:	4649      	mov	r1, r9
 8006568:	465a      	mov	r2, fp
 800656a:	1e7b      	subs	r3, r7, #1
 800656c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8006570:	47a8      	blx	r5
 8006572:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8006576:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006578:	4631      	mov	r1, r6
 800657a:	4798      	blx	r3
 800657c:	4656      	mov	r6, sl
 800657e:	4653      	mov	r3, sl
 8006580:	e7de      	b.n	8006540 <_DrawBitmap+0x484>
 8006582:	4653      	mov	r3, sl
 8006584:	e7dc      	b.n	8006540 <_DrawBitmap+0x484>
 8006586:	9f08      	ldr	r7, [sp, #32]
 8006588:	1e6b      	subs	r3, r5, #1
 800658a:	443b      	add	r3, r7
 800658c:	b196      	cbz	r6, 80065b4 <_DrawBitmap+0x4f8>
 800658e:	f8cd b000 	str.w	fp, [sp]
 8006592:	4620      	mov	r0, r4
 8006594:	4649      	mov	r1, r9
 8006596:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800659a:	465a      	mov	r2, fp
 800659c:	47a8      	blx	r5
 800659e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80065a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80065a4:	4631      	mov	r1, r6
 80065a6:	e004      	b.n	80065b2 <_DrawBitmap+0x4f6>
 80065a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80065ac:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 80065b0:	9905      	ldr	r1, [sp, #20]
 80065b2:	4798      	blx	r3
 80065b4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80065b6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80065b8:	442f      	add	r7, r5
 80065ba:	9719      	str	r7, [sp, #100]	; 0x64
 80065bc:	f10b 0b01 	add.w	fp, fp, #1
 80065c0:	e5a7      	b.n	8006112 <_DrawBitmap+0x56>
 80065c2:	b00d      	add	sp, #52	; 0x34
 80065c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c8:	200001b0 	.word	0x200001b0

080065cc <GUIDRV_FlexColor_SetMode16bppC0B16>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4604      	mov	r4, r0
 80065d0:	f000 fa58 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 80065d4:	68a4      	ldr	r4, [r4, #8]
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 80065d8:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 80065de:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80065e2:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 80065e4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80065e8:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 80065ea:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 80065f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 80065f6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80065fa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80065fe:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8006602:	4620      	mov	r0, r4
 8006604:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006608:	2110      	movs	r1, #16
 800660a:	4798      	blx	r3
 800660c:	2310      	movs	r3, #16
 800660e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 8006612:	6463      	str	r3, [r4, #68]	; 0x44
 8006614:	bd10      	pop	{r4, pc}
 8006616:	bf00      	nop
 8006618:	080060bd 	.word	0x080060bd
 800661c:	08005fbd 	.word	0x08005fbd
 8006620:	080069d3 	.word	0x080069d3
 8006624:	08006943 	.word	0x08006943
 8006628:	08005fa5 	.word	0x08005fa5
 800662c:	08005faf 	.word	0x08005faf
 8006630:	08012220 	.word	0x08012220

08006634 <_Log2PhysX_X0Y0S0>:
 8006634:	4608      	mov	r0, r1
 8006636:	4770      	bx	lr

08006638 <_Log2PhysX_X1Y0S0>:
 8006638:	6800      	ldr	r0, [r0, #0]
 800663a:	1a40      	subs	r0, r0, r1
 800663c:	3801      	subs	r0, #1
 800663e:	4770      	bx	lr

08006640 <_Log2PhysX_X0Y1S0>:
 8006640:	4608      	mov	r0, r1
 8006642:	4770      	bx	lr

08006644 <_Log2PhysX_X1Y1S0>:
 8006644:	6800      	ldr	r0, [r0, #0]
 8006646:	1a40      	subs	r0, r0, r1
 8006648:	3801      	subs	r0, #1
 800664a:	4770      	bx	lr

0800664c <_Log2PhysX_X0Y0S1>:
 800664c:	4610      	mov	r0, r2
 800664e:	4770      	bx	lr

08006650 <_Log2PhysX_X1Y0S1>:
 8006650:	6840      	ldr	r0, [r0, #4]
 8006652:	1a80      	subs	r0, r0, r2
 8006654:	3801      	subs	r0, #1
 8006656:	4770      	bx	lr

08006658 <_Log2PhysX_X0Y1S1>:
 8006658:	4610      	mov	r0, r2
 800665a:	4770      	bx	lr

0800665c <_Log2PhysX_X1Y1S1>:
 800665c:	6840      	ldr	r0, [r0, #4]
 800665e:	1a80      	subs	r0, r0, r2
 8006660:	3801      	subs	r0, #1
 8006662:	4770      	bx	lr

08006664 <_Log2PhysY_X0Y0S0>:
 8006664:	4610      	mov	r0, r2
 8006666:	4770      	bx	lr

08006668 <_Log2PhysY_X1Y0S0>:
 8006668:	4610      	mov	r0, r2
 800666a:	4770      	bx	lr

0800666c <_Log2PhysY_X0Y1S0>:
 800666c:	6840      	ldr	r0, [r0, #4]
 800666e:	1a80      	subs	r0, r0, r2
 8006670:	3801      	subs	r0, #1
 8006672:	4770      	bx	lr

08006674 <_Log2PhysY_X1Y1S0>:
 8006674:	6840      	ldr	r0, [r0, #4]
 8006676:	1a80      	subs	r0, r0, r2
 8006678:	3801      	subs	r0, #1
 800667a:	4770      	bx	lr

0800667c <_Log2PhysY_X0Y0S1>:
 800667c:	4608      	mov	r0, r1
 800667e:	4770      	bx	lr

08006680 <_Log2PhysY_X1Y0S1>:
 8006680:	4608      	mov	r0, r1
 8006682:	4770      	bx	lr

08006684 <_Log2PhysY_X0Y1S1>:
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	1a40      	subs	r0, r0, r1
 8006688:	3801      	subs	r0, #1
 800668a:	4770      	bx	lr

0800668c <_Log2PhysY_X1Y1S1>:
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	1a40      	subs	r0, r0, r1
 8006690:	3801      	subs	r0, #1
 8006692:	4770      	bx	lr

08006694 <_SetPixelIndex>:
 8006694:	b510      	push	{r4, lr}
 8006696:	6884      	ldr	r4, [r0, #8]
 8006698:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800669c:	47a0      	blx	r4
 800669e:	bd10      	pop	{r4, pc}

080066a0 <_GetPixelIndex>:
 80066a0:	b508      	push	{r3, lr}
 80066a2:	6883      	ldr	r3, [r0, #8]
 80066a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80066a8:	4798      	blx	r3
 80066aa:	bd08      	pop	{r3, pc}

080066ac <_XorPixel>:
 80066ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ae:	4604      	mov	r4, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	4616      	mov	r6, r2
 80066b4:	6885      	ldr	r5, [r0, #8]
 80066b6:	f7ff fff3 	bl	80066a0 <_GetPixelIndex>
 80066ba:	9001      	str	r0, [sp, #4]
 80066bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80066c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80066c2:	4620      	mov	r0, r4
 80066c4:	4639      	mov	r1, r7
 80066c6:	4632      	mov	r2, r6
 80066c8:	ea8e 0303 	eor.w	r3, lr, r3
 80066cc:	f7ff ffe2 	bl	8006694 <_SetPixelIndex>
 80066d0:	b003      	add	sp, #12
 80066d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066d4 <_DrawHLine>:
 80066d4:	b513      	push	{r0, r1, r4, lr}
 80066d6:	6884      	ldr	r4, [r0, #8]
 80066d8:	9200      	str	r2, [sp, #0]
 80066da:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 80066de:	47a0      	blx	r4
 80066e0:	b002      	add	sp, #8
 80066e2:	bd10      	pop	{r4, pc}

080066e4 <_DrawVLine>:
 80066e4:	b513      	push	{r0, r1, r4, lr}
 80066e6:	6884      	ldr	r4, [r0, #8]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 80066ee:	460b      	mov	r3, r1
 80066f0:	47a0      	blx	r4
 80066f2:	b002      	add	sp, #8
 80066f4:	bd10      	pop	{r4, pc}

080066f6 <_FillRect>:
 80066f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f8:	9c06      	ldr	r4, [sp, #24]
 80066fa:	6885      	ldr	r5, [r0, #8]
 80066fc:	9400      	str	r4, [sp, #0]
 80066fe:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8006702:	47a0      	blx	r4
 8006704:	b003      	add	sp, #12
 8006706:	bd30      	pop	{r4, r5, pc}

08006708 <_DrawBitmap>:
 8006708:	b530      	push	{r4, r5, lr}
 800670a:	b087      	sub	sp, #28
 800670c:	6885      	ldr	r5, [r0, #8]
 800670e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006710:	9400      	str	r4, [sp, #0]
 8006712:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006714:	9401      	str	r4, [sp, #4]
 8006716:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006718:	9402      	str	r4, [sp, #8]
 800671a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800671c:	9403      	str	r4, [sp, #12]
 800671e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006720:	9404      	str	r4, [sp, #16]
 8006722:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006724:	9405      	str	r4, [sp, #20]
 8006726:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800672a:	47a0      	blx	r4
 800672c:	b007      	add	sp, #28
 800672e:	bd30      	pop	{r4, r5, pc}

08006730 <_GetDevFunc_SetRect>:
 8006730:	4770      	bx	lr
	...

08006734 <_GetDevFunc_SetRectOutside>:
 8006734:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006736:	9e07      	ldr	r6, [sp, #28]
 8006738:	6884      	ldr	r4, [r0, #8]
 800673a:	4d0c      	ldr	r5, [pc, #48]	; (800676c <_GetDevFunc_SetRectOutside+0x38>)
 800673c:	b176      	cbz	r6, 800675c <_GetDevFunc_SetRectOutside+0x28>
 800673e:	6828      	ldr	r0, [r5, #0]
 8006740:	b988      	cbnz	r0, 8006766 <_GetDevFunc_SetRectOutside+0x32>
 8006742:	9806      	ldr	r0, [sp, #24]
 8006744:	9000      	str	r0, [sp, #0]
 8006746:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800674a:	4620      	mov	r0, r4
 800674c:	47b0      	blx	r6
 800674e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8006752:	602b      	str	r3, [r5, #0]
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <_GetDevFunc_SetRectOutside+0x3c>)
 8006756:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800675a:	e004      	b.n	8006766 <_GetDevFunc_SetRectOutside+0x32>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	b113      	cbz	r3, 8006766 <_GetDevFunc_SetRectOutside+0x32>
 8006760:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8006764:	602e      	str	r6, [r5, #0]
 8006766:	b002      	add	sp, #8
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	bf00      	nop
 800676c:	20019264 	.word	0x20019264
 8006770:	08006731 	.word	0x08006731

08006774 <_ReadPixelCust_16bpp>:
 8006774:	b508      	push	{r3, lr}
 8006776:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006778:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800677c:	6990      	ldr	r0, [r2, #24]
 800677e:	4798      	blx	r3
 8006780:	bd08      	pop	{r3, pc}

08006782 <_ReadPixelCust_18bpp>:
 8006782:	b508      	push	{r3, lr}
 8006784:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006786:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800678a:	6990      	ldr	r0, [r2, #24]
 800678c:	4798      	blx	r3
 800678e:	bd08      	pop	{r3, pc}

08006790 <_ReadRectCust_16bpp>:
 8006790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006794:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006796:	6884      	ldr	r4, [r0, #8]
 8006798:	9500      	str	r5, [sp, #0]
 800679a:	4617      	mov	r7, r2
 800679c:	4620      	mov	r0, r4
 800679e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80067a2:	4699      	mov	r9, r3
 80067a4:	4688      	mov	r8, r1
 80067a6:	1bed      	subs	r5, r5, r7
 80067a8:	47b0      	blx	r6
 80067aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067ac:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80067b0:	6988      	ldr	r0, [r1, #24]
 80067b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067b4:	ebc8 0809 	rsb	r8, r8, r9
 80067b8:	1c6a      	adds	r2, r5, #1
 80067ba:	fb08 2202 	mla	r2, r8, r2, r2
 80067be:	4798      	blx	r3
 80067c0:	b003      	add	sp, #12
 80067c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080067c6 <_ReadRectCust_18bpp>:
 80067c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80067cc:	6884      	ldr	r4, [r0, #8]
 80067ce:	9500      	str	r5, [sp, #0]
 80067d0:	4617      	mov	r7, r2
 80067d2:	4620      	mov	r0, r4
 80067d4:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80067d8:	4699      	mov	r9, r3
 80067da:	4688      	mov	r8, r1
 80067dc:	1bed      	subs	r5, r5, r7
 80067de:	47b0      	blx	r6
 80067e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80067e6:	6988      	ldr	r0, [r1, #24]
 80067e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ea:	ebc8 0809 	rsb	r8, r8, r9
 80067ee:	1c6a      	adds	r2, r5, #1
 80067f0:	fb08 2202 	mla	r2, r8, r2, r2
 80067f4:	4798      	blx	r3
 80067f6:	b003      	add	sp, #12
 80067f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080067fc <_GetDevFunc>:
 80067fc:	3901      	subs	r1, #1
 80067fe:	2917      	cmp	r1, #23
 8006800:	d824      	bhi.n	800684c <_GetDevFunc+0x50>
 8006802:	e8df f001 	tbb	[pc, r1]
 8006806:	2310      	.short	0x2310
 8006808:	23232323 	.word	0x23232323
 800680c:	0c232323 	.word	0x0c232323
 8006810:	23150e25 	.word	0x23150e25
 8006814:	23232323 	.word	0x23232323
 8006818:	1f232323 	.word	0x1f232323
 800681c:	211a      	.short	0x211a
 800681e:	480d      	ldr	r0, [pc, #52]	; (8006854 <_GetDevFunc+0x58>)
 8006820:	4770      	bx	lr
 8006822:	480d      	ldr	r0, [pc, #52]	; (8006858 <_GetDevFunc+0x5c>)
 8006824:	4770      	bx	lr
 8006826:	6803      	ldr	r3, [r0, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800682e:	4770      	bx	lr
 8006830:	6803      	ldr	r3, [r0, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8006838:	4770      	bx	lr
 800683a:	6803      	ldr	r3, [r0, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8006842:	4770      	bx	lr
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <_GetDevFunc+0x60>)
 8006846:	4770      	bx	lr
 8006848:	4805      	ldr	r0, [pc, #20]	; (8006860 <_GetDevFunc+0x64>)
 800684a:	4770      	bx	lr
 800684c:	2000      	movs	r0, #0
 800684e:	4770      	bx	lr
 8006850:	4804      	ldr	r0, [pc, #16]	; (8006864 <_GetDevFunc+0x68>)
 8006852:	4770      	bx	lr
 8006854:	08006bb3 	.word	0x08006bb3
 8006858:	08006b55 	.word	0x08006b55
 800685c:	08006ab9 	.word	0x08006ab9
 8006860:	08006735 	.word	0x08006735
 8006864:	08006b9f 	.word	0x08006b9f

08006868 <_GetDevProp>:
 8006868:	3901      	subs	r1, #1
 800686a:	6880      	ldr	r0, [r0, #8]
 800686c:	290d      	cmp	r1, #13
 800686e:	d823      	bhi.n	80068b8 <_GetDevProp+0x50>
 8006870:	e8df f001 	tbb	[pc, r1]
 8006874:	0f0d0b09 	.word	0x0f0d0b09
 8006878:	11222222 	.word	0x11222222
 800687c:	13252507 	.word	0x13252507
 8006880:	1d18      	.short	0x1d18
 8006882:	2000      	movs	r0, #0
 8006884:	4770      	bx	lr
 8006886:	6800      	ldr	r0, [r0, #0]
 8006888:	4770      	bx	lr
 800688a:	6840      	ldr	r0, [r0, #4]
 800688c:	4770      	bx	lr
 800688e:	6880      	ldr	r0, [r0, #8]
 8006890:	4770      	bx	lr
 8006892:	68c0      	ldr	r0, [r0, #12]
 8006894:	4770      	bx	lr
 8006896:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006898:	4770      	bx	lr
 800689a:	b188      	cbz	r0, 80068c0 <_GetDevProp+0x58>
 800689c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800689e:	f000 0001 	and.w	r0, r0, #1
 80068a2:	4770      	bx	lr
 80068a4:	b160      	cbz	r0, 80068c0 <_GetDevProp+0x58>
 80068a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80068a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80068ac:	4770      	bx	lr
 80068ae:	b138      	cbz	r0, 80068c0 <_GetDevProp+0x58>
 80068b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80068b2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80068b6:	4770      	bx	lr
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	4770      	bx	lr
 80068be:	2001      	movs	r0, #1
 80068c0:	4770      	bx	lr

080068c2 <_GetDevData>:
 80068c2:	6883      	ldr	r3, [r0, #8]
 80068c4:	2901      	cmp	r1, #1
 80068c6:	bf0c      	ite	eq
 80068c8:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 80068ca:	2000      	movne	r0, #0
 80068cc:	4770      	bx	lr

080068ce <_GetRect>:
 80068ce:	6883      	ldr	r3, [r0, #8]
 80068d0:	2200      	movs	r2, #0
 80068d2:	800a      	strh	r2, [r1, #0]
 80068d4:	804a      	strh	r2, [r1, #2]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	3a01      	subs	r2, #1
 80068dc:	3b01      	subs	r3, #1
 80068de:	808a      	strh	r2, [r1, #4]
 80068e0:	80cb      	strh	r3, [r1, #6]
 80068e2:	4770      	bx	lr

080068e4 <GUIDRV_FlexColor__SetLog2Phys>:
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	4d10      	ldr	r5, [pc, #64]	; (8006928 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 80068e8:	462e      	mov	r6, r5
 80068ea:	4607      	mov	r7, r0
 80068ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80068ee:	b091      	sub	sp, #68	; 0x44
 80068f0:	466c      	mov	r4, sp
 80068f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80068f8:	3520      	adds	r5, #32
 80068fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80068fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006900:	ac08      	add	r4, sp, #32
 8006902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006904:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	aa10      	add	r2, sp, #64	; 0x40
 8006910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006914:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8006918:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800691c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006920:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006924:	b011      	add	sp, #68	; 0x44
 8006926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006928:	0800fb1c 	.word	0x0800fb1c

0800692c <_SetOrg>:
 800692c:	b507      	push	{r0, r1, r2, lr}
 800692e:	6980      	ldr	r0, [r0, #24]
 8006930:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006934:	2103      	movs	r1, #3
 8006936:	466a      	mov	r2, sp
 8006938:	f7fe fc10 	bl	800515c <LCD_X_DisplayDriver>
 800693c:	b003      	add	sp, #12
 800693e:	f85d fb04 	ldr.w	pc, [sp], #4

08006942 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8006942:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006946:	6884      	ldr	r4, [r0, #8]
 8006948:	4698      	mov	r8, r3
 800694a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800694c:	079b      	lsls	r3, r3, #30
 800694e:	4689      	mov	r9, r1
 8006950:	4617      	mov	r7, r2
 8006952:	d532      	bpl.n	80069ba <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 8006954:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006958:	4620      	mov	r0, r4
 800695a:	4798      	blx	r3
 800695c:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8006960:	4606      	mov	r6, r0
 8006962:	463a      	mov	r2, r7
 8006964:	4620      	mov	r0, r4
 8006966:	4649      	mov	r1, r9
 8006968:	47a8      	blx	r5
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	69a2      	ldr	r2, [r4, #24]
 800696e:	429e      	cmp	r6, r3
 8006970:	bfac      	ite	ge
 8006972:	2300      	movge	r3, #0
 8006974:	2301      	movlt	r3, #1
 8006976:	4296      	cmp	r6, r2
 8006978:	bfd4      	ite	le
 800697a:	461a      	movle	r2, r3
 800697c:	f043 0201 	orrgt.w	r2, r3, #1
 8006980:	6963      	ldr	r3, [r4, #20]
 8006982:	4298      	cmp	r0, r3
 8006984:	bfac      	ite	ge
 8006986:	4613      	movge	r3, r2
 8006988:	f042 0301 	orrlt.w	r3, r2, #1
 800698c:	4605      	mov	r5, r0
 800698e:	b913      	cbnz	r3, 8006996 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 8006990:	69e3      	ldr	r3, [r4, #28]
 8006992:	4298      	cmp	r0, r3
 8006994:	dd0a      	ble.n	80069ac <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	3a01      	subs	r2, #1
 800699c:	9200      	str	r2, [sp, #0]
 800699e:	2100      	movs	r1, #0
 80069a0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80069a4:	4620      	mov	r0, r4
 80069a6:	460a      	mov	r2, r1
 80069a8:	3b01      	subs	r3, #1
 80069aa:	47b8      	blx	r7
 80069ac:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 80069b0:	4620      	mov	r0, r4
 80069b2:	4631      	mov	r1, r6
 80069b4:	462a      	mov	r2, r5
 80069b6:	47b8      	blx	r7
 80069b8:	e003      	b.n	80069c2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 80069ba:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 80069be:	4620      	mov	r0, r4
 80069c0:	47a8      	blx	r5
 80069c2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80069c6:	4620      	mov	r0, r4
 80069c8:	4641      	mov	r1, r8
 80069ca:	4798      	blx	r3
 80069cc:	b003      	add	sp, #12
 80069ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080069d2 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 80069d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069d4:	6884      	ldr	r4, [r0, #8]
 80069d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80069d8:	079b      	lsls	r3, r3, #30
 80069da:	460f      	mov	r7, r1
 80069dc:	4616      	mov	r6, r2
 80069de:	d545      	bpl.n	8006a6c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 80069e0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80069e4:	4620      	mov	r0, r4
 80069e6:	4798      	blx	r3
 80069e8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80069ec:	4632      	mov	r2, r6
 80069ee:	4605      	mov	r5, r0
 80069f0:	4639      	mov	r1, r7
 80069f2:	4620      	mov	r0, r4
 80069f4:	4798      	blx	r3
 80069f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80069fa:	4606      	mov	r6, r0
 80069fc:	b11b      	cbz	r3, 8006a06 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 80069fe:	4620      	mov	r0, r4
 8006a00:	2101      	movs	r1, #1
 8006a02:	2200      	movs	r2, #0
 8006a04:	4798      	blx	r3
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	69a2      	ldr	r2, [r4, #24]
 8006a0a:	429d      	cmp	r5, r3
 8006a0c:	bfac      	ite	ge
 8006a0e:	2300      	movge	r3, #0
 8006a10:	2301      	movlt	r3, #1
 8006a12:	4295      	cmp	r5, r2
 8006a14:	bfd4      	ite	le
 8006a16:	461a      	movle	r2, r3
 8006a18:	f043 0201 	orrgt.w	r2, r3, #1
 8006a1c:	6963      	ldr	r3, [r4, #20]
 8006a1e:	429e      	cmp	r6, r3
 8006a20:	bfac      	ite	ge
 8006a22:	4613      	movge	r3, r2
 8006a24:	f042 0301 	orrlt.w	r3, r2, #1
 8006a28:	b913      	cbnz	r3, 8006a30 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 8006a2a:	69e3      	ldr	r3, [r4, #28]
 8006a2c:	429e      	cmp	r6, r3
 8006a2e:	dd0a      	ble.n	8006a46 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	3a01      	subs	r2, #1
 8006a36:	9200      	str	r2, [sp, #0]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006a3e:	4620      	mov	r0, r4
 8006a40:	460a      	mov	r2, r1
 8006a42:	3b01      	subs	r3, #1
 8006a44:	47b8      	blx	r7
 8006a46:	4629      	mov	r1, r5
 8006a48:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4632      	mov	r2, r6
 8006a50:	4798      	blx	r3
 8006a52:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006a56:	4620      	mov	r0, r4
 8006a58:	4798      	blx	r3
 8006a5a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006a5e:	4605      	mov	r5, r0
 8006a60:	b16b      	cbz	r3, 8006a7e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8006a62:	4620      	mov	r0, r4
 8006a64:	2100      	movs	r1, #0
 8006a66:	2201      	movs	r2, #1
 8006a68:	4798      	blx	r3
 8006a6a:	e008      	b.n	8006a7e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8006a6c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006a70:	4620      	mov	r0, r4
 8006a72:	4798      	blx	r3
 8006a74:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4798      	blx	r3
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	4628      	mov	r0, r5
 8006a80:	b003      	add	sp, #12
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a84 <GUIDRV_FlexColor__InitOnce>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	6885      	ldr	r5, [r0, #8]
 8006a88:	4604      	mov	r4, r0
 8006a8a:	b995      	cbnz	r5, 8006ab2 <GUIDRV_FlexColor__InitOnce+0x2e>
 8006a8c:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006a90:	f001 fd7c 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 8006a94:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006a98:	60a0      	str	r0, [r4, #8]
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	f000 f970 	bl	8006d80 <GUI__memset>
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	84da      	strh	r2, [r3, #38]	; 0x26
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	621a      	str	r2, [r3, #32]
 8006aaa:	4a02      	ldr	r2, [pc, #8]	; (8006ab4 <GUIDRV_FlexColor__InitOnce+0x30>)
 8006aac:	641c      	str	r4, [r3, #64]	; 0x40
 8006aae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	080068e5 	.word	0x080068e5

08006ab8 <_SetDevFunc>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4606      	mov	r6, r0
 8006abc:	460d      	mov	r5, r1
 8006abe:	4614      	mov	r4, r2
 8006ac0:	f7ff ffe0 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8006ac4:	68b3      	ldr	r3, [r6, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d03b      	beq.n	8006b42 <_SetDevFunc+0x8a>
 8006aca:	2d26      	cmp	r5, #38	; 0x26
 8006acc:	d002      	beq.n	8006ad4 <_SetDevFunc+0x1c>
 8006ace:	2d27      	cmp	r5, #39	; 0x27
 8006ad0:	d016      	beq.n	8006b00 <_SetDevFunc+0x48>
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad6:	2a10      	cmp	r2, #16
 8006ad8:	d002      	beq.n	8006ae0 <_SetDevFunc+0x28>
 8006ada:	2a12      	cmp	r2, #18
 8006adc:	d008      	beq.n	8006af0 <_SetDevFunc+0x38>
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <_SetDevFunc+0x8c>)
 8006ae2:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 8006ae6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006aea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <_SetDevFunc+0x90>)
 8006af2:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8006af6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8006afa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b02:	2a10      	cmp	r2, #16
 8006b04:	d002      	beq.n	8006b0c <_SetDevFunc+0x54>
 8006b06:	2a12      	cmp	r2, #18
 8006b08:	d00e      	beq.n	8006b28 <_SetDevFunc+0x70>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	b13c      	cbz	r4, 8006b1e <_SetDevFunc+0x66>
 8006b0e:	4a0f      	ldr	r2, [pc, #60]	; (8006b4c <_SetDevFunc+0x94>)
 8006b10:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 8006b14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8006b18:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8006b22:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 8006b26:	bd70      	pop	{r4, r5, r6, pc}
 8006b28:	b13c      	cbz	r4, 8006b3a <_SetDevFunc+0x82>
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <_SetDevFunc+0x98>)
 8006b2c:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8006b30:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8006b34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006b38:	bd70      	pop	{r4, r5, r6, pc}
 8006b3a:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 8006b3e:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	08006775 	.word	0x08006775
 8006b48:	08006783 	.word	0x08006783
 8006b4c:	08006791 	.word	0x08006791
 8006b50:	080067c7 	.word	0x080067c7

08006b54 <_GetDevFunc_Init>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4605      	mov	r5, r0
 8006b58:	f7ff ff94 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8006b5c:	68ac      	ldr	r4, [r5, #8]
 8006b5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b62:	f001 fd13 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 8006b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b68:	66a0      	str	r0, [r4, #104]	; 0x68
 8006b6a:	3307      	adds	r3, #7
 8006b6c:	10d8      	asrs	r0, r3, #3
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	4358      	muls	r0, r3
 8006b72:	f001 fd0b 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 8006b76:	2101      	movs	r1, #1
 8006b78:	2200      	movs	r2, #0
 8006b7a:	66e0      	str	r0, [r4, #108]	; 0x6c
 8006b7c:	69a8      	ldr	r0, [r5, #24]
 8006b7e:	f7fe faed 	bl	800515c <LCD_X_DisplayDriver>
 8006b82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006b86:	4605      	mov	r5, r0
 8006b88:	4620      	mov	r0, r4
 8006b8a:	4798      	blx	r3
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006b92:	4798      	blx	r3
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	bfd4      	ite	le
 8006b98:	2000      	movle	r0, #0
 8006b9a:	2001      	movgt	r0, #1
 8006b9c:	bd38      	pop	{r3, r4, r5, pc}

08006b9e <_GetDevFunc_SetSize>:
 8006b9e:	b570      	push	{r4, r5, r6, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	f7ff ff6d 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8006baa:	68a3      	ldr	r3, [r4, #8]
 8006bac:	e883 0060 	stmia.w	r3, {r5, r6}
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}

08006bb2 <_GetDevFunc_SetVSize>:
 8006bb2:	b570      	push	{r4, r5, r6, lr}
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	4616      	mov	r6, r2
 8006bba:	f7ff ff63 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8006bbe:	68a3      	ldr	r3, [r4, #8]
 8006bc0:	609d      	str	r5, [r3, #8]
 8006bc2:	60de      	str	r6, [r3, #12]
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}

08006bc6 <GUIDRV_FlexColor_Config>:
 8006bc6:	b538      	push	{r3, r4, r5, lr}
 8006bc8:	4605      	mov	r5, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	f7ff ff5a 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8006bd0:	68ab      	ldr	r3, [r5, #8]
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bd6:	6862      	ldr	r2, [r4, #4]
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8006bda:	68a2      	ldr	r2, [r4, #8]
 8006bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8006bde:	0752      	lsls	r2, r2, #29
 8006be0:	d507      	bpl.n	8006bf2 <GUIDRV_FlexColor_Config+0x2c>
 8006be2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	6059      	str	r1, [r3, #4]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	6899      	ldr	r1, [r3, #8]
 8006bee:	60d9      	str	r1, [r3, #12]
 8006bf0:	609a      	str	r2, [r3, #8]
 8006bf2:	89a2      	ldrh	r2, [r4, #12]
 8006bf4:	849a      	strh	r2, [r3, #36]	; 0x24
 8006bf6:	6922      	ldr	r2, [r4, #16]
 8006bf8:	b112      	cbz	r2, 8006c00 <GUIDRV_FlexColor_Config+0x3a>
 8006bfa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006bfe:	621a      	str	r2, [r3, #32]
 8006c00:	bd38      	pop	{r3, r4, r5, pc}

08006c02 <GUIDRV_FlexColor_SetFunc>:
 8006c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c06:	4604      	mov	r4, r0
 8006c08:	461f      	mov	r7, r3
 8006c0a:	4616      	mov	r6, r2
 8006c0c:	4688      	mov	r8, r1
 8006c0e:	f7ff ff39 	bl	8006a84 <GUIDRV_FlexColor__InitOnce>
 8006c12:	68a5      	ldr	r5, [r4, #8]
 8006c14:	4641      	mov	r1, r8
 8006c16:	2268      	movs	r2, #104	; 0x68
 8006c18:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8006c1c:	f008 fb5f 	bl	800f2de <memcpy>
 8006c20:	4620      	mov	r0, r4
 8006c22:	47b0      	blx	r6
 8006c24:	4620      	mov	r0, r4
 8006c26:	47b8      	blx	r7
 8006c28:	6923      	ldr	r3, [r4, #16]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4798      	blx	r3
 8006c2e:	62a8      	str	r0, [r5, #40]	; 0x28
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c34 <LCD_SetVSizeEx>:
 8006c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c36:	460d      	mov	r5, r1
 8006c38:	4614      	mov	r4, r2
 8006c3a:	f000 fe01 	bl	8007840 <GUI_DEVICE__GetpDriver>
 8006c3e:	9001      	str	r0, [sp, #4]
 8006c40:	b908      	cbnz	r0, 8006c46 <LCD_SetVSizeEx+0x12>
 8006c42:	2001      	movs	r0, #1
 8006c44:	e00c      	b.n	8006c60 <LCD_SetVSizeEx+0x2c>
 8006c46:	68c3      	ldr	r3, [r0, #12]
 8006c48:	210a      	movs	r1, #10
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	a801      	add	r0, sp, #4
 8006c4e:	4798      	blx	r3
 8006c50:	4603      	mov	r3, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0f5      	beq.n	8006c42 <LCD_SetVSizeEx+0xe>
 8006c56:	9801      	ldr	r0, [sp, #4]
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4798      	blx	r3
 8006c5e:	2000      	movs	r0, #0
 8006c60:	b003      	add	sp, #12
 8006c62:	bd30      	pop	{r4, r5, pc}

08006c64 <LCD_SetSizeEx>:
 8006c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c66:	460d      	mov	r5, r1
 8006c68:	4614      	mov	r4, r2
 8006c6a:	f000 fde9 	bl	8007840 <GUI_DEVICE__GetpDriver>
 8006c6e:	9001      	str	r0, [sp, #4]
 8006c70:	b908      	cbnz	r0, 8006c76 <LCD_SetSizeEx+0x12>
 8006c72:	2001      	movs	r0, #1
 8006c74:	e00c      	b.n	8006c90 <LCD_SetSizeEx+0x2c>
 8006c76:	68c3      	ldr	r3, [r0, #12]
 8006c78:	210b      	movs	r1, #11
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	a801      	add	r0, sp, #4
 8006c7e:	4798      	blx	r3
 8006c80:	4603      	mov	r3, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0f5      	beq.n	8006c72 <LCD_SetSizeEx+0xe>
 8006c86:	9801      	ldr	r0, [sp, #4]
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4798      	blx	r3
 8006c8e:	2000      	movs	r0, #0
 8006c90:	b003      	add	sp, #12
 8006c92:	bd30      	pop	{r4, r5, pc}

08006c94 <LCD_SetPosEx>:
 8006c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c96:	460d      	mov	r5, r1
 8006c98:	4614      	mov	r4, r2
 8006c9a:	f000 fdd1 	bl	8007840 <GUI_DEVICE__GetpDriver>
 8006c9e:	9001      	str	r0, [sp, #4]
 8006ca0:	b908      	cbnz	r0, 8006ca6 <LCD_SetPosEx+0x12>
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e00c      	b.n	8006cc0 <LCD_SetPosEx+0x2c>
 8006ca6:	68c3      	ldr	r3, [r0, #12]
 8006ca8:	2103      	movs	r1, #3
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	a801      	add	r0, sp, #4
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d0f5      	beq.n	8006ca2 <LCD_SetPosEx+0xe>
 8006cb6:	9801      	ldr	r0, [sp, #4]
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4622      	mov	r2, r4
 8006cbc:	4798      	blx	r3
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bd30      	pop	{r4, r5, pc}

08006cc4 <LCD_SetLUTEntryEx>:
 8006cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	f000 fdb9 	bl	8007840 <GUI_DEVICE__GetpDriver>
 8006cce:	9001      	str	r0, [sp, #4]
 8006cd0:	b908      	cbnz	r0, 8006cd6 <LCD_SetLUTEntryEx+0x12>
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	e00c      	b.n	8006cf0 <LCD_SetLUTEntryEx+0x2c>
 8006cd6:	68c3      	ldr	r3, [r0, #12]
 8006cd8:	2110      	movs	r1, #16
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	a801      	add	r0, sp, #4
 8006cde:	4798      	blx	r3
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d0f5      	beq.n	8006cd2 <LCD_SetLUTEntryEx+0xe>
 8006ce6:	9801      	ldr	r0, [sp, #4]
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4622      	mov	r2, r4
 8006cec:	4798      	blx	r3
 8006cee:	2000      	movs	r0, #0
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bd30      	pop	{r4, r5, pc}

08006cf4 <LCD_GetPosEx>:
 8006cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	f000 fda1 	bl	8007840 <GUI_DEVICE__GetpDriver>
 8006cfe:	9001      	str	r0, [sp, #4]
 8006d00:	b908      	cbnz	r0, 8006d06 <LCD_GetPosEx+0x12>
 8006d02:	2001      	movs	r0, #1
 8006d04:	e00c      	b.n	8006d20 <LCD_GetPosEx+0x2c>
 8006d06:	68c3      	ldr	r3, [r0, #12]
 8006d08:	2104      	movs	r1, #4
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	a801      	add	r0, sp, #4
 8006d0e:	4798      	blx	r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d0f5      	beq.n	8006d02 <LCD_GetPosEx+0xe>
 8006d16:	9801      	ldr	r0, [sp, #4]
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	4798      	blx	r3
 8006d1e:	2000      	movs	r0, #0
 8006d20:	b003      	add	sp, #12
 8006d22:	bd30      	pop	{r4, r5, pc}

08006d24 <GUI__memset16>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	0784      	lsls	r4, r0, #30
 8006d28:	d502      	bpl.n	8006d30 <GUI__memset16+0xc>
 8006d2a:	8001      	strh	r1, [r0, #0]
 8006d2c:	3a01      	subs	r2, #1
 8006d2e:	3002      	adds	r0, #2
 8006d30:	0855      	lsrs	r5, r2, #1
 8006d32:	462b      	mov	r3, r5
 8006d34:	b305      	cbz	r5, 8006d78 <GUI__memset16+0x54>
 8006d36:	2d03      	cmp	r5, #3
 8006d38:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8006d3c:	dc02      	bgt.n	8006d44 <GUI__memset16+0x20>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	461d      	mov	r5, r3
 8006d42:	e012      	b.n	8006d6a <GUI__memset16+0x46>
 8006d44:	4603      	mov	r3, r0
 8006d46:	462e      	mov	r6, r5
 8006d48:	3e04      	subs	r6, #4
 8006d4a:	2e03      	cmp	r6, #3
 8006d4c:	601c      	str	r4, [r3, #0]
 8006d4e:	605c      	str	r4, [r3, #4]
 8006d50:	609c      	str	r4, [r3, #8]
 8006d52:	60dc      	str	r4, [r3, #12]
 8006d54:	f103 0310 	add.w	r3, r3, #16
 8006d58:	dcf6      	bgt.n	8006d48 <GUI__memset16+0x24>
 8006d5a:	3d04      	subs	r5, #4
 8006d5c:	08ab      	lsrs	r3, r5, #2
 8006d5e:	1c5e      	adds	r6, r3, #1
 8006d60:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8006d64:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8006d68:	e7e9      	b.n	8006d3e <GUI__memset16+0x1a>
 8006d6a:	b11d      	cbz	r5, 8006d74 <GUI__memset16+0x50>
 8006d6c:	f846 4b04 	str.w	r4, [r6], #4
 8006d70:	3d01      	subs	r5, #1
 8006d72:	e7fa      	b.n	8006d6a <GUI__memset16+0x46>
 8006d74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006d78:	07d3      	lsls	r3, r2, #31
 8006d7a:	bf48      	it	mi
 8006d7c:	8001      	strhmi	r1, [r0, #0]
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}

08006d80 <GUI__memset>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	b12a      	cbz	r2, 8006d90 <GUI__memset+0x10>
 8006d84:	0783      	lsls	r3, r0, #30
 8006d86:	d003      	beq.n	8006d90 <GUI__memset+0x10>
 8006d88:	f800 1b01 	strb.w	r1, [r0], #1
 8006d8c:	3a01      	subs	r2, #1
 8006d8e:	e7f8      	b.n	8006d82 <GUI__memset+0x2>
 8006d90:	0893      	lsrs	r3, r2, #2
 8006d92:	d101      	bne.n	8006d98 <GUI__memset+0x18>
 8006d94:	4402      	add	r2, r0
 8006d96:	e017      	b.n	8006dc8 <GUI__memset+0x48>
 8006d98:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8006d9c:	f002 0203 	and.w	r2, r2, #3
 8006da0:	434c      	muls	r4, r1
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	4605      	mov	r5, r0
 8006da6:	dd06      	ble.n	8006db6 <GUI__memset+0x36>
 8006da8:	6004      	str	r4, [r0, #0]
 8006daa:	6044      	str	r4, [r0, #4]
 8006dac:	6084      	str	r4, [r0, #8]
 8006dae:	60c4      	str	r4, [r0, #12]
 8006db0:	3b04      	subs	r3, #4
 8006db2:	3010      	adds	r0, #16
 8006db4:	e7f5      	b.n	8006da2 <GUI__memset+0x22>
 8006db6:	461e      	mov	r6, r3
 8006db8:	b11b      	cbz	r3, 8006dc2 <GUI__memset+0x42>
 8006dba:	f845 4b04 	str.w	r4, [r5], #4
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	e7fa      	b.n	8006db8 <GUI__memset+0x38>
 8006dc2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8006dc6:	e7e5      	b.n	8006d94 <GUI__memset+0x14>
 8006dc8:	4290      	cmp	r0, r2
 8006dca:	d002      	beq.n	8006dd2 <GUI__memset+0x52>
 8006dcc:	f800 1b01 	strb.w	r1, [r0], #1
 8006dd0:	e7fa      	b.n	8006dc8 <GUI__memset+0x48>
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}

08006dd4 <GUI_Delay>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	f7fe f94a 	bl	8005070 <GUI_X_GetTime>
 8006ddc:	4405      	add	r5, r0
 8006dde:	f7fe f947 	bl	8005070 <GUI_X_GetTime>
 8006de2:	1a2c      	subs	r4, r5, r0
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	dd08      	ble.n	8006dfa <GUI_Delay+0x26>
 8006de8:	f000 fc9c 	bl	8007724 <GUI_Exec>
 8006dec:	2c05      	cmp	r4, #5
 8006dee:	bfb4      	ite	lt
 8006df0:	4620      	movlt	r0, r4
 8006df2:	2005      	movge	r0, #5
 8006df4:	f7fe f942 	bl	800507c <GUI_X_Delay>
 8006df8:	e7f1      	b.n	8006dde <GUI_Delay+0xa>
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}

08006dfc <GUI_TOUCH_Calibrate>:
 8006dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006dfe:	2801      	cmp	r0, #1
 8006e00:	9c08      	ldr	r4, [sp, #32]
 8006e02:	d845      	bhi.n	8006e90 <GUI_TOUCH_Calibrate+0x94>
 8006e04:	4d25      	ldr	r5, [pc, #148]	; (8006e9c <GUI_TOUCH_Calibrate+0xa0>)
 8006e06:	d00c      	beq.n	8006e22 <GUI_TOUCH_Calibrate+0x26>
 8006e08:	4e25      	ldr	r6, [pc, #148]	; (8006ea0 <GUI_TOUCH_Calibrate+0xa4>)
 8006e0a:	e886 0006 	stmia.w	r6, {r1, r2}
 8006e0e:	6829      	ldr	r1, [r5, #0]
 8006e10:	f001 0206 	and.w	r2, r1, #6
 8006e14:	2a06      	cmp	r2, #6
 8006e16:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <GUI_TOUCH_Calibrate+0xa8>)
 8006e18:	d010      	beq.n	8006e3c <GUI_TOUCH_Calibrate+0x40>
 8006e1a:	f001 0105 	and.w	r1, r1, #5
 8006e1e:	2901      	cmp	r1, #1
 8006e20:	e00b      	b.n	8006e3a <GUI_TOUCH_Calibrate+0x3e>
 8006e22:	4e21      	ldr	r6, [pc, #132]	; (8006ea8 <GUI_TOUCH_Calibrate+0xac>)
 8006e24:	e886 0006 	stmia.w	r6, {r1, r2}
 8006e28:	6829      	ldr	r1, [r5, #0]
 8006e2a:	f001 0205 	and.w	r2, r1, #5
 8006e2e:	2a05      	cmp	r2, #5
 8006e30:	4a1e      	ldr	r2, [pc, #120]	; (8006eac <GUI_TOUCH_Calibrate+0xb0>)
 8006e32:	d003      	beq.n	8006e3c <GUI_TOUCH_Calibrate+0x40>
 8006e34:	f001 0106 	and.w	r1, r1, #6
 8006e38:	2902      	cmp	r1, #2
 8006e3a:	d102      	bne.n	8006e42 <GUI_TOUCH_Calibrate+0x46>
 8006e3c:	6014      	str	r4, [r2, #0]
 8006e3e:	6053      	str	r3, [r2, #4]
 8006e40:	e001      	b.n	8006e46 <GUI_TOUCH_Calibrate+0x4a>
 8006e42:	e882 0018 	stmia.w	r2, {r3, r4}
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <GUI_TOUCH_Calibrate+0xb4>)
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	4102      	asrs	r2, r0
 8006e4c:	07d2      	lsls	r2, r2, #31
 8006e4e:	bf44      	itt	mi
 8006e50:	2200      	movmi	r2, #0
 8006e52:	701a      	strbmi	r2, [r3, #0]
 8006e54:	2201      	movs	r2, #1
 8006e56:	fa02 f000 	lsl.w	r0, r2, r0
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	4310      	orrs	r0, r2
 8006e5e:	b2c0      	uxtb	r0, r0
 8006e60:	2803      	cmp	r0, #3
 8006e62:	7018      	strb	r0, [r3, #0]
 8006e64:	d116      	bne.n	8006e94 <GUI_TOUCH_Calibrate+0x98>
 8006e66:	4c13      	ldr	r4, [pc, #76]	; (8006eb4 <GUI_TOUCH_Calibrate+0xb8>)
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	7c58      	ldrb	r0, [r3, #17]
 8006e6c:	f004 ff46 	bl	800bcfc <LCD_GetXSizeEx>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	4605      	mov	r5, r0
 8006e74:	7c58      	ldrb	r0, [r3, #17]
 8006e76:	f004 ff44 	bl	800bd02 <LCD_GetYSizeEx>
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <GUI_TOUCH_Calibrate+0xb0>)
 8006e7c:	9002      	str	r0, [sp, #8]
 8006e7e:	e88d 0028 	stmia.w	sp, {r3, r5}
 8006e82:	4907      	ldr	r1, [pc, #28]	; (8006ea0 <GUI_TOUCH_Calibrate+0xa4>)
 8006e84:	4a08      	ldr	r2, [pc, #32]	; (8006ea8 <GUI_TOUCH_Calibrate+0xac>)
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <GUI_TOUCH_Calibrate+0xa8>)
 8006e88:	2002      	movs	r0, #2
 8006e8a:	f000 f8ff 	bl	800708c <GUI_TOUCH_CalcCoefficients>
 8006e8e:	e002      	b.n	8006e96 <GUI_TOUCH_Calibrate+0x9a>
 8006e90:	2001      	movs	r0, #1
 8006e92:	e000      	b.n	8006e96 <GUI_TOUCH_Calibrate+0x9a>
 8006e94:	2000      	movs	r0, #0
 8006e96:	b004      	add	sp, #16
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2001927c 	.word	0x2001927c
 8006ea0:	20019268 	.word	0x20019268
 8006ea4:	20019284 	.word	0x20019284
 8006ea8:	20019290 	.word	0x20019290
 8006eac:	20019270 	.word	0x20019270
 8006eb0:	20019278 	.word	0x20019278
 8006eb4:	200001b0 	.word	0x200001b0

08006eb8 <GUI_TOUCH_Exec>:
 8006eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eba:	4c29      	ldr	r4, [pc, #164]	; (8006f60 <GUI_TOUCH_Exec+0xa8>)
 8006ebc:	4d29      	ldr	r5, [pc, #164]	; (8006f64 <GUI_TOUCH_Exec+0xac>)
 8006ebe:	7823      	ldrb	r3, [r4, #0]
 8006ec0:	b087      	sub	sp, #28
 8006ec2:	4626      	mov	r6, r4
 8006ec4:	b943      	cbnz	r3, 8006ed8 <GUI_TOUCH_Exec+0x20>
 8006ec6:	f7fe f8ec 	bl	80050a2 <GUI_TOUCH_X_MeasureY>
 8006eca:	6028      	str	r0, [r5, #0]
 8006ecc:	f7fe f8e4 	bl	8005098 <GUI_TOUCH_X_ActivateY>
 8006ed0:	7823      	ldrb	r3, [r4, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	7023      	strb	r3, [r4, #0]
 8006ed6:	e040      	b.n	8006f5a <GUI_TOUCH_Exec+0xa2>
 8006ed8:	f7fe f8df 	bl	800509a <GUI_TOUCH_X_MeasureX>
 8006edc:	4c22      	ldr	r4, [pc, #136]	; (8006f68 <GUI_TOUCH_Exec+0xb0>)
 8006ede:	6020      	str	r0, [r4, #0]
 8006ee0:	f7fe f8d9 	bl	8005096 <GUI_TOUCH_X_ActivateX>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	9302      	str	r3, [sp, #8]
 8006eec:	f005 fece 	bl	800cc8c <GUI_TOUCH_GetLayer>
 8006ef0:	a902      	add	r1, sp, #8
 8006ef2:	f88d 0015 	strb.w	r0, [sp, #21]
 8006ef6:	a801      	add	r0, sp, #4
 8006ef8:	f000 f88a 	bl	8007010 <GUI_TOUCH_CalibratePoint>
 8006efc:	4c1b      	ldr	r4, [pc, #108]	; (8006f6c <GUI_TOUCH_Exec+0xb4>)
 8006efe:	b148      	cbz	r0, 8006f14 <GUI_TOUCH_Exec+0x5c>
 8006f00:	7823      	ldrb	r3, [r4, #0]
 8006f02:	b343      	cbz	r3, 8006f56 <GUI_TOUCH_Exec+0x9e>
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <GUI_TOUCH_Exec+0xb8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	9303      	str	r3, [sp, #12]
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <GUI_TOUCH_Exec+0xbc>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9304      	str	r3, [sp, #16]
 8006f10:	2500      	movs	r5, #0
 8006f12:	e01a      	b.n	8006f4a <GUI_TOUCH_Exec+0x92>
 8006f14:	4816      	ldr	r0, [pc, #88]	; (8006f70 <GUI_TOUCH_Exec+0xb8>)
 8006f16:	4917      	ldr	r1, [pc, #92]	; (8006f74 <GUI_TOUCH_Exec+0xbc>)
 8006f18:	f894 c000 	ldrb.w	ip, [r4]
 8006f1c:	9a01      	ldr	r2, [sp, #4]
 8006f1e:	6807      	ldr	r7, [r0, #0]
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	680d      	ldr	r5, [r1, #0]
 8006f24:	f1bc 0f00 	cmp.w	ip, #0
 8006f28:	d00a      	beq.n	8006f40 <GUI_TOUCH_Exec+0x88>
 8006f2a:	1bd7      	subs	r7, r2, r7
 8006f2c:	1b5d      	subs	r5, r3, r5
 8006f2e:	2f00      	cmp	r7, #0
 8006f30:	bfb8      	it	lt
 8006f32:	427f      	neglt	r7, r7
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	bfb8      	it	lt
 8006f38:	426d      	neglt	r5, r5
 8006f3a:	443d      	add	r5, r7
 8006f3c:	2d02      	cmp	r5, #2
 8006f3e:	dd0a      	ble.n	8006f56 <GUI_TOUCH_Exec+0x9e>
 8006f40:	6002      	str	r2, [r0, #0]
 8006f42:	9203      	str	r2, [sp, #12]
 8006f44:	600b      	str	r3, [r1, #0]
 8006f46:	9304      	str	r3, [sp, #16]
 8006f48:	2501      	movs	r5, #1
 8006f4a:	a803      	add	r0, sp, #12
 8006f4c:	f88d 5014 	strb.w	r5, [sp, #20]
 8006f50:	f000 fae8 	bl	8007524 <GUI_TOUCH_StoreStateEx>
 8006f54:	7025      	strb	r5, [r4, #0]
 8006f56:	2300      	movs	r3, #0
 8006f58:	7033      	strb	r3, [r6, #0]
 8006f5a:	b007      	add	sp, #28
 8006f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20019281 	.word	0x20019281
 8006f64:	20019298 	.word	0x20019298
 8006f68:	2001928c 	.word	0x2001928c
 8006f6c:	20019280 	.word	0x20019280
 8006f70:	2000019c 	.word	0x2000019c
 8006f74:	20000198 	.word	0x20000198

08006f78 <GUI_TOUCH_TransformPoint>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <GUI_TOUCH_TransformPoint+0x8c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	ed2d 8b02 	vpush	{d8}
 8006f82:	4606      	mov	r6, r0
 8006f84:	460d      	mov	r5, r1
 8006f86:	b3c3      	cbz	r3, 8006ffa <GUI_TOUCH_TransformPoint+0x82>
 8006f88:	edd0 7a00 	vldr	s15, [r0]
 8006f8c:	4c1e      	ldr	r4, [pc, #120]	; (8007008 <GUI_TOUCH_TransformPoint+0x90>)
 8006f8e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006f92:	edd1 7a00 	vldr	s15, [r1]
 8006f96:	ed94 7a01 	vldr	s14, [r4, #4]
 8006f9a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8006f9e:	edd4 7a00 	vldr	s15, [r4]
 8006fa2:	ee28 7a87 	vmul.f32	s14, s17, s14
 8006fa6:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006faa:	edd4 7a02 	vldr	s15, [r4, #8]
 8006fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fb2:	ee17 0a90 	vmov	r0, s15
 8006fb6:	f7f9 fadf 	bl	8000578 <__aeabi_f2d>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4b13      	ldr	r3, [pc, #76]	; (800700c <GUI_TOUCH_TransformPoint+0x94>)
 8006fbe:	f7f9 f97d 	bl	80002bc <__adddf3>
 8006fc2:	f7f9 fd43 	bl	8000a4c <__aeabi_d2iz>
 8006fc6:	edd4 7a04 	vldr	s15, [r4, #16]
 8006fca:	ed94 7a03 	vldr	s14, [r4, #12]
 8006fce:	6030      	str	r0, [r6, #0]
 8006fd0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006fd4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006fd8:	ed94 7a05 	vldr	s14, [r4, #20]
 8006fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe0:	ee17 0a10 	vmov	r0, s14
 8006fe4:	f7f9 fac8 	bl	8000578 <__aeabi_f2d>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <GUI_TOUCH_TransformPoint+0x94>)
 8006fec:	f7f9 f966 	bl	80002bc <__adddf3>
 8006ff0:	f7f9 fd2c 	bl	8000a4c <__aeabi_d2iz>
 8006ff4:	6028      	str	r0, [r5, #0]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e000      	b.n	8006ffc <GUI_TOUCH_TransformPoint+0x84>
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	ecbd 8b02 	vpop	{d8}
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	bf00      	nop
 8007004:	200192ac 	.word	0x200192ac
 8007008:	200192b0 	.word	0x200192b0
 800700c:	3fe00000 	.word	0x3fe00000

08007010 <GUI_TOUCH_CalibratePoint>:
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <GUI_TOUCH_CalibratePoint+0x64>)
 8007012:	6802      	ldr	r2, [r0, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	460c      	mov	r4, r1
 800701e:	db27      	blt.n	8007070 <GUI_TOUCH_CalibratePoint+0x60>
 8007020:	4e15      	ldr	r6, [pc, #84]	; (8007078 <GUI_TOUCH_CalibratePoint+0x68>)
 8007022:	680b      	ldr	r3, [r1, #0]
 8007024:	6836      	ldr	r6, [r6, #0]
 8007026:	42b3      	cmp	r3, r6
 8007028:	db22      	blt.n	8007070 <GUI_TOUCH_CalibratePoint+0x60>
 800702a:	4e14      	ldr	r6, [pc, #80]	; (800707c <GUI_TOUCH_CalibratePoint+0x6c>)
 800702c:	6836      	ldr	r6, [r6, #0]
 800702e:	42b2      	cmp	r2, r6
 8007030:	dc1e      	bgt.n	8007070 <GUI_TOUCH_CalibratePoint+0x60>
 8007032:	4a13      	ldr	r2, [pc, #76]	; (8007080 <GUI_TOUCH_CalibratePoint+0x70>)
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	4293      	cmp	r3, r2
 8007038:	dc1a      	bgt.n	8007070 <GUI_TOUCH_CalibratePoint+0x60>
 800703a:	f7ff ff9d 	bl	8006f78 <GUI_TOUCH_TransformPoint>
 800703e:	b9c0      	cbnz	r0, 8007072 <GUI_TOUCH_CalibratePoint+0x62>
 8007040:	682a      	ldr	r2, [r5, #0]
 8007042:	2a00      	cmp	r2, #0
 8007044:	da01      	bge.n	800704a <GUI_TOUCH_CalibratePoint+0x3a>
 8007046:	6028      	str	r0, [r5, #0]
 8007048:	e006      	b.n	8007058 <GUI_TOUCH_CalibratePoint+0x48>
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <GUI_TOUCH_CalibratePoint+0x74>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	bfa4      	itt	ge
 8007052:	f103 33ff 	addge.w	r3, r3, #4294967295
 8007056:	602b      	strge	r3, [r5, #0]
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	2a00      	cmp	r2, #0
 800705c:	da01      	bge.n	8007062 <GUI_TOUCH_CalibratePoint+0x52>
 800705e:	2300      	movs	r3, #0
 8007060:	e004      	b.n	800706c <GUI_TOUCH_CalibratePoint+0x5c>
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <GUI_TOUCH_CalibratePoint+0x78>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	db03      	blt.n	8007072 <GUI_TOUCH_CalibratePoint+0x62>
 800706a:	3b01      	subs	r3, #1
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	2001      	movs	r0, #1
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	2001929c 	.word	0x2001929c
 8007078:	200192a0 	.word	0x200192a0
 800707c:	200192cc 	.word	0x200192cc
 8007080:	200192c8 	.word	0x200192c8
 8007084:	200192a4 	.word	0x200192a4
 8007088:	200192a8 	.word	0x200192a8

0800708c <GUI_TOUCH_CalcCoefficients>:
 800708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	ed2d 8b02 	vpush	{d8}
 8007094:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8007454 <GUI_TOUCH_CalcCoefficients+0x3c8>
 8007098:	b08c      	sub	sp, #48	; 0x30
 800709a:	2400      	movs	r4, #0
 800709c:	2802      	cmp	r0, #2
 800709e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80070a0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80070a2:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 80070a6:	f8cc 4000 	str.w	r4, [ip]
 80070aa:	d135      	bne.n	8007118 <GUI_TOUCH_CalcCoefficients+0x8c>
 80070ac:	c912      	ldmia	r1, {r1, r4}
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	1a61      	subs	r1, r4, r1
 80070b4:	1a1b      	subs	r3, r3, r0
 80070b6:	ee00 1a10 	vmov	s0, r1
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 80070c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070c6:	ee05 0a10 	vmov	s10, r0
 80070ca:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80070ce:	6850      	ldr	r0, [r2, #4]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	4bdb      	ldr	r3, [pc, #876]	; (8007440 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80070d4:	2100      	movs	r1, #0
 80070d6:	1a82      	subs	r2, r0, r2
 80070d8:	6059      	str	r1, [r3, #4]
 80070da:	60d9      	str	r1, [r3, #12]
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 80070e2:	ee06 2a10 	vmov	s12, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	edc3 7a00 	vstr	s15, [r3]
 80070ec:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80070f0:	1a52      	subs	r2, r2, r1
 80070f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80070f6:	ee07 2a90 	vmov	s15, r2
 80070fa:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 80070fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007102:	ee06 1a90 	vmov	s13, r1
 8007106:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800710a:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 800710e:	edc3 7a04 	vstr	s15, [r3, #16]
 8007112:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007116:	e144      	b.n	80073a2 <GUI_TOUCH_CalcCoefficients+0x316>
 8007118:	f340 8148 	ble.w	80073ac <GUI_TOUCH_CalcCoefficients+0x320>
 800711c:	2803      	cmp	r0, #3
 800711e:	d128      	bne.n	8007172 <GUI_TOUCH_CalcCoefficients+0xe6>
 8007120:	4620      	mov	r0, r4
 8007122:	581d      	ldr	r5, [r3, r0]
 8007124:	ee00 5a10 	vmov	s0, r5
 8007128:	583d      	ldr	r5, [r7, r0]
 800712a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800712e:	ac00      	add	r4, sp, #0
 8007130:	ee00 5a10 	vmov	s0, r5
 8007134:	580d      	ldr	r5, [r1, r0]
 8007136:	4404      	add	r4, r0
 8007138:	edc4 7a00 	vstr	s15, [r4]
 800713c:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007140:	ac03      	add	r4, sp, #12
 8007142:	ee00 5a10 	vmov	s0, r5
 8007146:	4404      	add	r4, r0
 8007148:	5815      	ldr	r5, [r2, r0]
 800714a:	edc4 7a00 	vstr	s15, [r4]
 800714e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007152:	ac0c      	add	r4, sp, #48	; 0x30
 8007154:	4404      	add	r4, r0
 8007156:	ee00 5a10 	vmov	s0, r5
 800715a:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800715e:	ac0c      	add	r4, sp, #48	; 0x30
 8007160:	4404      	add	r4, r0
 8007162:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8007166:	3004      	adds	r0, #4
 8007168:	280c      	cmp	r0, #12
 800716a:	ed44 7a03 	vstr	s15, [r4, #-12]
 800716e:	d1d8      	bne.n	8007122 <GUI_TOUCH_CalcCoefficients+0x96>
 8007170:	e09b      	b.n	80072aa <GUI_TOUCH_CalcCoefficients+0x21e>
 8007172:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007176:	44a1      	add	r9, r4
 8007178:	f04f 0800 	mov.w	r8, #0
 800717c:	f849 8c0c 	str.w	r8, [r9, #-12]
 8007180:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007184:	44a1      	add	r9, r4
 8007186:	f849 8c18 	str.w	r8, [r9, #-24]
 800718a:	f10d 090c 	add.w	r9, sp, #12
 800718e:	44a1      	add	r9, r4
 8007190:	f8c9 8000 	str.w	r8, [r9]
 8007194:	f10d 0900 	add.w	r9, sp, #0
 8007198:	44a1      	add	r9, r4
 800719a:	3404      	adds	r4, #4
 800719c:	2c0c      	cmp	r4, #12
 800719e:	f8c9 8000 	str.w	r8, [r9]
 80071a2:	d1e6      	bne.n	8007172 <GUI_TOUCH_CalcCoefficients+0xe6>
 80071a4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80071a8:	eddd 7a05 	vldr	s15, [sp, #20]
 80071ac:	eddd 3a08 	vldr	s7, [sp, #32]
 80071b0:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 80071b4:	eddd 1a00 	vldr	s3, [sp]
 80071b8:	eddd 5a01 	vldr	s11, [sp, #4]
 80071bc:	ed9d 2a04 	vldr	s4, [sp, #16]
 80071c0:	eddd 2a06 	vldr	s5, [sp, #24]
 80071c4:	ed9d 3a07 	vldr	s6, [sp, #28]
 80071c8:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 80071cc:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 80071d0:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80071d4:	2400      	movs	r4, #0
 80071d6:	591d      	ldr	r5, [r3, r4]
 80071d8:	ee00 5a10 	vmov	s0, r5
 80071dc:	593d      	ldr	r5, [r7, r4]
 80071de:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 80071e2:	ee00 5a10 	vmov	s0, r5
 80071e6:	590d      	ldr	r5, [r1, r4]
 80071e8:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 80071ec:	ee00 5a10 	vmov	s0, r5
 80071f0:	5915      	ldr	r5, [r2, r4]
 80071f2:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 80071f6:	ee00 5a10 	vmov	s0, r5
 80071fa:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 80071fe:	eee6 2a24 	vfma.f32	s5, s12, s9
 8007202:	3404      	adds	r4, #4
 8007204:	4544      	cmp	r4, r8
 8007206:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800720a:	eea6 3aa4 	vfma.f32	s6, s13, s9
 800720e:	eef0 4a60 	vmov.f32	s9, s1
 8007212:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007216:	eee6 1a06 	vfma.f32	s3, s12, s12
 800721a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800721e:	eee6 4a05 	vfma.f32	s9, s12, s10
 8007222:	eeb0 6a41 	vmov.f32	s12, s2
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee34 4a05 	vadd.f32	s8, s8, s10
 800722e:	eea6 2aa6 	vfma.f32	s4, s13, s13
 8007232:	eea6 6a85 	vfma.f32	s12, s13, s10
 8007236:	d004      	beq.n	8007242 <GUI_TOUCH_CalcCoefficients+0x1b6>
 8007238:	eef0 0a64 	vmov.f32	s1, s9
 800723c:	eeb0 1a46 	vmov.f32	s2, s12
 8007240:	e7c9      	b.n	80071d6 <GUI_TOUCH_CalcCoefficients+0x14a>
 8007242:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8007246:	ee05 0a10 	vmov	s10, r0
 800724a:	edcd 6a01 	vstr	s13, [sp, #4]
 800724e:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 8007252:	eec1 1a87 	vdiv.f32	s3, s3, s14
 8007256:	eec5 5a87 	vdiv.f32	s11, s11, s14
 800725a:	ee82 2a27 	vdiv.f32	s4, s4, s15
 800725e:	eec2 2a87 	vdiv.f32	s5, s5, s14
 8007262:	ee83 3a27 	vdiv.f32	s6, s6, s15
 8007266:	eec4 4a87 	vdiv.f32	s9, s9, s14
 800726a:	ee86 6a27 	vdiv.f32	s12, s12, s15
 800726e:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8007272:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8007276:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 800727a:	eec4 6a26 	vdiv.f32	s13, s8, s13
 800727e:	edcd 1a00 	vstr	s3, [sp]
 8007282:	edcd 5a03 	vstr	s11, [sp, #12]
 8007286:	ed8d 2a04 	vstr	s4, [sp, #16]
 800728a:	edcd 2a06 	vstr	s5, [sp, #24]
 800728e:	ed8d 3a07 	vstr	s6, [sp, #28]
 8007292:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 8007296:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800729a:	ed8d 7a02 	vstr	s14, [sp, #8]
 800729e:	edcd 7a05 	vstr	s15, [sp, #20]
 80072a2:	edcd 3a08 	vstr	s7, [sp, #32]
 80072a6:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80072aa:	ed9d 7a02 	vldr	s14, [sp, #8]
 80072ae:	eddd 4a05 	vldr	s9, [sp, #20]
 80072b2:	ed9d 6a01 	vldr	s12, [sp, #4]
 80072b6:	ed9d 3a03 	vldr	s6, [sp, #12]
 80072ba:	eddd 5a00 	vldr	s11, [sp]
 80072be:	eddd 2a04 	vldr	s5, [sp, #16]
 80072c2:	ee76 6a47 	vsub.f32	s13, s12, s14
 80072c6:	ee73 1a64 	vsub.f32	s3, s6, s9
 80072ca:	ee35 2ac7 	vsub.f32	s4, s11, s14
 80072ce:	ee32 1ae4 	vsub.f32	s2, s5, s9
 80072d2:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 80072d6:	eee2 7a01 	vfma.f32	s15, s4, s2
 80072da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80072de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e2:	d063      	beq.n	80073ac <GUI_TOUCH_CalcCoefficients+0x320>
 80072e4:	ed9d 4a08 	vldr	s8, [sp, #32]
 80072e8:	eddd 0a07 	vldr	s1, [sp, #28]
 80072ec:	eddd 3a06 	vldr	s7, [sp, #24]
 80072f0:	4b53      	ldr	r3, [pc, #332]	; (8007440 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80072f2:	ee30 8ac4 	vsub.f32	s16, s1, s8
 80072f6:	ee33 5ac4 	vsub.f32	s10, s7, s8
 80072fa:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 80072fe:	eea5 0a01 	vfma.f32	s0, s10, s2
 8007302:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 8007306:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800730a:	eea8 5a02 	vfma.f32	s10, s16, s4
 800730e:	ed83 0a00 	vstr	s0, [r3]
 8007312:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8007316:	ed83 5a01 	vstr	s10, [r3, #4]
 800731a:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 800731e:	eea5 5a84 	vfma.f32	s10, s11, s8
 8007322:	ee24 4a46 	vnmul.f32	s8, s8, s12
 8007326:	ee22 5a85 	vmul.f32	s10, s5, s10
 800732a:	eea7 4a20 	vfma.f32	s8, s14, s1
 800732e:	eea3 5a04 	vfma.f32	s10, s6, s8
 8007332:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 8007336:	eea6 4a23 	vfma.f32	s8, s12, s7
 800733a:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 800733e:	eea4 5a84 	vfma.f32	s10, s9, s8
 8007342:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 8007346:	ee85 5a27 	vdiv.f32	s10, s10, s15
 800734a:	ed83 5a02 	vstr	s10, [r3, #8]
 800734e:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8007352:	ee34 0a45 	vsub.f32	s0, s8, s10
 8007356:	ee73 0ac5 	vsub.f32	s1, s7, s10
 800735a:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 800735e:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 8007362:	eee0 6a82 	vfma.f32	s13, s1, s4
 8007366:	eee0 1a01 	vfma.f32	s3, s0, s2
 800736a:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 800736e:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8007372:	edc3 6a04 	vstr	s13, [r3, #16]
 8007376:	ee64 6a47 	vnmul.f32	s13, s8, s14
 800737a:	edc3 1a03 	vstr	s3, [r3, #12]
 800737e:	eee5 6a85 	vfma.f32	s13, s11, s10
 8007382:	ee25 5a46 	vnmul.f32	s10, s10, s12
 8007386:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800738a:	eea7 5a23 	vfma.f32	s10, s14, s7
 800738e:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 8007392:	eee3 6a05 	vfma.f32	s13, s6, s10
 8007396:	eee6 5a04 	vfma.f32	s11, s12, s8
 800739a:	eee4 6aa5 	vfma.f32	s13, s9, s11
 800739e:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80073a2:	edc3 7a05 	vstr	s15, [r3, #20]
 80073a6:	2301      	movs	r3, #1
 80073a8:	f8cc 3000 	str.w	r3, [ip]
 80073ac:	f8dc 0000 	ldr.w	r0, [ip]
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f000 80a7 	beq.w	8007504 <GUI_TOUCH_CalcCoefficients+0x478>
 80073b6:	4b23      	ldr	r3, [pc, #140]	; (8007444 <GUI_TOUCH_CalcCoefficients+0x3b8>)
 80073b8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8007448 <GUI_TOUCH_CalcCoefficients+0x3bc>
 80073bc:	601e      	str	r6, [r3, #0]
 80073be:	4b23      	ldr	r3, [pc, #140]	; (800744c <GUI_TOUCH_CalcCoefficients+0x3c0>)
 80073c0:	f8c3 a000 	str.w	sl, [r3]
 80073c4:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80073c6:	ed93 7a00 	vldr	s14, [r3]
 80073ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d012      	beq.n	80073fa <GUI_TOUCH_CalcCoefficients+0x36e>
 80073d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80073d8:	eee6 7ae7 	vfms.f32	s15, s13, s15
 80073dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80073e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80073e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073ec:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80073f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f4:	ee17 1a90 	vmov	r1, s15
 80073f8:	e001      	b.n	80073fe <GUI_TOUCH_CalcCoefficients+0x372>
 80073fa:	f04f 31ff 	mov.w	r1, #4294967295
 80073fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8007402:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007448 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8007406:	4c12      	ldr	r4, [pc, #72]	; (8007450 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 8007408:	4a0d      	ldr	r2, [pc, #52]	; (8007440 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800740a:	6021      	str	r1, [r4, #0]
 800740c:	eef4 7a66 	vcmp.f32	s15, s13
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	4627      	mov	r7, r4
 8007416:	d01f      	beq.n	8007458 <GUI_TOUCH_CalcCoefficients+0x3cc>
 8007418:	ed92 6a03 	vldr	s12, [r2, #12]
 800741c:	eee6 6a66 	vfms.f32	s13, s12, s13
 8007420:	ed92 6a05 	vldr	s12, [r2, #20]
 8007424:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007428:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800742c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007430:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8007434:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8007438:	ee16 2a90 	vmov	r2, s13
 800743c:	e00e      	b.n	800745c <GUI_TOUCH_CalcCoefficients+0x3d0>
 800743e:	bf00      	nop
 8007440:	200192b0 	.word	0x200192b0
 8007444:	200192a4 	.word	0x200192a4
 8007448:	00000000 	.word	0x00000000
 800744c:	200192a8 	.word	0x200192a8
 8007450:	2001929c 	.word	0x2001929c
 8007454:	200192ac 	.word	0x200192ac
 8007458:	f04f 32ff 	mov.w	r2, #4294967295
 800745c:	4c2e      	ldr	r4, [pc, #184]	; (8007518 <GUI_TOUCH_CalcCoefficients+0x48c>)
 800745e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007462:	3e01      	subs	r6, #1
 8007464:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746c:	ee05 6a90 	vmov	s11, r6
 8007470:	6022      	str	r2, [r4, #0]
 8007472:	ee06 aa10 	vmov	s12, sl
 8007476:	4626      	mov	r6, r4
 8007478:	d016      	beq.n	80074a8 <GUI_TOUCH_CalcCoefficients+0x41c>
 800747a:	ed93 5a01 	vldr	s10, [r3, #4]
 800747e:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 8007482:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 8007486:	eee4 6ac5 	vfms.f32	s13, s9, s10
 800748a:	ed93 5a02 	vldr	s10, [r3, #8]
 800748e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8007492:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8007496:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800749a:	ee86 7a87 	vdiv.f32	s14, s13, s14
 800749e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80074a2:	ee17 4a10 	vmov	r4, s14
 80074a6:	e001      	b.n	80074ac <GUI_TOUCH_CalcCoefficients+0x420>
 80074a8:	f04f 34ff 	mov.w	r4, #4294967295
 80074ac:	4d1b      	ldr	r5, [pc, #108]	; (800751c <GUI_TOUCH_CalcCoefficients+0x490>)
 80074ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	602c      	str	r4, [r5, #0]
 80074b8:	46ac      	mov	ip, r5
 80074ba:	d016      	beq.n	80074ea <GUI_TOUCH_CalcCoefficients+0x45e>
 80074bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80074c0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80074c4:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 80074c8:	eea5 7ae6 	vfms.f32	s14, s11, s13
 80074cc:	edd3 6a05 	vldr	s13, [r3, #20]
 80074d0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80074d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074dc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80074e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e4:	ee17 3a90 	vmov	r3, s15
 80074e8:	e001      	b.n	80074ee <GUI_TOUCH_CalcCoefficients+0x462>
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	42a1      	cmp	r1, r4
 80074f0:	4d0b      	ldr	r5, [pc, #44]	; (8007520 <GUI_TOUCH_CalcCoefficients+0x494>)
 80074f2:	bfc4      	itt	gt
 80074f4:	603c      	strgt	r4, [r7, #0]
 80074f6:	f8cc 1000 	strgt.w	r1, [ip]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	bfc4      	itt	gt
 8007500:	6033      	strgt	r3, [r6, #0]
 8007502:	602a      	strgt	r2, [r5, #0]
 8007504:	f1d0 0001 	rsbs	r0, r0, #1
 8007508:	bf38      	it	cc
 800750a:	2000      	movcc	r0, #0
 800750c:	b00c      	add	sp, #48	; 0x30
 800750e:	ecbd 8b02 	vpop	{d8}
 8007512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007516:	bf00      	nop
 8007518:	200192a0 	.word	0x200192a0
 800751c:	200192cc 	.word	0x200192cc
 8007520:	200192c8 	.word	0x200192c8

08007524 <GUI_TOUCH_StoreStateEx>:
 8007524:	b530      	push	{r4, r5, lr}
 8007526:	4d0f      	ldr	r5, [pc, #60]	; (8007564 <GUI_TOUCH_StoreStateEx+0x40>)
 8007528:	b085      	sub	sp, #20
 800752a:	4629      	mov	r1, r5
 800752c:	220c      	movs	r2, #12
 800752e:	4604      	mov	r4, r0
 8007530:	f007 fec6 	bl	800f2c0 <memcmp>
 8007534:	b1a0      	cbz	r0, 8007560 <GUI_TOUCH_StoreStateEx+0x3c>
 8007536:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800753a:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <GUI_TOUCH_StoreStateEx+0x44>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007542:	b153      	cbz	r3, 800755a <GUI_TOUCH_StoreStateEx+0x36>
 8007544:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007548:	ad01      	add	r5, sp, #4
 800754a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800754e:	4628      	mov	r0, r5
 8007550:	a902      	add	r1, sp, #8
 8007552:	4798      	blx	r3
 8007554:	b920      	cbnz	r0, 8007560 <GUI_TOUCH_StoreStateEx+0x3c>
 8007556:	4628      	mov	r0, r5
 8007558:	e000      	b.n	800755c <GUI_TOUCH_StoreStateEx+0x38>
 800755a:	4620      	mov	r0, r4
 800755c:	f000 f83e 	bl	80075dc <GUI_PID_StoreState>
 8007560:	b005      	add	sp, #20
 8007562:	bd30      	pop	{r4, r5, pc}
 8007564:	200192d0 	.word	0x200192d0
 8007568:	200192dc 	.word	0x200192dc

0800756c <GUI_SetFont>:
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <GUI_SetFont+0x10>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69d9      	ldr	r1, [r3, #28]
 8007572:	b100      	cbz	r0, 8007576 <GUI_SetFont+0xa>
 8007574:	61d8      	str	r0, [r3, #28]
 8007576:	4608      	mov	r0, r1
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	200001b0 	.word	0x200001b0

08007580 <GUI_SetBkColor>:
 8007580:	f005 b824 	b.w	800c5cc <LCD_SetBkColor>

08007584 <GUI_SetColor>:
 8007584:	f005 b82a 	b.w	800c5dc <LCD_SetColor>

08007588 <GUI_PID_GetState>:
 8007588:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <GUI_PID_GetState+0x48>)
 800758a:	4912      	ldr	r1, [pc, #72]	; (80075d4 <GUI_PID_GetState+0x4c>)
 800758c:	6813      	ldr	r3, [r2, #0]
 800758e:	6809      	ldr	r1, [r1, #0]
 8007590:	428b      	cmp	r3, r1
 8007592:	b570      	push	{r4, r5, r6, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	4616      	mov	r6, r2
 8007598:	4d0f      	ldr	r5, [pc, #60]	; (80075d8 <GUI_PID_GetState+0x50>)
 800759a:	d109      	bne.n	80075b0 <GUI_PID_GetState+0x28>
 800759c:	42ab      	cmp	r3, r5
 800759e:	bf06      	itte	eq
 80075a0:	333c      	addeq	r3, #60	; 0x3c
 80075a2:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 80075a6:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 80075aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075ae:	e00a      	b.n	80075c6 <GUI_PID_GetState+0x3e>
 80075b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075b8:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80075bc:	4293      	cmp	r3, r2
 80075be:	bf18      	it	ne
 80075c0:	f103 050c 	addne.w	r5, r3, #12
 80075c4:	6035      	str	r5, [r6, #0]
 80075c6:	7a20      	ldrb	r0, [r4, #8]
 80075c8:	3000      	adds	r0, #0
 80075ca:	bf18      	it	ne
 80075cc:	2001      	movne	r0, #1
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	200001a4 	.word	0x200001a4
 80075d4:	200001a0 	.word	0x200001a0
 80075d8:	200192e4 	.word	0x200192e4

080075dc <GUI_PID_StoreState>:
 80075dc:	4a21      	ldr	r2, [pc, #132]	; (8007664 <GUI_PID_StoreState+0x88>)
 80075de:	4922      	ldr	r1, [pc, #136]	; (8007668 <GUI_PID_StoreState+0x8c>)
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	4f21      	ldr	r7, [pc, #132]	; (800766c <GUI_PID_StoreState+0x90>)
 80075e8:	4921      	ldr	r1, [pc, #132]	; (8007670 <GUI_PID_StoreState+0x94>)
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	680c      	ldr	r4, [r1, #0]
 80075ee:	4603      	mov	r3, r0
 80075f0:	4820      	ldr	r0, [pc, #128]	; (8007674 <GUI_PID_StoreState+0x98>)
 80075f2:	4294      	cmp	r4, r2
 80075f4:	468c      	mov	ip, r1
 80075f6:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 80075fa:	d017      	beq.n	800762c <GUI_PID_StoreState+0x50>
 80075fc:	4282      	cmp	r2, r0
 80075fe:	bf14      	ite	ne
 8007600:	f1a2 010c 	subne.w	r1, r2, #12
 8007604:	4631      	moveq	r1, r6
 8007606:	7a1d      	ldrb	r5, [r3, #8]
 8007608:	f891 8008 	ldrb.w	r8, [r1, #8]
 800760c:	45a8      	cmp	r8, r5
 800760e:	d10d      	bne.n	800762c <GUI_PID_StoreState+0x50>
 8007610:	428c      	cmp	r4, r1
 8007612:	d00b      	beq.n	800762c <GUI_PID_StoreState+0x50>
 8007614:	4281      	cmp	r1, r0
 8007616:	bf14      	ite	ne
 8007618:	390c      	subne	r1, #12
 800761a:	4917      	ldreq	r1, [pc, #92]	; (8007678 <GUI_PID_StoreState+0x9c>)
 800761c:	7a09      	ldrb	r1, [r1, #8]
 800761e:	42a9      	cmp	r1, r5
 8007620:	d104      	bne.n	800762c <GUI_PID_StoreState+0x50>
 8007622:	4282      	cmp	r2, r0
 8007624:	bf14      	ite	ne
 8007626:	3a0c      	subne	r2, #12
 8007628:	4a13      	ldreq	r2, [pc, #76]	; (8007678 <GUI_PID_StoreState+0x9c>)
 800762a:	603a      	str	r2, [r7, #0]
 800762c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007630:	683d      	ldr	r5, [r7, #0]
 8007632:	42b5      	cmp	r5, r6
 8007634:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007638:	bf0c      	ite	eq
 800763a:	4d0e      	ldreq	r5, [pc, #56]	; (8007674 <GUI_PID_StoreState+0x98>)
 800763c:	350c      	addne	r5, #12
 800763e:	42ac      	cmp	r4, r5
 8007640:	603d      	str	r5, [r7, #0]
 8007642:	d105      	bne.n	8007650 <GUI_PID_StoreState+0x74>
 8007644:	42b4      	cmp	r4, r6
 8007646:	bf14      	ite	ne
 8007648:	340c      	addne	r4, #12
 800764a:	4c0a      	ldreq	r4, [pc, #40]	; (8007674 <GUI_PID_StoreState+0x98>)
 800764c:	f8cc 4000 	str.w	r4, [ip]
 8007650:	4a0a      	ldr	r2, [pc, #40]	; (800767c <GUI_PID_StoreState+0xa0>)
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	b10a      	cbz	r2, 800765a <GUI_PID_StoreState+0x7e>
 8007656:	4618      	mov	r0, r3
 8007658:	4790      	blx	r2
 800765a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	f005 ba39 	b.w	800cad4 <GUI_SignalEvent>
 8007662:	bf00      	nop
 8007664:	2001af20 	.word	0x2001af20
 8007668:	08008965 	.word	0x08008965
 800766c:	200001a0 	.word	0x200001a0
 8007670:	200001a4 	.word	0x200001a4
 8007674:	200192e4 	.word	0x200192e4
 8007678:	20019320 	.word	0x20019320
 800767c:	200192e0 	.word	0x200192e0

08007680 <GUI_PID_IsEmpty>:
 8007680:	4b03      	ldr	r3, [pc, #12]	; (8007690 <GUI_PID_IsEmpty+0x10>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	4b03      	ldr	r3, [pc, #12]	; (8007694 <GUI_PID_IsEmpty+0x14>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	1ac3      	subs	r3, r0, r3
 800768a:	4258      	negs	r0, r3
 800768c:	4158      	adcs	r0, r3
 800768e:	4770      	bx	lr
 8007690:	200001a4 	.word	0x200001a4
 8007694:	200001a0 	.word	0x200001a0

08007698 <GUI_GetKey>:
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <GUI_GetKey+0xc>)
 800769a:	2200      	movs	r2, #0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2001932c 	.word	0x2001932c

080076a8 <GUI_StoreKey>:
 80076a8:	4b02      	ldr	r3, [pc, #8]	; (80076b4 <GUI_StoreKey+0xc>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	b902      	cbnz	r2, 80076b0 <GUI_StoreKey+0x8>
 80076ae:	6018      	str	r0, [r3, #0]
 80076b0:	f005 ba10 	b.w	800cad4 <GUI_SignalEvent>
 80076b4:	2001932c 	.word	0x2001932c

080076b8 <GUI_PollKeyMsg>:
 80076b8:	4a0a      	ldr	r2, [pc, #40]	; (80076e4 <GUI_PollKeyMsg+0x2c>)
 80076ba:	490b      	ldr	r1, [pc, #44]	; (80076e8 <GUI_PollKeyMsg+0x30>)
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	6809      	ldr	r1, [r1, #0]
 80076c0:	428b      	cmp	r3, r1
 80076c2:	b510      	push	{r4, lr}
 80076c4:	d00b      	beq.n	80076de <GUI_PollKeyMsg+0x26>
 80076c6:	4c09      	ldr	r4, [pc, #36]	; (80076ec <GUI_PollKeyMsg+0x34>)
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80076ce:	bf14      	ite	ne
 80076d0:	3308      	addne	r3, #8
 80076d2:	3b50      	subeq	r3, #80	; 0x50
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	f001 fb87 	bl	8008de8 <WM_OnKey>
 80076da:	2001      	movs	r0, #1
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	2000      	movs	r0, #0
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	200001ac 	.word	0x200001ac
 80076e8:	200001a8 	.word	0x200001a8
 80076ec:	20019380 	.word	0x20019380

080076f0 <GUI_Exec1>:
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <GUI_Exec1+0x2c>)
 80076f2:	b510      	push	{r4, lr}
 80076f4:	681c      	ldr	r4, [r3, #0]
 80076f6:	b11c      	cbz	r4, 8007700 <GUI_Exec1+0x10>
 80076f8:	47a0      	blx	r4
 80076fa:	1c04      	adds	r4, r0, #0
 80076fc:	bf18      	it	ne
 80076fe:	2401      	movne	r4, #1
 8007700:	f002 fbbe 	bl	8009e80 <WM_Exec>
 8007704:	4b06      	ldr	r3, [pc, #24]	; (8007720 <GUI_Exec1+0x30>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2800      	cmp	r0, #0
 800770a:	bf18      	it	ne
 800770c:	2401      	movne	r4, #1
 800770e:	b11b      	cbz	r3, 8007718 <GUI_Exec1+0x28>
 8007710:	4798      	blx	r3
 8007712:	2800      	cmp	r0, #0
 8007714:	bf18      	it	ne
 8007716:	2401      	movne	r4, #1
 8007718:	4620      	mov	r0, r4
 800771a:	bd10      	pop	{r4, pc}
 800771c:	2001aef8 	.word	0x2001aef8
 8007720:	2001af10 	.word	0x2001af10

08007724 <GUI_Exec>:
 8007724:	b510      	push	{r4, lr}
 8007726:	2400      	movs	r4, #0
 8007728:	f7ff ffe2 	bl	80076f0 <GUI_Exec1>
 800772c:	b108      	cbz	r0, 8007732 <GUI_Exec+0xe>
 800772e:	2401      	movs	r4, #1
 8007730:	e7fa      	b.n	8007728 <GUI_Exec+0x4>
 8007732:	4620      	mov	r0, r4
 8007734:	bd10      	pop	{r4, pc}
	...

08007738 <GUI_DispString>:
 8007738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	4604      	mov	r4, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	d079      	beq.n	8007836 <GUI_DispString+0xfe>
 8007742:	4d3e      	ldr	r5, [pc, #248]	; (800783c <GUI_DispString+0x104>)
 8007744:	f000 fcba 	bl	80080bc <GUI_GetFontDistY>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	4680      	mov	r8, r0
 800774c:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8007750:	f000 fc9c 	bl	800808c <GUI_GetYAdjust>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8007758:	b287      	uxth	r7, r0
 800775a:	1bd2      	subs	r2, r2, r7
 800775c:	849a      	strh	r2, [r3, #36]	; 0x24
 800775e:	7823      	ldrb	r3, [r4, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d05d      	beq.n	8007820 <GUI_DispString+0xe8>
 8007764:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fbdd 	bl	8007f28 <GUI__GetLineNumChars>
 800776e:	4606      	mov	r6, r0
 8007770:	4631      	mov	r1, r6
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fc06 	bl	8007f84 <GUI__GetLineDistX>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800777c:	f002 0203 	and.w	r2, r2, #3
 8007780:	2a01      	cmp	r2, #1
 8007782:	d005      	beq.n	8007790 <GUI_DispString+0x58>
 8007784:	2a02      	cmp	r2, #2
 8007786:	bf14      	ite	ne
 8007788:	2200      	movne	r2, #0
 800778a:	fb90 f2f2 	sdiveq	r2, r0, r2
 800778e:	e000      	b.n	8007792 <GUI_DispString+0x5a>
 8007790:	4602      	mov	r2, r0
 8007792:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8007794:	1a8a      	subs	r2, r1, r2
 8007796:	b292      	uxth	r2, r2
 8007798:	b291      	uxth	r1, r2
 800779a:	8459      	strh	r1, [r3, #34]	; 0x22
 800779c:	fa1f fa80 	uxth.w	sl, r0
 80077a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077a2:	f8ad 1000 	strh.w	r1, [sp]
 80077a6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80077aa:	440a      	add	r2, r1
 80077ac:	f8ad 3002 	strh.w	r3, [sp, #2]
 80077b0:	fa1f fb88 	uxth.w	fp, r8
 80077b4:	3b01      	subs	r3, #1
 80077b6:	445b      	add	r3, fp
 80077b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80077bc:	4620      	mov	r0, r4
 80077be:	4631      	mov	r1, r6
 80077c0:	466a      	mov	r2, sp
 80077c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80077c6:	f000 fc0d 	bl	8007fe4 <GUI__DispLine>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80077d0:	849a      	strh	r2, [r3, #36]	; 0x24
 80077d2:	4620      	mov	r0, r4
 80077d4:	4631      	mov	r1, r6
 80077d6:	f005 f9a3 	bl	800cb20 <GUI_UC__NumChars2NumBytes>
 80077da:	5c23      	ldrb	r3, [r4, r0]
 80077dc:	2b0a      	cmp	r3, #10
 80077de:	eb04 0200 	add.w	r2, r4, r0
 80077e2:	d001      	beq.n	80077e8 <GUI_DispString+0xb0>
 80077e4:	2b0d      	cmp	r3, #13
 80077e6:	d112      	bne.n	800780e <GUI_DispString+0xd6>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80077ec:	f001 0103 	and.w	r1, r1, #3
 80077f0:	3901      	subs	r1, #1
 80077f2:	2901      	cmp	r1, #1
 80077f4:	bf8a      	itet	hi
 80077f6:	8c19      	ldrhhi	r1, [r3, #32]
 80077f8:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 80077fc:	8459      	strhhi	r1, [r3, #34]	; 0x22
 80077fe:	7811      	ldrb	r1, [r2, #0]
 8007800:	290a      	cmp	r1, #10
 8007802:	d10b      	bne.n	800781c <GUI_DispString+0xe4>
 8007804:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007806:	448b      	add	fp, r1
 8007808:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800780c:	e006      	b.n	800781c <GUI_DispString+0xe4>
 800780e:	4b0b      	ldr	r3, [pc, #44]	; (800783c <GUI_DispString+0x104>)
 8007810:	f8bd 0000 	ldrh.w	r0, [sp]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4482      	add	sl, r0
 8007818:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800781c:	7813      	ldrb	r3, [r2, #0]
 800781e:	b943      	cbnz	r3, 8007832 <GUI_DispString+0xfa>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8007824:	4417      	add	r7, r2
 8007826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007828:	849f      	strh	r7, [r3, #36]	; 0x24
 800782a:	f022 0203 	bic.w	r2, r2, #3
 800782e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8007830:	e001      	b.n	8007836 <GUI_DispString+0xfe>
 8007832:	1c54      	adds	r4, r2, #1
 8007834:	e793      	b.n	800775e <GUI_DispString+0x26>
 8007836:	b003      	add	sp, #12
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	200001b0 	.word	0x200001b0

08007840 <GUI_DEVICE__GetpDriver>:
 8007840:	2801      	cmp	r0, #1
 8007842:	dc09      	bgt.n	8007858 <GUI_DEVICE__GetpDriver+0x18>
 8007844:	4b05      	ldr	r3, [pc, #20]	; (800785c <GUI_DEVICE__GetpDriver+0x1c>)
 8007846:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800784a:	b120      	cbz	r0, 8007856 <GUI_DEVICE__GetpDriver+0x16>
 800784c:	68c3      	ldr	r3, [r0, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	b11b      	cbz	r3, 800785a <GUI_DEVICE__GetpDriver+0x1a>
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	e7f9      	b.n	800784a <GUI_DEVICE__GetpDriver+0xa>
 8007856:	4770      	bx	lr
 8007858:	2000      	movs	r0, #0
 800785a:	4770      	bx	lr
 800785c:	2001af14 	.word	0x2001af14

08007860 <GUI_DEVICE_Delete>:
 8007860:	f000 bd34 	b.w	80082cc <GUI_ALLOC_FreeFixedBlock>

08007864 <GUI_DEVICE_Create>:
 8007864:	2b01      	cmp	r3, #1
 8007866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007868:	4606      	mov	r6, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4617      	mov	r7, r2
 800786e:	461c      	mov	r4, r3
 8007870:	dd01      	ble.n	8007876 <GUI_DEVICE_Create+0x12>
 8007872:	2000      	movs	r0, #0
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007876:	201c      	movs	r0, #28
 8007878:	f000 fe88 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 800787c:	2800      	cmp	r0, #0
 800787e:	d0f8      	beq.n	8007872 <GUI_DEVICE_Create+0xe>
 8007880:	b10d      	cbz	r5, 8007886 <GUI_DEVICE_Create+0x22>
 8007882:	6105      	str	r5, [r0, #16]
 8007884:	e009      	b.n	800789a <GUI_DEVICE_Create+0x36>
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <GUI_DEVICE_Create+0x48>)
 8007888:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800788c:	b129      	cbz	r1, 800789a <GUI_DEVICE_Create+0x36>
 800788e:	680b      	ldr	r3, [r1, #0]
 8007890:	b10b      	cbz	r3, 8007896 <GUI_DEVICE_Create+0x32>
 8007892:	4619      	mov	r1, r3
 8007894:	e7fb      	b.n	800788e <GUI_DEVICE_Create+0x2a>
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	6103      	str	r3, [r0, #16]
 800789a:	2300      	movs	r3, #0
 800789c:	6083      	str	r3, [r0, #8]
 800789e:	6184      	str	r4, [r0, #24]
 80078a0:	8287      	strh	r7, [r0, #20]
 80078a2:	60c6      	str	r6, [r0, #12]
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	6043      	str	r3, [r0, #4]
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078aa:	bf00      	nop
 80078ac:	2001af14 	.word	0x2001af14

080078b0 <GUI_DEVICE_Unlink>:
 80078b0:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <GUI_DEVICE_Unlink+0x28>)
 80078b2:	6982      	ldr	r2, [r0, #24]
 80078b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078b8:	4281      	cmp	r1, r0
 80078ba:	bf04      	itt	eq
 80078bc:	6801      	ldreq	r1, [r0, #0]
 80078be:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 80078c2:	6843      	ldr	r3, [r0, #4]
 80078c4:	b10b      	cbz	r3, 80078ca <GUI_DEVICE_Unlink+0x1a>
 80078c6:	6802      	ldr	r2, [r0, #0]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	6802      	ldr	r2, [r0, #0]
 80078cc:	b102      	cbz	r2, 80078d0 <GUI_DEVICE_Unlink+0x20>
 80078ce:	6053      	str	r3, [r2, #4]
 80078d0:	2300      	movs	r3, #0
 80078d2:	6003      	str	r3, [r0, #0]
 80078d4:	6043      	str	r3, [r0, #4]
 80078d6:	4770      	bx	lr
 80078d8:	2001af14 	.word	0x2001af14

080078dc <GUI_DEVICE_Link>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	b338      	cbz	r0, 8007930 <GUI_DEVICE_Link+0x54>
 80078e0:	6982      	ldr	r2, [r0, #24]
 80078e2:	2a01      	cmp	r2, #1
 80078e4:	dc24      	bgt.n	8007930 <GUI_DEVICE_Link+0x54>
 80078e6:	4919      	ldr	r1, [pc, #100]	; (800794c <GUI_DEVICE_Link+0x70>)
 80078e8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80078ec:	460d      	mov	r5, r1
 80078ee:	b913      	cbnz	r3, 80078f6 <GUI_DEVICE_Link+0x1a>
 80078f0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80078f4:	e01a      	b.n	800792c <GUI_DEVICE_Link+0x50>
 80078f6:	6859      	ldr	r1, [r3, #4]
 80078f8:	b109      	cbz	r1, 80078fe <GUI_DEVICE_Link+0x22>
 80078fa:	460b      	mov	r3, r1
 80078fc:	e7fb      	b.n	80078f6 <GUI_DEVICE_Link+0x1a>
 80078fe:	68c1      	ldr	r1, [r0, #12]
 8007900:	680e      	ldr	r6, [r1, #0]
 8007902:	68d9      	ldr	r1, [r3, #12]
 8007904:	680c      	ldr	r4, [r1, #0]
 8007906:	42b4      	cmp	r4, r6
 8007908:	dd03      	ble.n	8007912 <GUI_DEVICE_Link+0x36>
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f8      	bne.n	8007902 <GUI_DEVICE_Link+0x26>
 8007910:	e00e      	b.n	8007930 <GUI_DEVICE_Link+0x54>
 8007912:	d102      	bne.n	800791a <GUI_DEVICE_Link+0x3e>
 8007914:	8a81      	ldrh	r1, [r0, #20]
 8007916:	2901      	cmp	r1, #1
 8007918:	d011      	beq.n	800793e <GUI_DEVICE_Link+0x62>
 800791a:	6859      	ldr	r1, [r3, #4]
 800791c:	b199      	cbz	r1, 8007946 <GUI_DEVICE_Link+0x6a>
 800791e:	6008      	str	r0, [r1, #0]
 8007920:	6041      	str	r1, [r0, #4]
 8007922:	6058      	str	r0, [r3, #4]
 8007924:	4298      	cmp	r0, r3
 8007926:	bf08      	it	eq
 8007928:	2300      	moveq	r3, #0
 800792a:	6003      	str	r3, [r0, #0]
 800792c:	2000      	movs	r0, #0
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	2001      	movs	r0, #1
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	68cb      	ldr	r3, [r1, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	42a3      	cmp	r3, r4
 800793a:	460b      	mov	r3, r1
 800793c:	dbed      	blt.n	800791a <GUI_DEVICE_Link+0x3e>
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	2900      	cmp	r1, #0
 8007942:	d1f7      	bne.n	8007934 <GUI_DEVICE_Link+0x58>
 8007944:	e7e9      	b.n	800791a <GUI_DEVICE_Link+0x3e>
 8007946:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800794a:	e7ea      	b.n	8007922 <GUI_DEVICE_Link+0x46>
 800794c:	2001af14 	.word	0x2001af14

08007950 <GUI_DEVICE_CreateAndLink>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	461d      	mov	r5, r3
 8007954:	f7ff ff86 	bl	8007864 <GUI_DEVICE_Create>
 8007958:	4604      	mov	r4, r0
 800795a:	b148      	cbz	r0, 8007970 <GUI_DEVICE_CreateAndLink+0x20>
 800795c:	f7ff ffbe 	bl	80078dc <GUI_DEVICE_Link>
 8007960:	68e3      	ldr	r3, [r4, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	b923      	cbnz	r3, 8007970 <GUI_DEVICE_CreateAndLink+0x20>
 8007966:	4b03      	ldr	r3, [pc, #12]	; (8007974 <GUI_DEVICE_CreateAndLink+0x24>)
 8007968:	3516      	adds	r5, #22
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8007970:	4620      	mov	r0, r4
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	200001b0 	.word	0x200001b0

08007978 <_OnExit>:
 8007978:	b510      	push	{r4, lr}
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <_OnExit+0x20>)
 800797c:	4807      	ldr	r0, [pc, #28]	; (800799c <_OnExit+0x24>)
 800797e:	2400      	movs	r4, #0
 8007980:	4621      	mov	r1, r4
 8007982:	2270      	movs	r2, #112	; 0x70
 8007984:	601c      	str	r4, [r3, #0]
 8007986:	f7ff f9fb 	bl	8006d80 <GUI__memset>
 800798a:	4621      	mov	r1, r4
 800798c:	4804      	ldr	r0, [pc, #16]	; (80079a0 <_OnExit+0x28>)
 800798e:	2208      	movs	r2, #8
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f7ff b9f4 	b.w	8006d80 <GUI__memset>
 8007998:	20019404 	.word	0x20019404
 800799c:	2001938c 	.word	0x2001938c
 80079a0:	2001af14 	.word	0x2001af14

080079a4 <_InitContext>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d19      	ldr	r5, [pc, #100]	; (8007a0c <_InitContext+0x68>)
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80079ae:	f103 0208 	add.w	r2, r3, #8
 80079b2:	639b      	str	r3, [r3, #56]	; 0x38
 80079b4:	641b      	str	r3, [r3, #64]	; 0x40
 80079b6:	6142      	str	r2, [r0, #20]
 80079b8:	7c5a      	ldrb	r2, [r3, #17]
 80079ba:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <_InitContext+0x6c>)
 80079bc:	4604      	mov	r4, r0
 80079be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80079c2:	68c3      	ldr	r3, [r0, #12]
 80079c4:	f104 0108 	add.w	r1, r4, #8
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	4798      	blx	r3
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <_InitContext+0x70>)
 80079ce:	6663      	str	r3, [r4, #100]	; 0x64
 80079d0:	4b11      	ldr	r3, [pc, #68]	; (8007a18 <_InitContext+0x74>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	61e3      	str	r3, [r4, #28]
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6163      	str	r3, [r4, #20]
 80079dc:	2301      	movs	r3, #1
 80079de:	7623      	strb	r3, [r4, #24]
 80079e0:	f001 fa30 	bl	8008e44 <WM_GetDesktopWindow>
 80079e4:	2303      	movs	r3, #3
 80079e6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80079ea:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80079ee:	6323      	str	r3, [r4, #48]	; 0x30
 80079f0:	6363      	str	r3, [r4, #52]	; 0x34
 80079f2:	64a0      	str	r0, [r4, #72]	; 0x48
 80079f4:	2000      	movs	r0, #0
 80079f6:	f004 fde9 	bl	800c5cc <LCD_SetBkColor>
 80079fa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80079fe:	f004 fded 	bl	800c5dc <LCD_SetColor>
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <_InitContext+0x78>)
 8007a04:	4a06      	ldr	r2, [pc, #24]	; (8007a20 <_InitContext+0x7c>)
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	bd38      	pop	{r3, r4, r5, pc}
 8007a0a:	bf00      	nop
 8007a0c:	200001b0 	.word	0x200001b0
 8007a10:	2001af14 	.word	0x2001af14
 8007a14:	0801214c 	.word	0x0801214c
 8007a18:	200001b4 	.word	0x200001b4
 8007a1c:	2001af0c 	.word	0x2001af0c
 8007a20:	080141e4 	.word	0x080141e4

08007a24 <GUI_SetDefaultFont>:
 8007a24:	4b01      	ldr	r3, [pc, #4]	; (8007a2c <GUI_SetDefaultFont+0x8>)
 8007a26:	6018      	str	r0, [r3, #0]
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	200001b4 	.word	0x200001b4

08007a30 <GUI_ClearRect>:
 8007a30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	4607      	mov	r7, r0
 8007a36:	2004      	movs	r0, #4
 8007a38:	469a      	mov	sl, r3
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	4691      	mov	r9, r2
 8007a3e:	f004 faa3 	bl	800bf88 <LCD_SetDrawMode>
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <GUI_ClearRect+0x60>)
 8007a44:	681c      	ldr	r4, [r3, #0]
 8007a46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007a48:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8007a4a:	442f      	add	r7, r5
 8007a4c:	4426      	add	r6, r4
 8007a4e:	4680      	mov	r8, r0
 8007a50:	444d      	add	r5, r9
 8007a52:	4454      	add	r4, sl
 8007a54:	4668      	mov	r0, sp
 8007a56:	f8ad 7000 	strh.w	r7, [sp]
 8007a5a:	f8ad 5004 	strh.w	r5, [sp, #4]
 8007a5e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8007a62:	f8ad 4006 	strh.w	r4, [sp, #6]
 8007a66:	f002 f8e5 	bl	8009c34 <WM__InitIVRSearch>
 8007a6a:	b928      	cbnz	r0, 8007a78 <GUI_ClearRect+0x48>
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	f004 fa8b 	bl	800bf88 <LCD_SetDrawMode>
 8007a72:	b002      	add	sp, #8
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	4638      	mov	r0, r7
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	462a      	mov	r2, r5
 8007a7e:	4623      	mov	r3, r4
 8007a80:	f004 fade 	bl	800c040 <LCD_FillRect>
 8007a84:	f002 f814 	bl	8009ab0 <WM__GetNextIVR>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d1f5      	bne.n	8007a78 <GUI_ClearRect+0x48>
 8007a8c:	e7ee      	b.n	8007a6c <GUI_ClearRect+0x3c>
 8007a8e:	bf00      	nop
 8007a90:	200001b0 	.word	0x200001b0

08007a94 <GUI_Clear>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	2000      	movs	r0, #0
 8007a98:	4601      	mov	r1, r0
 8007a9a:	f005 f9f7 	bl	800ce8c <GUI_GotoXY>
 8007a9e:	4804      	ldr	r0, [pc, #16]	; (8007ab0 <GUI_Clear+0x1c>)
 8007aa0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aac:	f7ff bfc0 	b.w	8007a30 <GUI_ClearRect>
 8007ab0:	ffffc001 	.word	0xffffc001

08007ab4 <GUI__RegisterExit>:
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <GUI__RegisterExit+0x20>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <GUI__RegisterExit+0x20>)
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20019388 	.word	0x20019388

08007ad8 <GUI__Config>:
 8007ad8:	b508      	push	{r3, lr}
 8007ada:	4b08      	ldr	r3, [pc, #32]	; (8007afc <GUI__Config+0x24>)
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	b962      	cbnz	r2, 8007afa <GUI__Config+0x22>
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f7fd fab6 	bl	8005054 <GUI_X_Config>
 8007ae8:	f7fd fae0 	bl	80050ac <LCD_X_Config>
 8007aec:	4804      	ldr	r0, [pc, #16]	; (8007b00 <GUI__Config+0x28>)
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <GUI__Config+0x2c>)
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007af6:	f7ff bfdd 	b.w	8007ab4 <GUI__RegisterExit>
 8007afa:	bd08      	pop	{r3, pc}
 8007afc:	20019404 	.word	0x20019404
 8007b00:	200193fc 	.word	0x200193fc
 8007b04:	08007979 	.word	0x08007979

08007b08 <GUI_Init>:
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <GUI_Init+0x88>)
 8007b10:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <GUI_Init+0x88>)
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <GUI_Init+0x8c>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <GUI_Init+0x90>)
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <GUI_Init+0x94>)
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <GUI_Init+0x90>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ba0 <GUI_Init+0x98>)
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d000      	beq.n	8007b32 <GUI_Init+0x2a>
 8007b30:	e7fe      	b.n	8007b30 <GUI_Init+0x28>
 8007b32:	f7ff ffd1 	bl	8007ad8 <GUI__Config>
 8007b36:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <GUI_Init+0x9c>)
 8007b38:	222e      	movs	r2, #46	; 0x2e
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	f7fd faaa 	bl	8005094 <GUI_X_Init>
 8007b40:	4819      	ldr	r0, [pc, #100]	; (8007ba8 <GUI_Init+0xa0>)
 8007b42:	f7ff ff2f 	bl	80079a4 <_InitContext>
 8007b46:	f004 fc9f 	bl	800c488 <emWin_LCD_Init>
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	f004 f942 	bl	800bdd4 <LCD_GetXSizeDisplay>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <GUI_Init+0x58>
 8007b56:	f004 f943 	bl	800bde0 <LCD_GetYSizeDisplay>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d109      	bne.n	8007b74 <GUI_Init+0x6c>
 8007b60:	f004 f924 	bl	800bdac <LCD_GetXSizeMax>
 8007b64:	4604      	mov	r4, r0
 8007b66:	f004 f924 	bl	800bdb2 <LCD_GetYSizeMax>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f004 f926 	bl	800bdc0 <LCD_SetDisplaySize>
 8007b74:	2000      	movs	r0, #0
 8007b76:	2100      	movs	r1, #0
 8007b78:	f005 f88e 	bl	800cc98 <GUI_SetOrg>
 8007b7c:	f002 fa98 	bl	800a0b0 <WM_Init>
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <GUI_Init+0xa4>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}
 8007b90:	e0002000 	.word	0xe0002000
 8007b94:	40023008 	.word	0x40023008
 8007b98:	40023000 	.word	0x40023000
 8007b9c:	f407a5c2 	.word	0xf407a5c2
 8007ba0:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ba4:	2001aee6 	.word	0x2001aee6
 8007ba8:	2001938c 	.word	0x2001938c
 8007bac:	2001af04 	.word	0x2001af04

08007bb0 <GUIPROP__FindChar>:
 8007bb0:	b138      	cbz	r0, 8007bc2 <GUIPROP__FindChar+0x12>
 8007bb2:	8803      	ldrh	r3, [r0, #0]
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	d802      	bhi.n	8007bbe <GUIPROP__FindChar+0xe>
 8007bb8:	8843      	ldrh	r3, [r0, #2]
 8007bba:	428b      	cmp	r3, r1
 8007bbc:	d201      	bcs.n	8007bc2 <GUIPROP__FindChar+0x12>
 8007bbe:	6880      	ldr	r0, [r0, #8]
 8007bc0:	e7f6      	b.n	8007bb0 <GUIPROP__FindChar>
 8007bc2:	4770      	bx	lr

08007bc4 <GUIPROP_DispChar>:
 8007bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	4c38      	ldr	r4, [pc, #224]	; (8007cac <GUIPROP_DispChar+0xe8>)
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	b089      	sub	sp, #36	; 0x24
 8007bd6:	69d8      	ldr	r0, [r3, #28]
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7ff ffe9 	bl	8007bb0 <GUIPROP__FindChar>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d061      	beq.n	8007ca6 <GUIPROP_DispChar+0xe2>
 8007be2:	f8b0 8000 	ldrh.w	r8, [r0]
 8007be6:	6847      	ldr	r7, [r0, #4]
 8007be8:	ebc8 0805 	rsb	r8, r8, r5
 8007bec:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8007bf0:	4648      	mov	r0, r9
 8007bf2:	f896 b002 	ldrb.w	fp, [r6, #2]
 8007bf6:	f004 f9c7 	bl	800bf88 <LCD_SetDrawMode>
 8007bfa:	6825      	ldr	r5, [r4, #0]
 8007bfc:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8007c00:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8007c04:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8007c08:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8007c0c:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8007c10:	9306      	str	r3, [sp, #24]
 8007c12:	4682      	mov	sl, r0
 8007c14:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8007c18:	f8cd c000 	str.w	ip, [sp]
 8007c1c:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8007c20:	f8cd e004 	str.w	lr, [sp, #4]
 8007c24:	f04f 0e01 	mov.w	lr, #1
 8007c28:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c2c:	f8cd e008 	str.w	lr, [sp, #8]
 8007c30:	6873      	ldr	r3, [r6, #4]
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	9505      	str	r5, [sp, #20]
 8007c3a:	f004 fb09 	bl	800c250 <LCD_DrawBitmap>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	69da      	ldr	r2, [r3, #28]
 8007c42:	f892 b019 	ldrb.w	fp, [r2, #25]
 8007c46:	7e11      	ldrb	r1, [r2, #24]
 8007c48:	458b      	cmp	fp, r1
 8007c4a:	d920      	bls.n	8007c8e <GUIPROP_DispChar+0xca>
 8007c4c:	f1b9 0f02 	cmp.w	r9, #2
 8007c50:	7ed5      	ldrb	r5, [r2, #27]
 8007c52:	d01c      	beq.n	8007c8e <GUIPROP_DispChar+0xca>
 8007c54:	9107      	str	r1, [sp, #28]
 8007c56:	f005 f936 	bl	800cec6 <GUI_GetColor>
 8007c5a:	4681      	mov	r9, r0
 8007c5c:	f005 f92c 	bl	800ceb8 <GUI_GetBkColor>
 8007c60:	f7ff fc90 	bl	8007584 <GUI_SetColor>
 8007c64:	6824      	ldr	r4, [r4, #0]
 8007c66:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8007c6a:	69e2      	ldr	r2, [r4, #28]
 8007c6c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8007c70:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8007c74:	7ed2      	ldrb	r2, [r2, #27]
 8007c76:	9907      	ldr	r1, [sp, #28]
 8007c78:	fb07 0202 	mla	r2, r7, r2, r0
 8007c7c:	fb01 3105 	mla	r1, r1, r5, r3
 8007c80:	fb0b 3305 	mla	r3, fp, r5, r3
 8007c84:	f004 f9dc 	bl	800c040 <LCD_FillRect>
 8007c88:	4648      	mov	r0, r9
 8007c8a:	f7ff fc7b 	bl	8007584 <GUI_SetColor>
 8007c8e:	4650      	mov	r0, sl
 8007c90:	f004 f97a 	bl	800bf88 <LCD_SetDrawMode>
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <GUIPROP_DispChar+0xe8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69da      	ldr	r2, [r3, #28]
 8007c9a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8007c9c:	7e90      	ldrb	r0, [r2, #26]
 8007c9e:	7872      	ldrb	r2, [r6, #1]
 8007ca0:	fb00 1202 	mla	r2, r0, r2, r1
 8007ca4:	845a      	strh	r2, [r3, #34]	; 0x22
 8007ca6:	b009      	add	sp, #36	; 0x24
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	200001b0 	.word	0x200001b0

08007cb0 <GUIPROP_GetCharDistX>:
 8007cb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <GUIPROP_GetCharDistX+0x38>)
 8007cb2:	b570      	push	{r4, r5, r6, lr}
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69dd      	ldr	r5, [r3, #28]
 8007cb8:	4606      	mov	r6, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	69e8      	ldr	r0, [r5, #28]
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	f7ff ff76 	bl	8007bb0 <GUIPROP__FindChar>
 8007cc4:	b170      	cbz	r0, 8007ce4 <GUIPROP_GetCharDistX+0x34>
 8007cc6:	8803      	ldrh	r3, [r0, #0]
 8007cc8:	6842      	ldr	r2, [r0, #4]
 8007cca:	1af6      	subs	r6, r6, r3
 8007ccc:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8007cd0:	7858      	ldrb	r0, [r3, #1]
 8007cd2:	7eab      	ldrb	r3, [r5, #26]
 8007cd4:	fb10 f003 	smulbb	r0, r0, r3
 8007cd8:	b124      	cbz	r4, 8007ce4 <GUIPROP_GetCharDistX+0x34>
 8007cda:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8007cde:	fb12 f303 	smulbb	r3, r2, r3
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd70      	pop	{r4, r5, r6, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200001b0 	.word	0x200001b0

08007cec <GUIPROP_GetFontInfo>:
 8007cec:	2301      	movs	r3, #1
 8007cee:	800b      	strh	r3, [r1, #0]
 8007cf0:	4770      	bx	lr

08007cf2 <GUIPROP_IsInFont>:
 8007cf2:	b508      	push	{r3, lr}
 8007cf4:	69c0      	ldr	r0, [r0, #28]
 8007cf6:	f7ff ff5b 	bl	8007bb0 <GUIPROP__FindChar>
 8007cfa:	3000      	adds	r0, #0
 8007cfc:	bf18      	it	ne
 8007cfe:	2001      	movne	r0, #1
 8007d00:	bd08      	pop	{r3, pc}
	...

08007d04 <GUIMONO_DispChar>:
 8007d04:	4b52      	ldr	r3, [pc, #328]	; (8007e50 <GUIMONO_DispChar+0x14c>)
 8007d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69d9      	ldr	r1, [r3, #28]
 8007d0e:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8007d10:	69cc      	ldr	r4, [r1, #28]
 8007d12:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8007d14:	89a2      	ldrh	r2, [r4, #12]
 8007d16:	4290      	cmp	r0, r2
 8007d18:	b08b      	sub	sp, #44	; 0x2c
 8007d1a:	d308      	bcc.n	8007d2e <GUIMONO_DispChar+0x2a>
 8007d1c:	89e6      	ldrh	r6, [r4, #14]
 8007d1e:	4286      	cmp	r6, r0
 8007d20:	d305      	bcc.n	8007d2e <GUIMONO_DispChar+0x2a>
 8007d22:	f8d4 9000 	ldr.w	r9, [r4]
 8007d26:	1a82      	subs	r2, r0, r2
 8007d28:	f04f 3bff 	mov.w	fp, #4294967295
 8007d2c:	e015      	b.n	8007d5a <GUIMONO_DispChar+0x56>
 8007d2e:	68a2      	ldr	r2, [r4, #8]
 8007d30:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	f000 8081 	beq.w	8007e3c <GUIMONO_DispChar+0x138>
 8007d3a:	8816      	ldrh	r6, [r2, #0]
 8007d3c:	42b0      	cmp	r0, r6
 8007d3e:	d37d      	bcc.n	8007e3c <GUIMONO_DispChar+0x138>
 8007d40:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8007d44:	4584      	cmp	ip, r0
 8007d46:	d379      	bcc.n	8007e3c <GUIMONO_DispChar+0x138>
 8007d48:	6852      	ldr	r2, [r2, #4]
 8007d4a:	1b80      	subs	r0, r0, r6
 8007d4c:	b280      	uxth	r0, r0
 8007d4e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8007d52:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8007d56:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8007d5a:	1c50      	adds	r0, r2, #1
 8007d5c:	d06e      	beq.n	8007e3c <GUIMONO_DispChar+0x138>
 8007d5e:	f891 8018 	ldrb.w	r8, [r1, #24]
 8007d62:	7ca1      	ldrb	r1, [r4, #18]
 8007d64:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8007d68:	7c26      	ldrb	r6, [r4, #16]
 8007d6a:	9206      	str	r2, [sp, #24]
 8007d6c:	fb18 f101 	smulbb	r1, r8, r1
 8007d70:	9107      	str	r1, [sp, #28]
 8007d72:	fa0f f18a 	sxth.w	r1, sl
 8007d76:	4608      	mov	r0, r1
 8007d78:	9108      	str	r1, [sp, #32]
 8007d7a:	f004 f905 	bl	800bf88 <LCD_SetDrawMode>
 8007d7e:	4934      	ldr	r1, [pc, #208]	; (8007e50 <GUIMONO_DispChar+0x14c>)
 8007d80:	9009      	str	r0, [sp, #36]	; 0x24
 8007d82:	680b      	ldr	r3, [r1, #0]
 8007d84:	9a06      	ldr	r2, [sp, #24]
 8007d86:	69d9      	ldr	r1, [r3, #28]
 8007d88:	7e88      	ldrb	r0, [r1, #26]
 8007d8a:	9000      	str	r0, [sp, #0]
 8007d8c:	7ec9      	ldrb	r1, [r1, #27]
 8007d8e:	9101      	str	r1, [sp, #4]
 8007d90:	2101      	movs	r1, #1
 8007d92:	9102      	str	r1, [sp, #8]
 8007d94:	7ca1      	ldrb	r1, [r4, #18]
 8007d96:	9103      	str	r1, [sp, #12]
 8007d98:	9907      	ldr	r1, [sp, #28]
 8007d9a:	fb01 9202 	mla	r2, r1, r2, r9
 8007d9e:	9204      	str	r2, [sp, #16]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	9305      	str	r3, [sp, #20]
 8007da4:	b23f      	sxth	r7, r7
 8007da6:	b22d      	sxth	r5, r5
 8007da8:	4638      	mov	r0, r7
 8007daa:	4629      	mov	r1, r5
 8007dac:	4632      	mov	r2, r6
 8007dae:	4643      	mov	r3, r8
 8007db0:	f004 fa4e 	bl	800c250 <LCD_DrawBitmap>
 8007db4:	f1bb 3fff 	cmp.w	fp, #4294967295
 8007db8:	d01b      	beq.n	8007df2 <GUIMONO_DispChar+0xee>
 8007dba:	f04a 0002 	orr.w	r0, sl, #2
 8007dbe:	b200      	sxth	r0, r0
 8007dc0:	f004 f8e2 	bl	800bf88 <LCD_SetDrawMode>
 8007dc4:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <GUIMONO_DispChar+0x14c>)
 8007dc6:	6813      	ldr	r3, [r2, #0]
 8007dc8:	69da      	ldr	r2, [r3, #28]
 8007dca:	7e91      	ldrb	r1, [r2, #26]
 8007dcc:	9100      	str	r1, [sp, #0]
 8007dce:	7ed2      	ldrb	r2, [r2, #27]
 8007dd0:	9201      	str	r2, [sp, #4]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	9102      	str	r1, [sp, #8]
 8007dd6:	9907      	ldr	r1, [sp, #28]
 8007dd8:	7ca2      	ldrb	r2, [r4, #18]
 8007dda:	9203      	str	r2, [sp, #12]
 8007ddc:	fb01 920b 	mla	r2, r1, fp, r9
 8007de0:	9204      	str	r2, [sp, #16]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	4638      	mov	r0, r7
 8007de8:	4629      	mov	r1, r5
 8007dea:	4632      	mov	r2, r6
 8007dec:	4643      	mov	r3, r8
 8007dee:	f004 fa2f 	bl	800c250 <LCD_DrawBitmap>
 8007df2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8007e50 <GUIMONO_DispChar+0x14c>
 8007df6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	7e5a      	ldrb	r2, [r3, #25]
 8007dfe:	7e1b      	ldrb	r3, [r3, #24]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d917      	bls.n	8007e34 <GUIMONO_DispChar+0x130>
 8007e04:	9a08      	ldr	r2, [sp, #32]
 8007e06:	2a02      	cmp	r2, #2
 8007e08:	d014      	beq.n	8007e34 <GUIMONO_DispChar+0x130>
 8007e0a:	f08a 0004 	eor.w	r0, sl, #4
 8007e0e:	b200      	sxth	r0, r0
 8007e10:	f004 f8ba 	bl	800bf88 <LCD_SetDrawMode>
 8007e14:	f8d8 3000 	ldr.w	r3, [r8]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f893 e018 	ldrb.w	lr, [r3, #24]
 8007e1e:	7ed9      	ldrb	r1, [r3, #27]
 8007e20:	7e9a      	ldrb	r2, [r3, #26]
 8007e22:	7e5b      	ldrb	r3, [r3, #25]
 8007e24:	4638      	mov	r0, r7
 8007e26:	fb0e 5101 	mla	r1, lr, r1, r5
 8007e2a:	fb06 7202 	mla	r2, r6, r2, r7
 8007e2e:	442b      	add	r3, r5
 8007e30:	f004 f906 	bl	800c040 <LCD_FillRect>
 8007e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e36:	b2d8      	uxtb	r0, r3
 8007e38:	f004 f8a6 	bl	800bf88 <LCD_SetDrawMode>
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <GUIMONO_DispChar+0x14c>)
 8007e3e:	7c61      	ldrb	r1, [r4, #17]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8007e44:	440a      	add	r2, r1
 8007e46:	845a      	strh	r2, [r3, #34]	; 0x22
 8007e48:	b00b      	add	sp, #44	; 0x2c
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	bf00      	nop
 8007e50:	200001b0 	.word	0x200001b0

08007e54 <GUIMONO_GetCharDistX>:
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <GUIMONO_GetCharDistX+0x14>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	b109      	cbz	r1, 8007e62 <GUIMONO_GetCharDistX+0xe>
 8007e5e:	7c1a      	ldrb	r2, [r3, #16]
 8007e60:	600a      	str	r2, [r1, #0]
 8007e62:	7c58      	ldrb	r0, [r3, #17]
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	200001b0 	.word	0x200001b0

08007e6c <GUIMONO_GetFontInfo>:
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	800b      	strh	r3, [r1, #0]
 8007e70:	4770      	bx	lr

08007e72 <GUIMONO_IsInFont>:
 8007e72:	69c3      	ldr	r3, [r0, #28]
 8007e74:	899a      	ldrh	r2, [r3, #12]
 8007e76:	428a      	cmp	r2, r1
 8007e78:	d802      	bhi.n	8007e80 <GUIMONO_IsInFont+0xe>
 8007e7a:	89da      	ldrh	r2, [r3, #14]
 8007e7c:	428a      	cmp	r2, r1
 8007e7e:	d20f      	bcs.n	8007ea0 <GUIMONO_IsInFont+0x2e>
 8007e80:	6898      	ldr	r0, [r3, #8]
 8007e82:	b180      	cbz	r0, 8007ea6 <GUIMONO_IsInFont+0x34>
 8007e84:	8803      	ldrh	r3, [r0, #0]
 8007e86:	4299      	cmp	r1, r3
 8007e88:	d30c      	bcc.n	8007ea4 <GUIMONO_IsInFont+0x32>
 8007e8a:	8842      	ldrh	r2, [r0, #2]
 8007e8c:	428a      	cmp	r2, r1
 8007e8e:	d309      	bcc.n	8007ea4 <GUIMONO_IsInFont+0x32>
 8007e90:	1ac9      	subs	r1, r1, r3
 8007e92:	6842      	ldr	r2, [r0, #4]
 8007e94:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8007e98:	43c0      	mvns	r0, r0
 8007e9a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8007e9e:	4770      	bx	lr
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	4770      	bx	lr
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	4770      	bx	lr

08007ea8 <_Log2VisBuffered>:
 8007ea8:	4770      	bx	lr
	...

08007eac <_DispLine>:
 8007eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eae:	4615      	mov	r5, r2
 8007eb0:	ab02      	add	r3, sp, #8
 8007eb2:	4a1a      	ldr	r2, [pc, #104]	; (8007f1c <_DispLine+0x70>)
 8007eb4:	f843 1d08 	str.w	r1, [r3, #-8]!
 8007eb8:	9001      	str	r0, [sp, #4]
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	4c18      	ldr	r4, [pc, #96]	; (8007f20 <_DispLine+0x74>)
 8007ebe:	4669      	mov	r1, sp
 8007ec0:	4790      	blx	r2
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	9001      	str	r0, [sp, #4]
 8007ec6:	6958      	ldr	r0, [r3, #20]
 8007ec8:	b958      	cbnz	r0, 8007ee2 <_DispLine+0x36>
 8007eca:	2001      	movs	r0, #1
 8007ecc:	f004 fc02 	bl	800c6d4 <GUI__ManageCache>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	b1bb      	cbz	r3, 8007f08 <_DispLine+0x5c>
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	9801      	ldr	r0, [sp, #4]
 8007edc:	9900      	ldr	r1, [sp, #0]
 8007ede:	4798      	blx	r3
 8007ee0:	e017      	b.n	8007f12 <_DispLine+0x66>
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f004 ff70 	bl	800cdc8 <GUI_RectsIntersect>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1ee      	bne.n	8007eca <_DispLine+0x1e>
 8007eec:	e014      	b.n	8007f18 <_DispLine+0x6c>
 8007eee:	a801      	add	r0, sp, #4
 8007ef0:	f004 fe02 	bl	800caf8 <GUI_UC__GetCharCodeInc>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4605      	mov	r5, r0
 8007efc:	4798      	blx	r3
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <_DispLine+0x78>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	b10b      	cbz	r3, 8007f08 <_DispLine+0x5c>
 8007f04:	4628      	mov	r0, r5
 8007f06:	4798      	blx	r3
 8007f08:	9b00      	ldr	r3, [sp, #0]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	daed      	bge.n	8007eee <_DispLine+0x42>
 8007f12:	2000      	movs	r0, #0
 8007f14:	f004 fbde 	bl	800c6d4 <GUI__ManageCache>
 8007f18:	b003      	add	sp, #12
 8007f1a:	bd30      	pop	{r4, r5, pc}
 8007f1c:	200001b8 	.word	0x200001b8
 8007f20:	200001b0 	.word	0x200001b0
 8007f24:	2001af00 	.word	0x2001af00

08007f28 <GUI__GetLineNumChars>:
 8007f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	9001      	str	r0, [sp, #4]
 8007f2e:	4604      	mov	r4, r0
 8007f30:	b198      	cbz	r0, 8007f5a <GUI__GetLineNumChars+0x32>
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <GUI__GetLineNumChars+0x38>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	b10b      	cbz	r3, 8007f40 <GUI__GetLineNumChars+0x18>
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	b90b      	cbnz	r3, 8007f44 <GUI__GetLineNumChars+0x1c>
 8007f40:	2400      	movs	r4, #0
 8007f42:	e008      	b.n	8007f56 <GUI__GetLineNumChars+0x2e>
 8007f44:	4798      	blx	r3
 8007f46:	e009      	b.n	8007f5c <GUI__GetLineNumChars+0x34>
 8007f48:	a801      	add	r0, sp, #4
 8007f4a:	f004 fdd5 	bl	800caf8 <GUI_UC__GetCharCodeInc>
 8007f4e:	b120      	cbz	r0, 8007f5a <GUI__GetLineNumChars+0x32>
 8007f50:	280a      	cmp	r0, #10
 8007f52:	d002      	beq.n	8007f5a <GUI__GetLineNumChars+0x32>
 8007f54:	3401      	adds	r4, #1
 8007f56:	42ac      	cmp	r4, r5
 8007f58:	dbf6      	blt.n	8007f48 <GUI__GetLineNumChars+0x20>
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	b003      	add	sp, #12
 8007f5e:	bd30      	pop	{r4, r5, pc}
 8007f60:	200001b0 	.word	0x200001b0

08007f64 <GUI__GetOverlap>:
 8007f64:	b513      	push	{r0, r1, r4, lr}
 8007f66:	a902      	add	r1, sp, #8
 8007f68:	2400      	movs	r4, #0
 8007f6a:	f841 4d04 	str.w	r4, [r1, #-4]!
 8007f6e:	f000 f8b7 	bl	80080e0 <GUI_GetCharDistXEx>
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	4283      	cmp	r3, r0
 8007f76:	bfcc      	ite	gt
 8007f78:	ebc0 0003 	rsbgt	r0, r0, r3
 8007f7c:	4620      	movle	r0, r4
 8007f7e:	b002      	add	sp, #8
 8007f80:	bd10      	pop	{r4, pc}
	...

08007f84 <GUI__GetLineDistX>:
 8007f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f86:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <GUI__GetLineDistX+0x58>)
 8007f88:	9001      	str	r0, [sp, #4]
 8007f8a:	ab02      	add	r3, sp, #8
 8007f8c:	6812      	ldr	r2, [r2, #0]
 8007f8e:	f843 1d08 	str.w	r1, [r3, #-8]!
 8007f92:	4669      	mov	r1, sp
 8007f94:	4790      	blx	r2
 8007f96:	9001      	str	r0, [sp, #4]
 8007f98:	b1f0      	cbz	r0, 8007fd8 <GUI__GetLineDistX+0x54>
 8007f9a:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <GUI__GetLineDistX+0x5c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	b10b      	cbz	r3, 8007fa8 <GUI__GetLineDistX+0x24>
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	b913      	cbnz	r3, 8007fae <GUI__GetLineDistX+0x2a>
 8007fa8:	2500      	movs	r5, #0
 8007faa:	462c      	mov	r4, r5
 8007fac:	e002      	b.n	8007fb4 <GUI__GetLineDistX+0x30>
 8007fae:	9900      	ldr	r1, [sp, #0]
 8007fb0:	4798      	blx	r3
 8007fb2:	e011      	b.n	8007fd8 <GUI__GetLineDistX+0x54>
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	db07      	blt.n	8007fce <GUI__GetLineDistX+0x4a>
 8007fbe:	a801      	add	r0, sp, #4
 8007fc0:	f004 fd9a 	bl	800caf8 <GUI_UC__GetCharCodeInc>
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	f000 f881 	bl	80080cc <GUI_GetCharDistX>
 8007fca:	4404      	add	r4, r0
 8007fcc:	e7f2      	b.n	8007fb4 <GUI__GetLineDistX+0x30>
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7ff ffc8 	bl	8007f64 <GUI__GetOverlap>
 8007fd4:	4420      	add	r0, r4
 8007fd6:	e7ff      	b.n	8007fd8 <GUI__GetLineDistX+0x54>
 8007fd8:	b003      	add	sp, #12
 8007fda:	bd30      	pop	{r4, r5, pc}
 8007fdc:	200001b8 	.word	0x200001b8
 8007fe0:	200001b0 	.word	0x200001b0

08007fe4 <GUI__DispLine>:
 8007fe4:	4b27      	ldr	r3, [pc, #156]	; (8008084 <GUI__DispLine+0xa0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fea:	4605      	mov	r5, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	b163      	cbz	r3, 800800a <GUI__DispLine+0x26>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f001 fe1f 	bl	8009c34 <WM__InitIVRSearch>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d041      	beq.n	800807e <GUI__DispLine+0x9a>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	466a      	mov	r2, sp
 8008000:	f7ff ff54 	bl	8007eac <_DispLine>
 8008004:	f001 fd54 	bl	8009ab0 <WM__GetNextIVR>
 8008008:	e7f5      	b.n	8007ff6 <GUI__DispLine+0x12>
 800800a:	6810      	ldr	r0, [r2, #0]
 800800c:	6851      	ldr	r1, [r2, #4]
 800800e:	4e1e      	ldr	r6, [pc, #120]	; (8008088 <GUI__DispLine+0xa4>)
 8008010:	466b      	mov	r3, sp
 8008012:	c303      	stmia	r3!, {r0, r1}
 8008014:	6833      	ldr	r3, [r6, #0]
 8008016:	f8bd 1000 	ldrh.w	r1, [sp]
 800801a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800801e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008022:	4411      	add	r1, r2
 8008024:	f8ad 1000 	strh.w	r1, [sp]
 8008028:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800802c:	4419      	add	r1, r3
 800802e:	f8ad 1002 	strh.w	r1, [sp, #2]
 8008032:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008036:	440a      	add	r2, r1
 8008038:	f8ad 2004 	strh.w	r2, [sp, #4]
 800803c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008040:	4668      	mov	r0, sp
 8008042:	4413      	add	r3, r2
 8008044:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008048:	f001 fdf4 	bl	8009c34 <WM__InitIVRSearch>
 800804c:	6833      	ldr	r3, [r6, #0]
 800804e:	b940      	cbnz	r0, 8008062 <GUI__DispLine+0x7e>
 8008050:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8008052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008054:	1a8a      	subs	r2, r1, r2
 8008056:	845a      	strh	r2, [r3, #34]	; 0x22
 8008058:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800805a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800805c:	1a8a      	subs	r2, r1, r2
 800805e:	849a      	strh	r2, [r3, #36]	; 0x24
 8008060:	e00d      	b.n	800807e <GUI__DispLine+0x9a>
 8008062:	f8bd 2000 	ldrh.w	r2, [sp]
 8008066:	845a      	strh	r2, [r3, #34]	; 0x22
 8008068:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800806c:	849a      	strh	r2, [r3, #36]	; 0x24
 800806e:	4628      	mov	r0, r5
 8008070:	4621      	mov	r1, r4
 8008072:	466a      	mov	r2, sp
 8008074:	f7ff ff1a 	bl	8007eac <_DispLine>
 8008078:	f001 fd1a 	bl	8009ab0 <WM__GetNextIVR>
 800807c:	e7e6      	b.n	800804c <GUI__DispLine+0x68>
 800807e:	b002      	add	sp, #8
 8008080:	bd70      	pop	{r4, r5, r6, pc}
 8008082:	bf00      	nop
 8008084:	2001aee8 	.word	0x2001aee8
 8008088:	200001b0 	.word	0x200001b0

0800808c <GUI_GetYAdjust>:
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <GUI_GetYAdjust+0x2c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008092:	f002 020c 	and.w	r2, r2, #12
 8008096:	2a08      	cmp	r2, #8
 8008098:	d007      	beq.n	80080aa <GUI_GetYAdjust+0x1e>
 800809a:	2a0c      	cmp	r2, #12
 800809c:	d005      	beq.n	80080aa <GUI_GetYAdjust+0x1e>
 800809e:	2a04      	cmp	r2, #4
 80080a0:	d107      	bne.n	80080b2 <GUI_GetYAdjust+0x26>
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	7e18      	ldrb	r0, [r3, #24]
 80080a6:	3801      	subs	r0, #1
 80080a8:	4770      	bx	lr
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	7e18      	ldrb	r0, [r3, #24]
 80080ae:	0840      	lsrs	r0, r0, #1
 80080b0:	4770      	bx	lr
 80080b2:	2000      	movs	r0, #0
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	200001b0 	.word	0x200001b0

080080bc <GUI_GetFontDistY>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <GUI_GetFontDistY+0xc>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	7e58      	ldrb	r0, [r3, #25]
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	200001b0 	.word	0x200001b0

080080cc <GUI_GetCharDistX>:
 80080cc:	b508      	push	{r3, lr}
 80080ce:	4b03      	ldr	r3, [pc, #12]	; (80080dc <GUI_GetCharDistX+0x10>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	2100      	movs	r1, #0
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4798      	blx	r3
 80080da:	bd08      	pop	{r3, pc}
 80080dc:	200001b0 	.word	0x200001b0

080080e0 <GUI_GetCharDistXEx>:
 80080e0:	b508      	push	{r3, lr}
 80080e2:	4b03      	ldr	r3, [pc, #12]	; (80080f0 <GUI_GetCharDistXEx+0x10>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	4798      	blx	r3
 80080ec:	bd08      	pop	{r3, pc}
 80080ee:	bf00      	nop
 80080f0:	200001b0 	.word	0x200001b0

080080f4 <_PushFreeBlock>:
 80080f4:	4b07      	ldr	r3, [pc, #28]	; (8008114 <_PushFreeBlock+0x20>)
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080fa:	3201      	adds	r2, #1
 80080fc:	b510      	push	{r4, lr}
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008102:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8008106:	6061      	str	r1, [r4, #4]
 8008108:	2100      	movs	r1, #0
 800810a:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800810e:	6258      	str	r0, [r3, #36]	; 0x24
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	2001af24 	.word	0x2001af24

08008118 <_OnExit>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d0b      	ldr	r5, [pc, #44]	; (8008148 <_OnExit+0x30>)
 800811c:	2400      	movs	r4, #0
 800811e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8008122:	4621      	mov	r1, r4
 8008124:	2280      	movs	r2, #128	; 0x80
 8008126:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800812a:	f7fe fe29 	bl	8006d80 <GUI__memset>
 800812e:	4628      	mov	r0, r5
 8008130:	4621      	mov	r1, r4
 8008132:	22c0      	movs	r2, #192	; 0xc0
 8008134:	f7fe fe24 	bl	8006d80 <GUI__memset>
 8008138:	4621      	mov	r1, r4
 800813a:	4804      	ldr	r0, [pc, #16]	; (800814c <_OnExit+0x34>)
 800813c:	220c      	movs	r2, #12
 800813e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008142:	f7fe be1d 	b.w	8006d80 <GUI__memset>
 8008146:	bf00      	nop
 8008148:	2001af24 	.word	0x2001af24
 800814c:	20019408 	.word	0x20019408

08008150 <_RemoveFreeBlock>:
 8008150:	b510      	push	{r4, lr}
 8008152:	6842      	ldr	r2, [r0, #4]
 8008154:	230f      	movs	r3, #15
 8008156:	490d      	ldr	r1, [pc, #52]	; (800818c <_RemoveFreeBlock+0x3c>)
 8008158:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800815c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800815e:	42a2      	cmp	r2, r4
 8008160:	d203      	bcs.n	800816a <_RemoveFreeBlock+0x1a>
 8008162:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008166:	d2f6      	bcs.n	8008156 <_RemoveFreeBlock+0x6>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	2b0f      	cmp	r3, #15
 800816c:	d80c      	bhi.n	8008188 <_RemoveFreeBlock+0x38>
 800816e:	680c      	ldr	r4, [r1, #0]
 8008170:	1aa2      	subs	r2, r4, r2
 8008172:	600a      	str	r2, [r1, #0]
 8008174:	6882      	ldr	r2, [r0, #8]
 8008176:	68c0      	ldr	r0, [r0, #12]
 8008178:	b102      	cbz	r2, 800817c <_RemoveFreeBlock+0x2c>
 800817a:	6050      	str	r0, [r2, #4]
 800817c:	b108      	cbz	r0, 8008182 <_RemoveFreeBlock+0x32>
 800817e:	6002      	str	r2, [r0, #0]
 8008180:	bd10      	pop	{r4, pc}
 8008182:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008186:	645a      	str	r2, [r3, #68]	; 0x44
 8008188:	bd10      	pop	{r4, pc}
 800818a:	bf00      	nop
 800818c:	2001af24 	.word	0x2001af24

08008190 <_AddFreeMemory>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	4e26      	ldr	r6, [pc, #152]	; (800822c <_AddFreeMemory+0x9c>)
 8008194:	68f3      	ldr	r3, [r6, #12]
 8008196:	1e5a      	subs	r2, r3, #1
 8008198:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800819a:	4605      	mov	r5, r0
 800819c:	4413      	add	r3, r2
 800819e:	1808      	adds	r0, r1, r0
 80081a0:	4298      	cmp	r0, r3
 80081a2:	460c      	mov	r4, r1
 80081a4:	d805      	bhi.n	80081b2 <_AddFreeMemory+0x22>
 80081a6:	594b      	ldr	r3, [r1, r5]
 80081a8:	b91b      	cbnz	r3, 80081b2 <_AddFreeMemory+0x22>
 80081aa:	6843      	ldr	r3, [r0, #4]
 80081ac:	441d      	add	r5, r3
 80081ae:	f7ff ffcf 	bl	8008150 <_RemoveFreeBlock>
 80081b2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d90a      	bls.n	80081ce <_AddFreeMemory+0x3e>
 80081b8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80081bc:	1be7      	subs	r7, r4, r7
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	b92b      	cbnz	r3, 80081ce <_AddFreeMemory+0x3e>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4638      	mov	r0, r7
 80081c6:	441d      	add	r5, r3
 80081c8:	f7ff ffc2 	bl	8008150 <_RemoveFreeBlock>
 80081cc:	463c      	mov	r4, r7
 80081ce:	230f      	movs	r3, #15
 80081d0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80081d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80081d6:	4295      	cmp	r5, r2
 80081d8:	d203      	bcs.n	80081e2 <_AddFreeMemory+0x52>
 80081da:	f113 33ff 	adds.w	r3, r3, #4294967295
 80081de:	d2f7      	bcs.n	80081d0 <_AddFreeMemory+0x40>
 80081e0:	e022      	b.n	8008228 <_AddFreeMemory+0x98>
 80081e2:	2b0f      	cmp	r3, #15
 80081e4:	d820      	bhi.n	8008228 <_AddFreeMemory+0x98>
 80081e6:	3308      	adds	r3, #8
 80081e8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80081ec:	1961      	adds	r1, r4, r5
 80081ee:	6852      	ldr	r2, [r2, #4]
 80081f0:	60a2      	str	r2, [r4, #8]
 80081f2:	2000      	movs	r0, #0
 80081f4:	e884 0021 	stmia.w	r4, {r0, r5}
 80081f8:	6124      	str	r4, [r4, #16]
 80081fa:	f841 5c04 	str.w	r5, [r1, #-4]
 80081fe:	f104 0108 	add.w	r1, r4, #8
 8008202:	b102      	cbz	r2, 8008206 <_AddFreeMemory+0x76>
 8008204:	6051      	str	r1, [r2, #4]
 8008206:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800820a:	60e0      	str	r0, [r4, #12]
 800820c:	6059      	str	r1, [r3, #4]
 800820e:	6833      	ldr	r3, [r6, #0]
 8008210:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8008214:	4a05      	ldr	r2, [pc, #20]	; (800822c <_AddFreeMemory+0x9c>)
 8008216:	442b      	add	r3, r5
 8008218:	6033      	str	r3, [r6, #0]
 800821a:	b929      	cbnz	r1, 8008228 <_AddFreeMemory+0x98>
 800821c:	68d1      	ldr	r1, [r2, #12]
 800821e:	1acb      	subs	r3, r1, r3
 8008220:	6891      	ldr	r1, [r2, #8]
 8008222:	4299      	cmp	r1, r3
 8008224:	bf38      	it	cc
 8008226:	6093      	strcc	r3, [r2, #8]
 8008228:	4628      	mov	r0, r5
 800822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822c:	2001af24 	.word	0x2001af24

08008230 <_RemoveHoles>:
 8008230:	4b25      	ldr	r3, [pc, #148]	; (80082c8 <_RemoveHoles+0x98>)
 8008232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800823a:	3a01      	subs	r2, #1
 800823c:	4682      	mov	sl, r0
 800823e:	eb02 0904 	add.w	r9, r2, r4
 8008242:	469b      	mov	fp, r3
 8008244:	e894 0028 	ldmia.w	r4, {r3, r5}
 8008248:	2b00      	cmp	r3, #0
 800824a:	d133      	bne.n	80082b4 <_RemoveHoles+0x84>
 800824c:	eb04 0805 	add.w	r8, r4, r5
 8008250:	45c8      	cmp	r8, r9
 8008252:	d22f      	bcs.n	80082b4 <_RemoveHoles+0x84>
 8008254:	f854 c005 	ldr.w	ip, [r4, r5]
 8008258:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800825c:	f1bc 0f00 	cmp.w	ip, #0
 8008260:	d028      	beq.n	80082b4 <_RemoveHoles+0x84>
 8008262:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8008266:	4f18      	ldr	r7, [pc, #96]	; (80082c8 <_RemoveHoles+0x98>)
 8008268:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d121      	bne.n	80082b4 <_RemoveHoles+0x84>
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	4620      	mov	r0, r4
 8008274:	e88d 1008 	stmia.w	sp, {r3, ip}
 8008278:	f7ff ff6a 	bl	8008150 <_RemoveFreeBlock>
 800827c:	f8d8 1000 	ldr.w	r1, [r8]
 8008280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008282:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008286:	4620      	mov	r0, r4
 8008288:	6054      	str	r4, [r2, #4]
 800828a:	4641      	mov	r1, r8
 800828c:	4632      	mov	r2, r6
 800828e:	f007 f831 	bl	800f2f4 <memmove>
 8008292:	e89d 1008 	ldmia.w	sp, {r3, ip}
 8008296:	459c      	cmp	ip, r3
 8008298:	d102      	bne.n	80082a0 <_RemoveHoles+0x70>
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	1b5b      	subs	r3, r3, r5
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
 80082a0:	4628      	mov	r0, r5
 80082a2:	19a1      	adds	r1, r4, r6
 80082a4:	f7ff ff74 	bl	8008190 <_AddFreeMemory>
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	d001      	beq.n	80082b2 <_RemoveHoles+0x82>
 80082ae:	4582      	cmp	sl, r0
 80082b0:	d905      	bls.n	80082be <_RemoveHoles+0x8e>
 80082b2:	4635      	mov	r5, r6
 80082b4:	442c      	add	r4, r5
 80082b6:	454c      	cmp	r4, r9
 80082b8:	d3c4      	bcc.n	8008244 <_RemoveHoles+0x14>
 80082ba:	2001      	movs	r0, #1
 80082bc:	e000      	b.n	80082c0 <_RemoveHoles+0x90>
 80082be:	2000      	movs	r0, #0
 80082c0:	b003      	add	sp, #12
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	bf00      	nop
 80082c8:	2001af24 	.word	0x2001af24

080082cc <GUI_ALLOC_FreeFixedBlock>:
 80082cc:	b128      	cbz	r0, 80082da <GUI_ALLOC_FreeFixedBlock+0xe>
 80082ce:	4a03      	ldr	r2, [pc, #12]	; (80082dc <GUI_ALLOC_FreeFixedBlock+0x10>)
 80082d0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80082d2:	6003      	str	r3, [r0, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <GUI_ALLOC_FreeFixedBlock+0xc>
 80082d6:	6058      	str	r0, [r3, #4]
 80082d8:	63d0      	str	r0, [r2, #60]	; 0x3c
 80082da:	4770      	bx	lr
 80082dc:	2001af24 	.word	0x2001af24

080082e0 <GUI_ALLOC_h2p>:
 80082e0:	b128      	cbz	r0, 80082ee <GUI_ALLOC_h2p+0xe>
 80082e2:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <GUI_ALLOC_h2p+0x10>)
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80082ea:	6840      	ldr	r0, [r0, #4]
 80082ec:	3008      	adds	r0, #8
 80082ee:	4770      	bx	lr
 80082f0:	2001af24 	.word	0x2001af24

080082f4 <GUI_ALLOC_LockH>:
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <GUI_ALLOC_LockH+0x18>)
 80082f6:	69d9      	ldr	r1, [r3, #28]
 80082f8:	3101      	adds	r1, #1
 80082fa:	61d9      	str	r1, [r3, #28]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8008302:	3101      	adds	r1, #1
 8008304:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8008308:	f7ff bfea 	b.w	80082e0 <GUI_ALLOC_h2p>
 800830c:	2001af24 	.word	0x2001af24

08008310 <GUI_ALLOC_UnlockH>:
 8008310:	b530      	push	{r4, r5, lr}
 8008312:	6802      	ldr	r2, [r0, #0]
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <GUI_ALLOC_UnlockH+0x2c>)
 8008316:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800831a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800831c:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8008320:	2c01      	cmp	r4, #1
 8008322:	d903      	bls.n	800832c <GUI_ALLOC_UnlockH+0x1c>
 8008324:	69dd      	ldr	r5, [r3, #28]
 8008326:	b10d      	cbz	r5, 800832c <GUI_ALLOC_UnlockH+0x1c>
 8008328:	3d01      	subs	r5, #1
 800832a:	61dd      	str	r5, [r3, #28]
 800832c:	3c01      	subs	r4, #1
 800832e:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8008332:	2300      	movs	r3, #0
 8008334:	6003      	str	r3, [r0, #0]
 8008336:	4618      	mov	r0, r3
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	2001af24 	.word	0x2001af24

08008340 <GUI_ALLOC_AssignMemory>:
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <GUI_ALLOC_AssignMemory+0xc>)
 8008342:	f021 0103 	bic.w	r1, r1, #3
 8008346:	6018      	str	r0, [r3, #0]
 8008348:	6059      	str	r1, [r3, #4]
 800834a:	4770      	bx	lr
 800834c:	20019408 	.word	0x20019408

08008350 <GUI_ALLOC_Free>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	b180      	cbz	r0, 8008378 <GUI_ALLOC_Free+0x28>
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <GUI_ALLOC_Free+0x2c>)
 8008358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800835e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d108      	bne.n	8008378 <GUI_ALLOC_Free+0x28>
 8008366:	6851      	ldr	r1, [r2, #4]
 8008368:	6848      	ldr	r0, [r1, #4]
 800836a:	f7ff ff11 	bl	8008190 <_AddFreeMemory>
 800836e:	4620      	mov	r0, r4
 8008370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008374:	f7ff bebe 	b.w	80080f4 <_PushFreeBlock>
 8008378:	bd10      	pop	{r4, pc}
 800837a:	bf00      	nop
 800837c:	2001af24 	.word	0x2001af24

08008380 <_EnlargeBlocks>:
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	4c22      	ldr	r4, [pc, #136]	; (8008410 <_EnlargeBlocks+0x90>)
 8008386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008388:	b93b      	cbnz	r3, 800839a <_EnlargeBlocks+0x1a>
 800838a:	4b22      	ldr	r3, [pc, #136]	; (8008414 <_EnlargeBlocks+0x94>)
 800838c:	689d      	ldr	r5, [r3, #8]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	3508      	adds	r5, #8
 8008392:	fbb3 f5f5 	udiv	r5, r3, r5
 8008396:	3502      	adds	r5, #2
 8008398:	e003      	b.n	80083a2 <_EnlargeBlocks+0x22>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	1d1d      	adds	r5, r3, #4
 800839e:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80083a2:	00e8      	lsls	r0, r5, #3
 80083a4:	f000 f978 	bl	8008698 <_Alloc>
 80083a8:	4680      	mov	r8, r0
 80083aa:	b360      	cbz	r0, 8008406 <_EnlargeBlocks+0x86>
 80083ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ae:	6922      	ldr	r2, [r4, #16]
 80083b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083b2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80083b6:	00d2      	lsls	r2, r2, #3
 80083b8:	685e      	ldr	r6, [r3, #4]
 80083ba:	3608      	adds	r6, #8
 80083bc:	4630      	mov	r0, r6
 80083be:	f006 ff8e 	bl	800f2de <memcpy>
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	6366      	str	r6, [r4, #52]	; 0x34
 80083c6:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 80083ca:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80083ce:	3104      	adds	r1, #4
 80083d0:	4613      	mov	r3, r2
 80083d2:	1e68      	subs	r0, r5, #1
 80083d4:	4283      	cmp	r3, r0
 80083d6:	f101 0108 	add.w	r1, r1, #8
 80083da:	d203      	bcs.n	80083e4 <_EnlargeBlocks+0x64>
 80083dc:	3301      	adds	r3, #1
 80083de:	f841 3c08 	str.w	r3, [r1, #-8]
 80083e2:	e7f6      	b.n	80083d2 <_EnlargeBlocks+0x52>
 80083e4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80083e8:	2600      	movs	r6, #0
 80083ea:	605e      	str	r6, [r3, #4]
 80083ec:	6863      	ldr	r3, [r4, #4]
 80083ee:	6262      	str	r2, [r4, #36]	; 0x24
 80083f0:	1a9b      	subs	r3, r3, r2
 80083f2:	442b      	add	r3, r5
 80083f4:	6063      	str	r3, [r4, #4]
 80083f6:	6125      	str	r5, [r4, #16]
 80083f8:	4638      	mov	r0, r7
 80083fa:	b13f      	cbz	r7, 800840c <_EnlargeBlocks+0x8c>
 80083fc:	f7ff ffa8 	bl	8008350 <GUI_ALLOC_Free>
 8008400:	4630      	mov	r0, r6
 8008402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008406:	2001      	movs	r0, #1
 8008408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	2001af24 	.word	0x2001af24
 8008414:	20019408 	.word	0x20019408

08008418 <_InitOnce>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	4e58      	ldr	r6, [pc, #352]	; (800857c <_InitOnce+0x164>)
 800841c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8008420:	2900      	cmp	r1, #0
 8008422:	f040 80aa 	bne.w	800857a <_InitOnce+0x162>
 8008426:	4d56      	ldr	r5, [pc, #344]	; (8008580 <_InitOnce+0x168>)
 8008428:	686a      	ldr	r2, [r5, #4]
 800842a:	2301      	movs	r3, #1
 800842c:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8008430:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8008434:	bf28      	it	cs
 8008436:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	0894      	lsrs	r4, r2, #2
 800843e:	2000      	movs	r0, #0
 8008440:	42a0      	cmp	r0, r4
 8008442:	d00c      	beq.n	800845e <_InitOnce+0x46>
 8008444:	1847      	adds	r7, r0, r1
 8008446:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800844a:	fbb7 fefe 	udiv	lr, r7, lr
 800844e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8008452:	ebce 0707 	rsb	r7, lr, r7
 8008456:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800845a:	3001      	adds	r0, #1
 800845c:	e7f0      	b.n	8008440 <_InitOnce+0x28>
 800845e:	2000      	movs	r0, #0
 8008460:	42a0      	cmp	r0, r4
 8008462:	d016      	beq.n	8008492 <_InitOnce+0x7a>
 8008464:	1847      	adds	r7, r0, r1
 8008466:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800846a:	fbb7 fefe 	udiv	lr, r7, lr
 800846e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8008472:	ebce 0e07 	rsb	lr, lr, r7
 8008476:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800847a:	4577      	cmp	r7, lr
 800847c:	d007      	beq.n	800848e <_InitOnce+0x76>
 800847e:	68aa      	ldr	r2, [r5, #8]
 8008480:	4b3f      	ldr	r3, [pc, #252]	; (8008580 <_InitOnce+0x168>)
 8008482:	2a00      	cmp	r2, #0
 8008484:	d155      	bne.n	8008532 <_InitOnce+0x11a>
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	0892      	lsrs	r2, r2, #2
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	e051      	b.n	8008532 <_InitOnce+0x11a>
 800848e:	3001      	adds	r0, #1
 8008490:	e7e6      	b.n	8008460 <_InitOnce+0x48>
 8008492:	3101      	adds	r1, #1
 8008494:	2902      	cmp	r1, #2
 8008496:	d1d2      	bne.n	800843e <_InitOnce+0x26>
 8008498:	0854      	lsrs	r4, r2, #1
 800849a:	2100      	movs	r1, #0
 800849c:	2000      	movs	r0, #0
 800849e:	42a0      	cmp	r0, r4
 80084a0:	d00c      	beq.n	80084bc <_InitOnce+0xa4>
 80084a2:	1847      	adds	r7, r0, r1
 80084a4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80084a8:	fbb7 fefe 	udiv	lr, r7, lr
 80084ac:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80084b0:	ebce 0707 	rsb	r7, lr, r7
 80084b4:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 80084b8:	3001      	adds	r0, #1
 80084ba:	e7f0      	b.n	800849e <_InitOnce+0x86>
 80084bc:	2000      	movs	r0, #0
 80084be:	42a0      	cmp	r0, r4
 80084c0:	d00f      	beq.n	80084e2 <_InitOnce+0xca>
 80084c2:	1847      	adds	r7, r0, r1
 80084c4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80084c8:	fbb7 fefe 	udiv	lr, r7, lr
 80084cc:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80084d0:	ebce 0707 	rsb	r7, lr, r7
 80084d4:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 80084d8:	b2bf      	uxth	r7, r7
 80084da:	45bc      	cmp	ip, r7
 80084dc:	d1cf      	bne.n	800847e <_InitOnce+0x66>
 80084de:	3001      	adds	r0, #1
 80084e0:	e7ed      	b.n	80084be <_InitOnce+0xa6>
 80084e2:	3101      	adds	r1, #1
 80084e4:	2902      	cmp	r1, #2
 80084e6:	d1d9      	bne.n	800849c <_InitOnce+0x84>
 80084e8:	2100      	movs	r1, #0
 80084ea:	2000      	movs	r0, #0
 80084ec:	4290      	cmp	r0, r2
 80084ee:	d007      	beq.n	8008500 <_InitOnce+0xe8>
 80084f0:	1844      	adds	r4, r0, r1
 80084f2:	27ff      	movs	r7, #255	; 0xff
 80084f4:	fbb4 f7f7 	udiv	r7, r4, r7
 80084f8:	443c      	add	r4, r7
 80084fa:	541c      	strb	r4, [r3, r0]
 80084fc:	3001      	adds	r0, #1
 80084fe:	e7f5      	b.n	80084ec <_InitOnce+0xd4>
 8008500:	2000      	movs	r0, #0
 8008502:	4290      	cmp	r0, r2
 8008504:	d00b      	beq.n	800851e <_InitOnce+0x106>
 8008506:	1844      	adds	r4, r0, r1
 8008508:	27ff      	movs	r7, #255	; 0xff
 800850a:	fbb4 f7f7 	udiv	r7, r4, r7
 800850e:	443c      	add	r4, r7
 8008510:	5c1f      	ldrb	r7, [r3, r0]
 8008512:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8008516:	42a7      	cmp	r7, r4
 8008518:	d1b1      	bne.n	800847e <_InitOnce+0x66>
 800851a:	3001      	adds	r0, #1
 800851c:	e7f1      	b.n	8008502 <_InitOnce+0xea>
 800851e:	3101      	adds	r1, #1
 8008520:	2902      	cmp	r1, #2
 8008522:	d1e2      	bne.n	80084ea <_InitOnce+0xd2>
 8008524:	2100      	movs	r1, #0
 8008526:	4291      	cmp	r1, r2
 8008528:	d0a9      	beq.n	800847e <_InitOnce+0x66>
 800852a:	2000      	movs	r0, #0
 800852c:	5458      	strb	r0, [r3, r1]
 800852e:	3101      	adds	r1, #1
 8008530:	e7f9      	b.n	8008526 <_InitOnce+0x10e>
 8008532:	4814      	ldr	r0, [pc, #80]	; (8008584 <_InitOnce+0x16c>)
 8008534:	4b14      	ldr	r3, [pc, #80]	; (8008588 <_InitOnce+0x170>)
 8008536:	6003      	str	r3, [r0, #0]
 8008538:	f7ff fabc 	bl	8007ab4 <GUI__RegisterExit>
 800853c:	235a      	movs	r3, #90	; 0x5a
 800853e:	6233      	str	r3, [r6, #32]
 8008540:	2300      	movs	r3, #0
 8008542:	2110      	movs	r1, #16
 8008544:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008548:	4099      	lsls	r1, r3
 800854a:	3301      	adds	r3, #1
 800854c:	2b10      	cmp	r3, #16
 800854e:	4c0b      	ldr	r4, [pc, #44]	; (800857c <_InitOnce+0x164>)
 8008550:	6411      	str	r1, [r2, #64]	; 0x40
 8008552:	d1f6      	bne.n	8008542 <_InitOnce+0x12a>
 8008554:	6868      	ldr	r0, [r5, #4]
 8008556:	6829      	ldr	r1, [r5, #0]
 8008558:	63a1      	str	r1, [r4, #56]	; 0x38
 800855a:	2302      	movs	r3, #2
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	f1a0 0314 	sub.w	r3, r0, #20
 8008562:	440b      	add	r3, r1
 8008564:	2501      	movs	r5, #1
 8008566:	6363      	str	r3, [r4, #52]	; 0x34
 8008568:	60e0      	str	r0, [r4, #12]
 800856a:	605d      	str	r5, [r3, #4]
 800856c:	6265      	str	r5, [r4, #36]	; 0x24
 800856e:	6065      	str	r5, [r4, #4]
 8008570:	f7ff fe0e 	bl	8008190 <_AddFreeMemory>
 8008574:	f7ff ff04 	bl	8008380 <_EnlargeBlocks>
 8008578:	6325      	str	r5, [r4, #48]	; 0x30
 800857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800857c:	2001af24 	.word	0x2001af24
 8008580:	20019408 	.word	0x20019408
 8008584:	20019414 	.word	0x20019414
 8008588:	08008119 	.word	0x08008119

0800858c <GUI_ALLOC_GetFixedBlock>:
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	4605      	mov	r5, r0
 8008592:	4e26      	ldr	r6, [pc, #152]	; (800862c <GUI_ALLOC_GetFixedBlock+0xa0>)
 8008594:	3503      	adds	r5, #3
 8008596:	f7ff ff3f 	bl	8008418 <_InitOnce>
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80085a0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80085a2:	3504      	adds	r5, #4
 80085a4:	429d      	cmp	r5, r3
 80085a6:	bf38      	it	cc
 80085a8:	461d      	movcc	r5, r3
 80085aa:	4614      	mov	r4, r2
 80085ac:	b12c      	cbz	r4, 80085ba <GUI_ALLOC_GetFixedBlock+0x2e>
 80085ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80085b2:	42ab      	cmp	r3, r5
 80085b4:	d02c      	beq.n	8008610 <GUI_ALLOC_GetFixedBlock+0x84>
 80085b6:	6824      	ldr	r4, [r4, #0]
 80085b8:	e7f8      	b.n	80085ac <GUI_ALLOC_GetFixedBlock+0x20>
 80085ba:	68f3      	ldr	r3, [r6, #12]
 80085bc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80085be:	eb02 0803 	add.w	r8, r2, r3
 80085c2:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80085c6:	ebc7 0708 	rsb	r7, r7, r8
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	b133      	cbz	r3, 80085dc <GUI_ALLOC_GetFixedBlock+0x50>
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff fe2e 	bl	8008230 <_RemoveHoles>
 80085d4:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80085d8:	ebc7 0708 	rsb	r7, r7, r8
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	bb13      	cbnz	r3, 8008626 <GUI_ALLOC_GetFixedBlock+0x9a>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	42ab      	cmp	r3, r5
 80085e4:	db1f      	blt.n	8008626 <GUI_ALLOC_GetFixedBlock+0x9a>
 80085e6:	4638      	mov	r0, r7
 80085e8:	1d1c      	adds	r4, r3, #4
 80085ea:	f7ff fdb1 	bl	8008150 <_RemoveFreeBlock>
 80085ee:	68f3      	ldr	r3, [r6, #12]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	1b5b      	subs	r3, r3, r5
 80085f4:	60f3      	str	r3, [r6, #12]
 80085f6:	6973      	ldr	r3, [r6, #20]
 80085f8:	1b64      	subs	r4, r4, r5
 80085fa:	442b      	add	r3, r5
 80085fc:	1b40      	subs	r0, r0, r5
 80085fe:	443c      	add	r4, r7
 8008600:	6173      	str	r3, [r6, #20]
 8008602:	d002      	beq.n	800860a <GUI_ALLOC_GetFixedBlock+0x7e>
 8008604:	4639      	mov	r1, r7
 8008606:	f7ff fdc3 	bl	8008190 <_AddFreeMemory>
 800860a:	f844 5c04 	str.w	r5, [r4, #-4]
 800860e:	e00a      	b.n	8008626 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	b10b      	cbz	r3, 8008618 <GUI_ALLOC_GetFixedBlock+0x8c>
 8008614:	6861      	ldr	r1, [r4, #4]
 8008616:	6059      	str	r1, [r3, #4]
 8008618:	6861      	ldr	r1, [r4, #4]
 800861a:	b101      	cbz	r1, 800861e <GUI_ALLOC_GetFixedBlock+0x92>
 800861c:	600b      	str	r3, [r1, #0]
 800861e:	42a2      	cmp	r2, r4
 8008620:	d101      	bne.n	8008626 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008626:	4620      	mov	r0, r4
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	2001af24 	.word	0x2001af24

08008630 <GUI_ALLOC_GetMaxSize>:
 8008630:	b508      	push	{r3, lr}
 8008632:	f7ff fef1 	bl	8008418 <_InitOnce>
 8008636:	2200      	movs	r2, #0
 8008638:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <GUI_ALLOC_GetMaxSize+0x38>)
 800863a:	4413      	add	r3, r2
 800863c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008640:	b113      	cbz	r3, 8008648 <GUI_ALLOC_GetMaxSize+0x18>
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2000      	movs	r0, #0
 8008646:	e00b      	b.n	8008660 <GUI_ALLOC_GetMaxSize+0x30>
 8008648:	3a08      	subs	r2, #8
 800864a:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800864e:	d1f3      	bne.n	8008638 <GUI_ALLOC_GetMaxSize+0x8>
 8008650:	e7f8      	b.n	8008644 <GUI_ALLOC_GetMaxSize+0x14>
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	4290      	cmp	r0, r2
 8008658:	bf38      	it	cc
 800865a:	4610      	movcc	r0, r2
 800865c:	b113      	cbz	r3, 8008664 <GUI_ALLOC_GetMaxSize+0x34>
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1f6      	bne.n	8008652 <GUI_ALLOC_GetMaxSize+0x22>
 8008664:	380c      	subs	r0, #12
 8008666:	bd08      	pop	{r3, pc}
 8008668:	2001af24 	.word	0x2001af24

0800866c <GUI_ALLOC_RequestSize>:
 800866c:	b508      	push	{r3, lr}
 800866e:	f7ff ffdf 	bl	8008630 <GUI_ALLOC_GetMaxSize>
 8008672:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8008676:	f04f 0364 	mov.w	r3, #100	; 0x64
 800867a:	4a06      	ldr	r2, [pc, #24]	; (8008694 <GUI_ALLOC_RequestSize+0x28>)
 800867c:	d904      	bls.n	8008688 <GUI_ALLOC_RequestSize+0x1c>
 800867e:	fb90 f0f3 	sdiv	r0, r0, r3
 8008682:	6a13      	ldr	r3, [r2, #32]
 8008684:	4358      	muls	r0, r3
 8008686:	bd08      	pop	{r3, pc}
 8008688:	6a12      	ldr	r2, [r2, #32]
 800868a:	4350      	muls	r0, r2
 800868c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008690:	bd08      	pop	{r3, pc}
 8008692:	bf00      	nop
 8008694:	2001af24 	.word	0x2001af24

08008698 <_Alloc>:
 8008698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800869c:	4d38      	ldr	r5, [pc, #224]	; (8008780 <_Alloc+0xe8>)
 800869e:	4604      	mov	r4, r0
 80086a0:	f7ff feba 	bl	8008418 <_InitOnce>
 80086a4:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	42bc      	cmp	r4, r7
 80086aa:	bf24      	itt	cs
 80086ac:	1ce7      	addcs	r7, r4, #3
 80086ae:	f027 0703 	biccs.w	r7, r7, #3
 80086b2:	370c      	adds	r7, #12
 80086b4:	429f      	cmp	r7, r3
 80086b6:	4c32      	ldr	r4, [pc, #200]	; (8008780 <_Alloc+0xe8>)
 80086b8:	d83e      	bhi.n	8008738 <_Alloc+0xa0>
 80086ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086bc:	6862      	ldr	r2, [r4, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d90f      	bls.n	80086e2 <_Alloc+0x4a>
 80086c2:	686b      	ldr	r3, [r5, #4]
 80086c4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80086c6:	3b01      	subs	r3, #1
 80086c8:	606b      	str	r3, [r5, #4]
 80086ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80086cc:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80086d0:	eb03 0209 	add.w	r2, r3, r9
 80086d4:	6852      	ldr	r2, [r2, #4]
 80086d6:	626a      	str	r2, [r5, #36]	; 0x24
 80086d8:	2201      	movs	r2, #1
 80086da:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 80086de:	b956      	cbnz	r6, 80086f6 <_Alloc+0x5e>
 80086e0:	e02a      	b.n	8008738 <_Alloc+0xa0>
 80086e2:	3b01      	subs	r3, #1
 80086e4:	6323      	str	r3, [r4, #48]	; 0x30
 80086e6:	f7ff fe4b 	bl	8008380 <_EnlargeBlocks>
 80086ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086ec:	3301      	adds	r3, #1
 80086ee:	6323      	str	r3, [r4, #48]	; 0x30
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0e6      	beq.n	80086c2 <_Alloc+0x2a>
 80086f4:	e020      	b.n	8008738 <_Alloc+0xa0>
 80086f6:	230f      	movs	r3, #15
 80086f8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80086fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80086fe:	4297      	cmp	r7, r2
 8008700:	d20c      	bcs.n	800871c <_Alloc+0x84>
 8008702:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008706:	d2f7      	bcs.n	80086f8 <_Alloc+0x60>
 8008708:	e008      	b.n	800871c <_Alloc+0x84>
 800870a:	6894      	ldr	r4, [r2, #8]
 800870c:	b12c      	cbz	r4, 800871a <_Alloc+0x82>
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	4297      	cmp	r7, r2
 8008712:	d914      	bls.n	800873e <_Alloc+0xa6>
 8008714:	68a2      	ldr	r2, [r4, #8]
 8008716:	2a00      	cmp	r2, #0
 8008718:	d1f7      	bne.n	800870a <_Alloc+0x72>
 800871a:	3301      	adds	r3, #1
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d803      	bhi.n	8008728 <_Alloc+0x90>
 8008720:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008724:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008726:	e7f6      	b.n	8008716 <_Alloc+0x7e>
 8008728:	4638      	mov	r0, r7
 800872a:	f7ff fd81 	bl	8008230 <_RemoveHoles>
 800872e:	2800      	cmp	r0, #0
 8008730:	d0e1      	beq.n	80086f6 <_Alloc+0x5e>
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff fcde 	bl	80080f4 <_PushFreeBlock>
 8008738:	2000      	movs	r0, #0
 800873a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008742:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008744:	ebc7 0208 	rsb	r2, r7, r8
 8008748:	330c      	adds	r3, #12
 800874a:	4620      	mov	r0, r4
 800874c:	429a      	cmp	r2, r3
 800874e:	bf38      	it	cc
 8008750:	4647      	movcc	r7, r8
 8008752:	f7ff fcfd 	bl	8008150 <_RemoveFreeBlock>
 8008756:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008758:	444b      	add	r3, r9
 800875a:	19e1      	adds	r1, r4, r7
 800875c:	605c      	str	r4, [r3, #4]
 800875e:	45b8      	cmp	r8, r7
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	e884 00c0 	stmia.w	r4, {r6, r7}
 8008768:	60a3      	str	r3, [r4, #8]
 800876a:	6124      	str	r4, [r4, #16]
 800876c:	f841 7c04 	str.w	r7, [r1, #-4]
 8008770:	dd03      	ble.n	800877a <_Alloc+0xe2>
 8008772:	ebc7 0008 	rsb	r0, r7, r8
 8008776:	f7ff fd0b 	bl	8008190 <_AddFreeMemory>
 800877a:	4630      	mov	r0, r6
 800877c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008780:	2001af24 	.word	0x2001af24

08008784 <GUI_ALLOC_AllocNoInit>:
 8008784:	b108      	cbz	r0, 800878a <GUI_ALLOC_AllocNoInit+0x6>
 8008786:	f7ff bf87 	b.w	8008698 <_Alloc>
 800878a:	4770      	bx	lr

0800878c <LCD_Index2Color_M565>:
 800878c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <LCD_Index2Color_M565+0x20>)
 8008792:	f000 021f 	and.w	r2, r0, #31
 8008796:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800879a:	5c9a      	ldrb	r2, [r3, r2]
 800879c:	5c5b      	ldrb	r3, [r3, r1]
 800879e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80087a2:	4a03      	ldr	r2, [pc, #12]	; (80087b0 <LCD_Index2Color_M565+0x24>)
 80087a4:	5c10      	ldrb	r0, [r2, r0]
 80087a6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80087aa:	4770      	bx	lr
 80087ac:	08013fc4 	.word	0x08013fc4
 80087b0:	08013f84 	.word	0x08013f84

080087b4 <_Color2Index_M565>:
 80087b4:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <_Color2Index_M565+0x20>)
 80087ba:	b2c2      	uxtb	r2, r0
 80087bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80087c0:	5c9a      	ldrb	r2, [r3, r2]
 80087c2:	5c5b      	ldrb	r3, [r3, r1]
 80087c4:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 80087c8:	4a03      	ldr	r2, [pc, #12]	; (80087d8 <_Color2Index_M565+0x24>)
 80087ca:	5c10      	ldrb	r0, [r2, r0]
 80087cc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	080140e4 	.word	0x080140e4
 80087d8:	08013fe4 	.word	0x08013fe4

080087dc <_GetIndexMask_M565>:
 80087dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80087e0:	4770      	bx	lr
	...

080087e4 <_Color2IndexBulk>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	4f0f      	ldr	r7, [pc, #60]	; (8008824 <_Color2IndexBulk+0x40>)
 80087e8:	683f      	ldr	r7, [r7, #0]
 80087ea:	4606      	mov	r6, r0
 80087ec:	460d      	mov	r5, r1
 80087ee:	4614      	mov	r4, r2
 80087f0:	469c      	mov	ip, r3
 80087f2:	b10f      	cbz	r7, 80087f8 <_Color2IndexBulk+0x14>
 80087f4:	47b8      	blx	r7
 80087f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f8:	f856 2b04 	ldr.w	r2, [r6], #4
 80087fc:	490a      	ldr	r1, [pc, #40]	; (8008828 <_Color2IndexBulk+0x44>)
 80087fe:	b2d3      	uxtb	r3, r2
 8008800:	3c01      	subs	r4, #1
 8008802:	5cc8      	ldrb	r0, [r1, r3]
 8008804:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8008808:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800880c:	5ccb      	ldrb	r3, [r1, r3]
 800880e:	4907      	ldr	r1, [pc, #28]	; (800882c <_Color2IndexBulk+0x48>)
 8008810:	5c8a      	ldrb	r2, [r1, r2]
 8008812:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 8008816:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800881a:	802b      	strh	r3, [r5, #0]
 800881c:	4465      	add	r5, ip
 800881e:	d1eb      	bne.n	80087f8 <_Color2IndexBulk+0x14>
 8008820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008822:	bf00      	nop
 8008824:	20019420 	.word	0x20019420
 8008828:	080140e4 	.word	0x080140e4
 800882c:	08013fe4 	.word	0x08013fe4

08008830 <_Index2ColorBulk>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	4e13      	ldr	r6, [pc, #76]	; (8008880 <_Index2ColorBulk+0x50>)
 8008834:	6836      	ldr	r6, [r6, #0]
 8008836:	4684      	mov	ip, r0
 8008838:	4614      	mov	r4, r2
 800883a:	461d      	mov	r5, r3
 800883c:	b10e      	cbz	r6, 8008842 <_Index2ColorBulk+0x12>
 800883e:	47b0      	blx	r6
 8008840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008842:	1e50      	subs	r0, r2, #1
 8008844:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008848:	3a01      	subs	r2, #1
 800884a:	fb03 c000 	mla	r0, r3, r0, ip
 800884e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008852:	8802      	ldrh	r2, [r0, #0]
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <_Index2ColorBulk+0x54>)
 8008856:	f002 061f 	and.w	r6, r2, #31
 800885a:	0ad7      	lsrs	r7, r2, #11
 800885c:	5d9e      	ldrb	r6, [r3, r6]
 800885e:	5ddb      	ldrb	r3, [r3, r7]
 8008860:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8008864:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8008868:	4e07      	ldr	r6, [pc, #28]	; (8008888 <_Index2ColorBulk+0x58>)
 800886a:	5cb2      	ldrb	r2, [r6, r2]
 800886c:	3c01      	subs	r4, #1
 800886e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008872:	f841 3904 	str.w	r3, [r1], #-4
 8008876:	ebc5 0000 	rsb	r0, r5, r0
 800887a:	d1ea      	bne.n	8008852 <_Index2ColorBulk+0x22>
 800887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887e:	bf00      	nop
 8008880:	2001941c 	.word	0x2001941c
 8008884:	08013fc4 	.word	0x08013fc4
 8008888:	08013f84 	.word	0x08013f84

0800888c <WM__IsInModalArea>:
 800888c:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <WM__IsInModalArea+0x4c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	4604      	mov	r4, r0
 8008896:	da0f      	bge.n	80088b8 <WM__IsInModalArea+0x2c>
 8008898:	4e10      	ldr	r6, [pc, #64]	; (80088dc <WM__IsInModalArea+0x50>)
 800889a:	4d11      	ldr	r5, [pc, #68]	; (80088e0 <WM__IsInModalArea+0x54>)
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80088a2:	4620      	mov	r0, r4
 80088a4:	6859      	ldr	r1, [r3, #4]
 80088a6:	f004 fc22 	bl	800d0ee <WM__IsAncestor>
 80088aa:	6833      	ldr	r3, [r6, #0]
 80088ac:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80088b0:	686a      	ldr	r2, [r5, #4]
 80088b2:	686b      	ldr	r3, [r5, #4]
 80088b4:	b942      	cbnz	r2, 80088c8 <WM__IsInModalArea+0x3c>
 80088b6:	e00c      	b.n	80088d2 <WM__IsInModalArea+0x46>
 80088b8:	4a0a      	ldr	r2, [pc, #40]	; (80088e4 <WM__IsInModalArea+0x58>)
 80088ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088be:	f004 fc16 	bl	800d0ee <WM__IsAncestor>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d1e8      	bne.n	8008898 <WM__IsInModalArea+0xc>
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	b918      	cbnz	r0, 80088d2 <WM__IsInModalArea+0x46>
 80088ca:	1ae3      	subs	r3, r4, r3
 80088cc:	4258      	negs	r0, r3
 80088ce:	4158      	adcs	r0, r3
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	2001      	movs	r0, #1
 80088d4:	bd70      	pop	{r4, r5, r6, pc}
 80088d6:	bf00      	nop
 80088d8:	200001bc 	.word	0x200001bc
 80088dc:	2001b03c 	.word	0x2001b03c
 80088e0:	2001b004 	.word	0x2001b004
 80088e4:	2001b01c 	.word	0x2001b01c

080088e8 <WM__SendPIDMessage>:
 80088e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ea:	4606      	mov	r6, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80088f0:	b085      	sub	sp, #20
 80088f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80088f6:	230d      	movs	r3, #13
 80088f8:	9602      	str	r6, [sp, #8]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4637      	mov	r7, r6
 80088fe:	4638      	mov	r0, r7
 8008900:	f000 fa8c 	bl	8008e1c <WM_IsWindow>
 8008904:	b150      	cbz	r0, 800891c <WM__SendPIDMessage+0x34>
 8008906:	4638      	mov	r0, r7
 8008908:	f000 fa8a 	bl	8008e20 <WM_GetParent>
 800890c:	4607      	mov	r7, r0
 800890e:	2800      	cmp	r0, #0
 8008910:	d0f5      	beq.n	80088fe <WM__SendPIDMessage+0x16>
 8008912:	4669      	mov	r1, sp
 8008914:	9403      	str	r4, [sp, #12]
 8008916:	f004 fbb5 	bl	800d084 <WM__SendMessageIfEnabled>
 800891a:	e7f0      	b.n	80088fe <WM__SendPIDMessage+0x16>
 800891c:	4630      	mov	r0, r6
 800891e:	4621      	mov	r1, r4
 8008920:	f004 fbb0 	bl	800d084 <WM__SendMessageIfEnabled>
 8008924:	b005      	add	sp, #20
 8008926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008928 <WM__SendTouchMessage>:
 8008928:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800892a:	68cc      	ldr	r4, [r1, #12]
 800892c:	4606      	mov	r6, r0
 800892e:	460d      	mov	r5, r1
 8008930:	b194      	cbz	r4, 8008958 <WM__SendTouchMessage+0x30>
 8008932:	f7ff fcdf 	bl	80082f4 <GUI_ALLOC_LockH>
 8008936:	ab02      	add	r3, sp, #8
 8008938:	4602      	mov	r2, r0
 800893a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	f9b0 0000 	ldrsh.w	r0, [r0]
 8008944:	1a09      	subs	r1, r1, r0
 8008946:	6021      	str	r1, [r4, #0]
 8008948:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800894c:	6862      	ldr	r2, [r4, #4]
 800894e:	1a52      	subs	r2, r2, r1
 8008950:	6062      	str	r2, [r4, #4]
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fcdc 	bl	8008310 <GUI_ALLOC_UnlockH>
 8008958:	4630      	mov	r0, r6
 800895a:	4629      	mov	r1, r5
 800895c:	f7ff ffc4 	bl	80088e8 <WM__SendPIDMessage>
 8008960:	b002      	add	sp, #8
 8008962:	bd70      	pop	{r4, r5, r6, pc}

08008964 <WM_HandlePID>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	b097      	sub	sp, #92	; 0x5c
 800896a:	ae06      	add	r6, sp, #24
 800896c:	f04f 080c 	mov.w	r8, #12
 8008970:	2100      	movs	r1, #0
 8008972:	4642      	mov	r2, r8
 8008974:	4630      	mov	r0, r6
 8008976:	f006 fcd6 	bl	800f326 <memset>
 800897a:	f7fe fe81 	bl	8007680 <GUI_PID_IsEmpty>
 800897e:	b108      	cbz	r0, 8008984 <WM_HandlePID+0x20>
 8008980:	2000      	movs	r0, #0
 8008982:	e1aa      	b.n	8008cda <WM_HandlePID+0x376>
 8008984:	ac09      	add	r4, sp, #36	; 0x24
 8008986:	4620      	mov	r0, r4
 8008988:	f7fe fdfe 	bl	8007588 <GUI_PID_GetState>
 800898c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898e:	4dad      	ldr	r5, [pc, #692]	; (8008c44 <WM_HandlePID+0x2e0>)
 8008990:	4fad      	ldr	r7, [pc, #692]	; (8008c48 <WM_HandlePID+0x2e4>)
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	d112      	bne.n	80089bc <WM_HandlePID+0x58>
 8008996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008998:	3301      	adds	r3, #1
 800899a:	d11e      	bne.n	80089da <WM_HandlePID+0x76>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80089a2:	fb08 f803 	mul.w	r8, r8, r3
 80089a6:	eb07 0308 	add.w	r3, r7, r8
 80089aa:	7a19      	ldrb	r1, [r3, #8]
 80089ac:	4291      	cmp	r1, r2
 80089ae:	d0e7      	beq.n	8008980 <WM_HandlePID+0x1c>
 80089b0:	f857 2008 	ldr.w	r2, [r7, r8]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	9209      	str	r2, [sp, #36]	; 0x24
 80089b8:	930a      	str	r3, [sp, #40]	; 0x28
 80089ba:	e00e      	b.n	80089da <WM_HandlePID+0x76>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	db0c      	blt.n	80089da <WM_HandlePID+0x76>
 80089c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	db09      	blt.n	80089da <WM_HandlePID+0x76>
 80089c6:	49a1      	ldr	r1, [pc, #644]	; (8008c4c <WM_HandlePID+0x2e8>)
 80089c8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80089cc:	440b      	add	r3, r1
 80089ce:	9309      	str	r3, [sp, #36]	; 0x24
 80089d0:	4b9f      	ldr	r3, [pc, #636]	; (8008c50 <WM_HandlePID+0x2ec>)
 80089d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089d6:	441a      	add	r2, r3
 80089d8:	920a      	str	r2, [sp, #40]	; 0x28
 80089da:	a804      	add	r0, sp, #16
 80089dc:	f000 fa3e 	bl	8008e5c <WM__AddCriticalHandle>
 80089e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	bf98      	it	ls
 80089e8:	602b      	strls	r3, [r5, #0]
 80089ea:	6828      	ldr	r0, [r5, #0]
 80089ec:	a901      	add	r1, sp, #4
 80089ee:	aa02      	add	r2, sp, #8
 80089f0:	f004 f9aa 	bl	800cd48 <GUI_GetLayerPosEx>
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089fa:	1ac0      	subs	r0, r0, r3
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	9009      	str	r0, [sp, #36]	; 0x24
 8008a00:	1ac9      	subs	r1, r1, r3
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	910a      	str	r1, [sp, #40]	; 0x28
 8008a06:	220c      	movs	r2, #12
 8008a08:	435a      	muls	r2, r3
 8008a0a:	18bb      	adds	r3, r7, r2
 8008a0c:	58ba      	ldr	r2, [r7, r2]
 8008a0e:	4282      	cmp	r2, r0
 8008a10:	d108      	bne.n	8008a24 <WM_HandlePID+0xc0>
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	428a      	cmp	r2, r1
 8008a16:	d105      	bne.n	8008a24 <WM_HandlePID+0xc0>
 8008a18:	7a1a      	ldrb	r2, [r3, #8]
 8008a1a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	f000 8156 	beq.w	8008cd0 <WM_HandlePID+0x36c>
 8008a24:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8008a28:	f004 fa54 	bl	800ced4 <GUI_CURSOR_SetPositionEx>
 8008a2c:	4b89      	ldr	r3, [pc, #548]	; (8008c54 <WM_HandlePID+0x2f0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	b113      	cbz	r3, 8008a38 <WM_HandlePID+0xd4>
 8008a32:	4620      	mov	r0, r4
 8008a34:	2100      	movs	r1, #0
 8008a36:	4798      	blx	r3
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	4a87      	ldr	r2, [pc, #540]	; (8008c58 <WM_HandlePID+0x2f4>)
 8008a3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a40:	b918      	cbnz	r0, 8008a4a <WM_HandlePID+0xe6>
 8008a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a46:	f000 f9b5 	bl	8008db4 <WM_Screen2hWin>
 8008a4a:	4b84      	ldr	r3, [pc, #528]	; (8008c5c <WM_HandlePID+0x2f8>)
 8008a4c:	9005      	str	r0, [sp, #20]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	b113      	cbz	r3, 8008a58 <WM_HandlePID+0xf4>
 8008a52:	9905      	ldr	r1, [sp, #20]
 8008a54:	4620      	mov	r0, r4
 8008a56:	4798      	blx	r3
 8008a58:	4981      	ldr	r1, [pc, #516]	; (8008c60 <WM_HandlePID+0x2fc>)
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8008c44 <WM_HandlePID+0x2e0>
 8008a60:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008a64:	4688      	mov	r8, r1
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	9805      	ldr	r0, [sp, #20]
 8008a6a:	b312      	cbz	r2, 8008ab2 <WM_HandlePID+0x14e>
 8008a6c:	4282      	cmp	r2, r0
 8008a6e:	d020      	beq.n	8008ab2 <WM_HandlePID+0x14e>
 8008a70:	6858      	ldr	r0, [r3, #4]
 8008a72:	f7ff ff0b 	bl	800888c <WM__IsInModalArea>
 8008a76:	b1e0      	cbz	r0, 8008ab2 <WM_HandlePID+0x14e>
 8008a78:	f8d9 3000 	ldr.w	r3, [r9]
 8008a7c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008a80:	6858      	ldr	r0, [r3, #4]
 8008a82:	f004 fb2b 	bl	800d0dc <WM__IsEnabled>
 8008a86:	b1a0      	cbz	r0, 8008ab2 <WM_HandlePID+0x14e>
 8008a88:	2312      	movs	r3, #18
 8008a8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008a8e:	9312      	str	r3, [sp, #72]	; 0x48
 8008a90:	f8d9 3000 	ldr.w	r3, [r9]
 8008a94:	9615      	str	r6, [sp, #84]	; 0x54
 8008a96:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008a9a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8008a9e:	6858      	ldr	r0, [r3, #4]
 8008aa0:	a912      	add	r1, sp, #72	; 0x48
 8008aa2:	f7ff ff41 	bl	8008928 <WM__SendTouchMessage>
 8008aa6:	f8d9 3000 	ldr.w	r3, [r9]
 8008aaa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008aae:	2200      	movs	r2, #0
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	9805      	ldr	r0, [sp, #20]
 8008ab4:	f7ff feea 	bl	800888c <WM__IsInModalArea>
 8008ab8:	b908      	cbnz	r0, 8008abe <WM_HandlePID+0x15a>
 8008aba:	2600      	movs	r6, #0
 8008abc:	e0fb      	b.n	8008cb6 <WM_HandlePID+0x352>
 8008abe:	682b      	ldr	r3, [r5, #0]
 8008ac0:	9905      	ldr	r1, [sp, #20]
 8008ac2:	f8df a180 	ldr.w	sl, [pc, #384]	; 8008c44 <WM_HandlePID+0x2e0>
 8008ac6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008c48 <WM_HandlePID+0x2e4>
 8008aca:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8008ace:	f04f 080c 	mov.w	r8, #12
 8008ad2:	fb08 7303 	mla	r3, r8, r3, r7
 8008ad6:	6051      	str	r1, [r2, #4]
 8008ad8:	7a1a      	ldrb	r2, [r3, #8]
 8008ada:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d062      	beq.n	8008ba8 <WM_HandlePID+0x244>
 8008ae2:	9b05      	ldr	r3, [sp, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d05f      	beq.n	8008ba8 <WM_HandlePID+0x244>
 8008ae8:	9805      	ldr	r0, [sp, #20]
 8008aea:	f7ff fc03 	bl	80082f4 <GUI_ALLOC_LockH>
 8008aee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008af2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8008af6:	f8da 3000 	ldr.w	r3, [sl]
 8008afa:	9003      	str	r0, [sp, #12]
 8008afc:	fb08 9303 	mla	r3, r8, r3, r9
 8008b00:	7a1b      	ldrb	r3, [r3, #8]
 8008b02:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8008b06:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b10:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b16:	eb0d 0008 	add.w	r0, sp, r8
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	9310      	str	r3, [sp, #64]	; 0x40
 8008b1e:	f7ff fbf7 	bl	8008310 <GUI_ALLOC_UnlockH>
 8008b22:	f8da e000 	ldr.w	lr, [sl]
 8008b26:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8008c64 <WM_HandlePID+0x300>
 8008b2a:	ab0f      	add	r3, sp, #60	; 0x3c
 8008b2c:	9315      	str	r3, [sp, #84]	; 0x54
 8008b2e:	2311      	movs	r3, #17
 8008b30:	9312      	str	r3, [sp, #72]	; 0x48
 8008b32:	fb08 930e 	mla	r3, r8, lr, r9
 8008b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008b3e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8008b42:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8008b46:	721a      	strb	r2, [r3, #8]
 8008b48:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8008b4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8008b50:	b133      	cbz	r3, 8008b60 <WM_HandlePID+0x1fc>
 8008b52:	eb0a 030e 	add.w	r3, sl, lr
 8008b56:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8008b5a:	9a05      	ldr	r2, [sp, #20]
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	e000      	b.n	8008b62 <WM_HandlePID+0x1fe>
 8008b60:	4699      	mov	r9, r3
 8008b62:	eb0a 030e 	add.w	r3, sl, lr
 8008b66:	a912      	add	r1, sp, #72	; 0x48
 8008b68:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f004 fa89 	bl	800d084 <WM__SendMessageIfEnabled>
 8008b72:	682b      	ldr	r3, [r5, #0]
 8008b74:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 8008b78:	6851      	ldr	r1, [r2, #4]
 8008b7a:	458b      	cmp	fp, r1
 8008b7c:	bf1c      	itt	ne
 8008b7e:	6852      	ldrne	r2, [r2, #4]
 8008b80:	9205      	strne	r2, [sp, #20]
 8008b82:	220c      	movs	r2, #12
 8008b84:	fb02 7303 	mla	r3, r2, r3, r7
 8008b88:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8008b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	d008      	beq.n	8008ba8 <WM_HandlePID+0x244>
 8008b96:	4648      	mov	r0, r9
 8008b98:	f000 f940 	bl	8008e1c <WM_IsWindow>
 8008b9c:	b120      	cbz	r0, 8008ba8 <WM_HandlePID+0x244>
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8008ba4:	f8c3 9004 	str.w	r9, [r3, #4]
 8008ba8:	682a      	ldr	r2, [r5, #0]
 8008baa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008bae:	210c      	movs	r1, #12
 8008bb0:	4351      	muls	r1, r2
 8008bb2:	1878      	adds	r0, r7, r1
 8008bb4:	f890 8008 	ldrb.w	r8, [r0, #8]
 8008bb8:	ea53 0808 	orrs.w	r8, r3, r8
 8008bbc:	d064      	beq.n	8008c88 <WM_HandlePID+0x324>
 8008bbe:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008c64 <WM_HandlePID+0x300>
 8008bc2:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8008bc6:	00d2      	lsls	r2, r2, #3
 8008bc8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8008bcc:	eb08 0e02 	add.w	lr, r8, r2
 8008bd0:	f8de 9004 	ldr.w	r9, [lr, #4]
 8008bd4:	f8dd c014 	ldr.w	ip, [sp, #20]
 8008bd8:	45e1      	cmp	r9, ip
 8008bda:	d01c      	beq.n	8008c16 <WM_HandlePID+0x2b2>
 8008bdc:	f8de e004 	ldr.w	lr, [lr, #4]
 8008be0:	f1be 0f00 	cmp.w	lr, #0
 8008be4:	d017      	beq.n	8008c16 <WM_HandlePID+0x2b2>
 8008be6:	b113      	cbz	r3, 8008bee <WM_HandlePID+0x28a>
 8008be8:	2300      	movs	r3, #0
 8008bea:	9315      	str	r3, [sp, #84]	; 0x54
 8008bec:	e009      	b.n	8008c02 <WM_HandlePID+0x29e>
 8008bee:	f8df e058 	ldr.w	lr, [pc, #88]	; 8008c48 <WM_HandlePID+0x2e4>
 8008bf2:	f88d 3020 	strb.w	r3, [sp, #32]
 8008bf6:	f85e 1001 	ldr.w	r1, [lr, r1]
 8008bfa:	9106      	str	r1, [sp, #24]
 8008bfc:	6841      	ldr	r1, [r0, #4]
 8008bfe:	9107      	str	r1, [sp, #28]
 8008c00:	9615      	str	r6, [sp, #84]	; 0x54
 8008c02:	4442      	add	r2, r8
 8008c04:	a912      	add	r1, sp, #72	; 0x48
 8008c06:	6850      	ldr	r0, [r2, #4]
 8008c08:	f7ff fe8e 	bl	8008928 <WM__SendTouchMessage>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008c12:	2200      	movs	r2, #0
 8008c14:	605a      	str	r2, [r3, #4]
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 8008c1c:	220c      	movs	r2, #12
 8008c1e:	fb02 7203 	mla	r2, r2, r3, r7
 8008c22:	f882 e008 	strb.w	lr, [r2, #8]
 8008c26:	9a05      	ldr	r2, [sp, #20]
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	d043      	beq.n	8008cb4 <WM_HandlePID+0x350>
 8008c2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008c30:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8008c34:	f1be 0f00 	cmp.w	lr, #0
 8008c38:	d016      	beq.n	8008c68 <WM_HandlePID+0x304>
 8008c3a:	9a05      	ldr	r2, [sp, #20]
 8008c3c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008c40:	e01b      	b.n	8008c7a <WM_HandlePID+0x316>
 8008c42:	bf00      	nop
 8008c44:	2001b03c 	.word	0x2001b03c
 8008c48:	2001942c 	.word	0x2001942c
 8008c4c:	2001aefc 	.word	0x2001aefc
 8008c50:	2001aef0 	.word	0x2001aef0
 8008c54:	20019424 	.word	0x20019424
 8008c58:	2001b058 	.word	0x2001b058
 8008c5c:	20019428 	.word	0x20019428
 8008c60:	2001afe4 	.word	0x2001afe4
 8008c64:	2001aff4 	.word	0x2001aff4
 8008c68:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <WM_HandlePID+0x37c>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b10b      	cbz	r3, 8008c72 <WM_HandlePID+0x30e>
 8008c6e:	f000 f853 	bl	8008d18 <WM_ReleaseCapture>
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	2200      	movs	r2, #0
 8008c76:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008c7a:	605a      	str	r2, [r3, #4]
 8008c7c:	9805      	ldr	r0, [sp, #20]
 8008c7e:	9615      	str	r6, [sp, #84]	; 0x54
 8008c80:	a912      	add	r1, sp, #72	; 0x48
 8008c82:	f7ff fe51 	bl	8008928 <WM__SendTouchMessage>
 8008c86:	e015      	b.n	8008cb4 <WM_HandlePID+0x350>
 8008c88:	9b05      	ldr	r3, [sp, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f43f af15 	beq.w	8008aba <WM_HandlePID+0x156>
 8008c90:	9805      	ldr	r0, [sp, #20]
 8008c92:	f004 fa23 	bl	800d0dc <WM__IsEnabled>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f af0f 	beq.w	8008aba <WM_HandlePID+0x156>
 8008c9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8008ca6:	9805      	ldr	r0, [sp, #20]
 8008ca8:	9312      	str	r3, [sp, #72]	; 0x48
 8008caa:	a912      	add	r1, sp, #72	; 0x48
 8008cac:	9615      	str	r6, [sp, #84]	; 0x54
 8008cae:	f7ff fe3b 	bl	8008928 <WM__SendTouchMessage>
 8008cb2:	e702      	b.n	8008aba <WM_HandlePID+0x156>
 8008cb4:	2601      	movs	r6, #1
 8008cb6:	682b      	ldr	r3, [r5, #0]
 8008cb8:	220c      	movs	r2, #12
 8008cba:	fb02 7703 	mla	r7, r2, r3, r7
 8008cbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008cc2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f000 f883 	bl	8008dd4 <WM_PID__SetPrevState>
 8008cce:	e000      	b.n	8008cd2 <WM_HandlePID+0x36e>
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	a804      	add	r0, sp, #16
 8008cd4:	f000 f8ca 	bl	8008e6c <WM__RemoveCriticalHandle>
 8008cd8:	4630      	mov	r0, r6
 8008cda:	b017      	add	sp, #92	; 0x5c
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	2001b040 	.word	0x2001b040

08008ce4 <WM__ReleaseCapture>:
 8008ce4:	b530      	push	{r4, r5, lr}
 8008ce6:	4d0a      	ldr	r5, [pc, #40]	; (8008d10 <WM__ReleaseCapture+0x2c>)
 8008ce8:	4c0a      	ldr	r4, [pc, #40]	; (8008d14 <WM__ReleaseCapture+0x30>)
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	b150      	cbz	r0, 8008d0a <WM__ReleaseCapture+0x26>
 8008cf4:	a904      	add	r1, sp, #16
 8008cf6:	2318      	movs	r3, #24
 8008cf8:	f841 3d10 	str.w	r3, [r1, #-16]!
 8008cfc:	4669      	mov	r1, sp
 8008cfe:	f004 f9cf 	bl	800d0a0 <WM__SendMessage>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8008d0a:	b005      	add	sp, #20
 8008d0c:	bd30      	pop	{r4, r5, pc}
 8008d0e:	bf00      	nop
 8008d10:	2001b03c 	.word	0x2001b03c
 8008d14:	2001b058 	.word	0x2001b058

08008d18 <WM_ReleaseCapture>:
 8008d18:	f7ff bfe4 	b.w	8008ce4 <WM__ReleaseCapture>

08008d1c <WM__IsInWindow>:
 8008d1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008d1e:	f013 0302 	ands.w	r3, r3, #2
 8008d22:	d012      	beq.n	8008d4a <WM__IsInWindow+0x2e>
 8008d24:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008d28:	4299      	cmp	r1, r3
 8008d2a:	db10      	blt.n	8008d4e <WM__IsInWindow+0x32>
 8008d2c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008d30:	4299      	cmp	r1, r3
 8008d32:	dc0c      	bgt.n	8008d4e <WM__IsInWindow+0x32>
 8008d34:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	db08      	blt.n	8008d4e <WM__IsInWindow+0x32>
 8008d3c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008d40:	4282      	cmp	r2, r0
 8008d42:	bfcc      	ite	gt
 8008d44:	2000      	movgt	r0, #0
 8008d46:	2001      	movle	r0, #1
 8008d48:	4770      	bx	lr
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	4770      	bx	lr
 8008d4e:	2000      	movs	r0, #0
 8008d50:	4770      	bx	lr

08008d52 <_Screen2hWin>:
 8008d52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d56:	460e      	mov	r6, r1
 8008d58:	4617      	mov	r7, r2
 8008d5a:	4698      	mov	r8, r3
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	b320      	cbz	r0, 8008daa <_Screen2hWin+0x58>
 8008d60:	f7ff fac8 	bl	80082f4 <GUI_ALLOC_LockH>
 8008d64:	4639      	mov	r1, r7
 8008d66:	4642      	mov	r2, r8
 8008d68:	4604      	mov	r4, r0
 8008d6a:	9001      	str	r0, [sp, #4]
 8008d6c:	f7ff ffd6 	bl	8008d1c <WM__IsInWindow>
 8008d70:	4681      	mov	r9, r0
 8008d72:	b920      	cbnz	r0, 8008d7e <_Screen2hWin+0x2c>
 8008d74:	a801      	add	r0, sp, #4
 8008d76:	f7ff facb 	bl	8008310 <GUI_ALLOC_UnlockH>
 8008d7a:	4648      	mov	r0, r9
 8008d7c:	e016      	b.n	8008dac <_Screen2hWin+0x5a>
 8008d7e:	69e4      	ldr	r4, [r4, #28]
 8008d80:	b91c      	cbnz	r4, 8008d8a <_Screen2hWin+0x38>
 8008d82:	a801      	add	r0, sp, #4
 8008d84:	f7ff fac4 	bl	8008310 <GUI_ALLOC_UnlockH>
 8008d88:	e00f      	b.n	8008daa <_Screen2hWin+0x58>
 8008d8a:	42b4      	cmp	r4, r6
 8008d8c:	d0f9      	beq.n	8008d82 <_Screen2hWin+0x30>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4631      	mov	r1, r6
 8008d92:	463a      	mov	r2, r7
 8008d94:	4643      	mov	r3, r8
 8008d96:	f7ff ffdc 	bl	8008d52 <_Screen2hWin>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	bf18      	it	ne
 8008d9e:	4605      	movne	r5, r0
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7ff fa9d 	bl	80082e0 <GUI_ALLOC_h2p>
 8008da6:	6a04      	ldr	r4, [r0, #32]
 8008da8:	e7ea      	b.n	8008d80 <_Screen2hWin+0x2e>
 8008daa:	4628      	mov	r0, r5
 8008dac:	b003      	add	sp, #12
 8008dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008db4 <WM_Screen2hWin>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <WM_Screen2hWin+0x1c>)
 8008db8:	460c      	mov	r4, r1
 8008dba:	4605      	mov	r5, r0
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	f000 f837 	bl	8008e30 <WM_GetDesktopWindowEx>
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dcc:	f7ff bfc1 	b.w	8008d52 <_Screen2hWin>
 8008dd0:	2001b03c 	.word	0x2001b03c

08008dd4 <WM_PID__SetPrevState>:
 8008dd4:	4b03      	ldr	r3, [pc, #12]	; (8008de4 <WM_PID__SetPrevState+0x10>)
 8008dd6:	220c      	movs	r2, #12
 8008dd8:	fb02 3301 	mla	r3, r2, r1, r3
 8008ddc:	c807      	ldmia	r0, {r0, r1, r2}
 8008dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008de2:	4770      	bx	lr
 8008de4:	20019444 	.word	0x20019444

08008de8 <WM_OnKey>:
 8008de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008dea:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <WM_OnKey+0x2c>)
 8008dec:	4603      	mov	r3, r0
 8008dee:	6810      	ldr	r0, [r2, #0]
 8008df0:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <WM_OnKey+0x30>)
 8008df2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8008df6:	b148      	cbz	r0, 8008e0c <WM_OnKey+0x24>
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	230e      	movs	r3, #14
 8008dfc:	9101      	str	r1, [sp, #4]
 8008dfe:	9302      	str	r3, [sp, #8]
 8008e00:	a902      	add	r1, sp, #8
 8008e02:	ab00      	add	r3, sp, #0
 8008e04:	9305      	str	r3, [sp, #20]
 8008e06:	f004 f94b 	bl	800d0a0 <WM__SendMessage>
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	b007      	add	sp, #28
 8008e0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e12:	bf00      	nop
 8008e14:	2001b03c 	.word	0x2001b03c
 8008e18:	2001b02c 	.word	0x2001b02c

08008e1c <WM_IsWindow>:
 8008e1c:	f000 bb54 	b.w	80094c8 <WM__IsWindow>

08008e20 <WM_GetParent>:
 8008e20:	b508      	push	{r3, lr}
 8008e22:	4603      	mov	r3, r0
 8008e24:	b110      	cbz	r0, 8008e2c <WM_GetParent+0xc>
 8008e26:	f7ff fa5b 	bl	80082e0 <GUI_ALLOC_h2p>
 8008e2a:	6983      	ldr	r3, [r0, #24]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	bd08      	pop	{r3, pc}

08008e30 <WM_GetDesktopWindowEx>:
 8008e30:	2801      	cmp	r0, #1
 8008e32:	bf9a      	itte	ls
 8008e34:	4b02      	ldrls	r3, [pc, #8]	; (8008e40 <WM_GetDesktopWindowEx+0x10>)
 8008e36:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8008e3a:	2000      	movhi	r0, #0
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	2001b01c 	.word	0x2001b01c

08008e44 <WM_GetDesktopWindow>:
 8008e44:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <WM_GetDesktopWindow+0x10>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	7c5a      	ldrb	r2, [r3, #17]
 8008e4a:	4b03      	ldr	r3, [pc, #12]	; (8008e58 <WM_GetDesktopWindow+0x14>)
 8008e4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	200001b0 	.word	0x200001b0
 8008e58:	2001b01c 	.word	0x2001b01c

08008e5c <WM__AddCriticalHandle>:
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <WM__AddCriticalHandle+0xc>)
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	6002      	str	r2, [r0, #0]
 8008e62:	6018      	str	r0, [r3, #0]
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	2001b050 	.word	0x2001b050

08008e6c <WM__RemoveCriticalHandle>:
 8008e6c:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <WM__RemoveCriticalHandle+0x28>)
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	b510      	push	{r4, lr}
 8008e72:	4614      	mov	r4, r2
 8008e74:	b16b      	cbz	r3, 8008e92 <WM__RemoveCriticalHandle+0x26>
 8008e76:	2200      	movs	r2, #0
 8008e78:	4283      	cmp	r3, r0
 8008e7a:	d105      	bne.n	8008e88 <WM__RemoveCriticalHandle+0x1c>
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	b10a      	cbz	r2, 8008e84 <WM__RemoveCriticalHandle+0x18>
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	bd10      	pop	{r4, pc}
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd10      	pop	{r4, pc}
 8008e88:	6819      	ldr	r1, [r3, #0]
 8008e8a:	b111      	cbz	r1, 8008e92 <WM__RemoveCriticalHandle+0x26>
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	460b      	mov	r3, r1
 8008e90:	e7f2      	b.n	8008e78 <WM__RemoveCriticalHandle+0xc>
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	2001b050 	.word	0x2001b050

08008e98 <_OnExit>:
 8008e98:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <_OnExit+0x2c>)
 8008e9a:	490b      	ldr	r1, [pc, #44]	; (8008ec8 <_OnExit+0x30>)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	7013      	strb	r3, [r2, #0]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <_OnExit+0x34>)
 8008ea2:	600b      	str	r3, [r1, #0]
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <_OnExit+0x38>)
 8008ea8:	604b      	str	r3, [r1, #4]
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <_OnExit+0x3c>)
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	6053      	str	r3, [r2, #4]
 8008eb2:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <_OnExit+0x40>)
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	4a09      	ldr	r2, [pc, #36]	; (8008edc <_OnExit+0x44>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <_OnExit+0x48>)
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <_OnExit+0x4c>)
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	4770      	bx	lr
 8008ec4:	20019484 	.word	0x20019484
 8008ec8:	2001b02c 	.word	0x2001b02c
 8008ecc:	2001945c 	.word	0x2001945c
 8008ed0:	2001b050 	.word	0x2001b050
 8008ed4:	2001b058 	.word	0x2001b058
 8008ed8:	2001b064 	.word	0x2001b064
 8008edc:	2001b018 	.word	0x2001b018
 8008ee0:	2001b044 	.word	0x2001b044
 8008ee4:	2001b054 	.word	0x2001b054

08008ee8 <_Paint1>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	4604      	mov	r4, r0
 8008eec:	f7ff f9f8 	bl	80082e0 <GUI_ALLOC_h2p>
 8008ef0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008ef2:	4a04      	ldr	r2, [pc, #16]	; (8008f04 <_Paint1+0x1c>)
 8008ef4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008ef8:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <_Paint1+0x20>)
 8008efa:	4620      	mov	r0, r4
 8008efc:	bf08      	it	eq
 8008efe:	4613      	moveq	r3, r2
 8008f00:	4798      	blx	r3
 8008f02:	bd10      	pop	{r4, pc}
 8008f04:	08009d45 	.word	0x08009d45
 8008f08:	0800a315 	.word	0x0800a315

08008f0c <_Findy1>:
 8008f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0e:	4605      	mov	r5, r0
 8008f10:	b085      	sub	sp, #20
 8008f12:	460c      	mov	r4, r1
 8008f14:	4616      	mov	r6, r2
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	d04c      	beq.n	8008fb4 <_Findy1+0xa8>
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f7ff f9ea 	bl	80082f4 <GUI_ALLOC_LockH>
 8008f20:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8008f22:	9001      	str	r0, [sp, #4]
 8008f24:	07bb      	lsls	r3, r7, #30
 8008f26:	4601      	mov	r1, r0
 8008f28:	d53d      	bpl.n	8008fa6 <_Findy1+0x9a>
 8008f2a:	ad02      	add	r5, sp, #8
 8008f2c:	b126      	cbz	r6, 8008f38 <_Findy1+0x2c>
 8008f2e:	4628      	mov	r0, r5
 8008f30:	4632      	mov	r2, r6
 8008f32:	f003 fbd7 	bl	800c6e4 <GUI__IntersectRects>
 8008f36:	e002      	b.n	8008f3e <_Findy1+0x32>
 8008f38:	c803      	ldmia	r0, {r0, r1}
 8008f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f003 ff41 	bl	800cdc8 <GUI_RectsIntersect>
 8008f46:	b370      	cbz	r0, 8008fa6 <_Findy1+0x9a>
 8008f48:	f017 0f01 	tst.w	r7, #1
 8008f4c:	9b01      	ldr	r3, [sp, #4]
 8008f4e:	d11e      	bne.n	8008f8e <_Findy1+0x82>
 8008f50:	b13e      	cbz	r6, 8008f62 <_Findy1+0x56>
 8008f52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008f56:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	bfa8      	it	ge
 8008f5e:	4613      	movge	r3, r2
 8008f60:	e001      	b.n	8008f66 <_Findy1+0x5a>
 8008f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008f66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008f70:	dd06      	ble.n	8008f80 <_Findy1+0x74>
 8008f72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008f76:	b219      	sxth	r1, r3
 8008f78:	428a      	cmp	r2, r1
 8008f7a:	db14      	blt.n	8008fa6 <_Findy1+0x9a>
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	e004      	b.n	8008f8a <_Findy1+0x7e>
 8008f80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008f84:	b219      	sxth	r1, r3
 8008f86:	428a      	cmp	r2, r1
 8008f88:	dd0d      	ble.n	8008fa6 <_Findy1+0x9a>
 8008f8a:	80e3      	strh	r3, [r4, #6]
 8008f8c:	e00b      	b.n	8008fa6 <_Findy1+0x9a>
 8008f8e:	69df      	ldr	r7, [r3, #28]
 8008f90:	b14f      	cbz	r7, 8008fa6 <_Findy1+0x9a>
 8008f92:	4638      	mov	r0, r7
 8008f94:	4621      	mov	r1, r4
 8008f96:	462a      	mov	r2, r5
 8008f98:	f7ff ffb8 	bl	8008f0c <_Findy1>
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7ff f99f 	bl	80082e0 <GUI_ALLOC_h2p>
 8008fa2:	6a07      	ldr	r7, [r0, #32]
 8008fa4:	e7f4      	b.n	8008f90 <_Findy1+0x84>
 8008fa6:	a804      	add	r0, sp, #16
 8008fa8:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008fac:	6a1d      	ldr	r5, [r3, #32]
 8008fae:	f7ff f9af 	bl	8008310 <GUI_ALLOC_UnlockH>
 8008fb2:	e7b0      	b.n	8008f16 <_Findy1+0xa>
 8008fb4:	b005      	add	sp, #20
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fb8 <_Findx0>:
 8008fb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	4690      	mov	r8, r2
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	d037      	beq.n	8009038 <_Findx0+0x80>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f7ff f993 	bl	80082f4 <GUI_ALLOC_LockH>
 8008fce:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008fd0:	9001      	str	r0, [sp, #4]
 8008fd2:	07b2      	lsls	r2, r6, #30
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	d528      	bpl.n	800902a <_Findx0+0x72>
 8008fd8:	ac02      	add	r4, sp, #8
 8008fda:	f1b8 0f00 	cmp.w	r8, #0
 8008fde:	d004      	beq.n	8008fea <_Findx0+0x32>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	f003 fb7e 	bl	800c6e4 <GUI__IntersectRects>
 8008fe8:	e002      	b.n	8008ff0 <_Findx0+0x38>
 8008fea:	c803      	ldmia	r0, {r0, r1}
 8008fec:	e884 0003 	stmia.w	r4, {r0, r1}
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f003 fee8 	bl	800cdc8 <GUI_RectsIntersect>
 8008ff8:	b1b8      	cbz	r0, 800902a <_Findx0+0x72>
 8008ffa:	07f3      	lsls	r3, r6, #31
 8008ffc:	d405      	bmi.n	800900a <_Findx0+0x52>
 8008ffe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009002:	3301      	adds	r3, #1
 8009004:	803b      	strh	r3, [r7, #0]
 8009006:	2501      	movs	r5, #1
 8009008:	e00f      	b.n	800902a <_Findx0+0x72>
 800900a:	9b01      	ldr	r3, [sp, #4]
 800900c:	69de      	ldr	r6, [r3, #28]
 800900e:	b166      	cbz	r6, 800902a <_Findx0+0x72>
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	4622      	mov	r2, r4
 8009016:	f7ff ffcf 	bl	8008fb8 <_Findx0>
 800901a:	2800      	cmp	r0, #0
 800901c:	4630      	mov	r0, r6
 800901e:	bf18      	it	ne
 8009020:	2501      	movne	r5, #1
 8009022:	f7ff f95d 	bl	80082e0 <GUI_ALLOC_h2p>
 8009026:	6a06      	ldr	r6, [r0, #32]
 8009028:	e7f1      	b.n	800900e <_Findx0+0x56>
 800902a:	a804      	add	r0, sp, #16
 800902c:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8009030:	6a1c      	ldr	r4, [r3, #32]
 8009032:	f7ff f96d 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009036:	e7c5      	b.n	8008fc4 <_Findx0+0xc>
 8009038:	4628      	mov	r0, r5
 800903a:	b004      	add	sp, #16
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009040 <_Findx1>:
 8009040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009042:	4604      	mov	r4, r0
 8009044:	b085      	sub	sp, #20
 8009046:	460e      	mov	r6, r1
 8009048:	4617      	mov	r7, r2
 800904a:	2c00      	cmp	r4, #0
 800904c:	d031      	beq.n	80090b2 <_Findx1+0x72>
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff f950 	bl	80082f4 <GUI_ALLOC_LockH>
 8009054:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8009056:	9001      	str	r0, [sp, #4]
 8009058:	07aa      	lsls	r2, r5, #30
 800905a:	4601      	mov	r1, r0
 800905c:	d522      	bpl.n	80090a4 <_Findx1+0x64>
 800905e:	ac02      	add	r4, sp, #8
 8009060:	b127      	cbz	r7, 800906c <_Findx1+0x2c>
 8009062:	4620      	mov	r0, r4
 8009064:	463a      	mov	r2, r7
 8009066:	f003 fb3d 	bl	800c6e4 <GUI__IntersectRects>
 800906a:	e002      	b.n	8009072 <_Findx1+0x32>
 800906c:	c803      	ldmia	r0, {r0, r1}
 800906e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009072:	4630      	mov	r0, r6
 8009074:	4621      	mov	r1, r4
 8009076:	f003 fea7 	bl	800cdc8 <GUI_RectsIntersect>
 800907a:	b198      	cbz	r0, 80090a4 <_Findx1+0x64>
 800907c:	07eb      	lsls	r3, r5, #31
 800907e:	d404      	bmi.n	800908a <_Findx1+0x4a>
 8009080:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009084:	3b01      	subs	r3, #1
 8009086:	80b3      	strh	r3, [r6, #4]
 8009088:	e00c      	b.n	80090a4 <_Findx1+0x64>
 800908a:	9b01      	ldr	r3, [sp, #4]
 800908c:	69dd      	ldr	r5, [r3, #28]
 800908e:	b14d      	cbz	r5, 80090a4 <_Findx1+0x64>
 8009090:	4628      	mov	r0, r5
 8009092:	4631      	mov	r1, r6
 8009094:	4622      	mov	r2, r4
 8009096:	f7ff ffd3 	bl	8009040 <_Findx1>
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff f920 	bl	80082e0 <GUI_ALLOC_h2p>
 80090a0:	6a05      	ldr	r5, [r0, #32]
 80090a2:	e7f4      	b.n	800908e <_Findx1+0x4e>
 80090a4:	a804      	add	r0, sp, #16
 80090a6:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80090aa:	6a1c      	ldr	r4, [r3, #32]
 80090ac:	f7ff f930 	bl	8008310 <GUI_ALLOC_UnlockH>
 80090b0:	e7cb      	b.n	800904a <_Findx1+0xa>
 80090b2:	b005      	add	sp, #20
 80090b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080090b8 <_Paint1Trans>:
 80090b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090bc:	4d21      	ldr	r5, [pc, #132]	; (8009144 <_Paint1Trans+0x8c>)
 80090be:	682b      	ldr	r3, [r5, #0]
 80090c0:	4606      	mov	r6, r0
 80090c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80090c4:	f7ff f916 	bl	80082f4 <GUI_ALLOC_LockH>
 80090c8:	9000      	str	r0, [sp, #0]
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff f912 	bl	80082f4 <GUI_ALLOC_LockH>
 80090d0:	ac02      	add	r4, sp, #8
 80090d2:	4601      	mov	r1, r0
 80090d4:	9001      	str	r0, [sp, #4]
 80090d6:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 80090da:	3008      	adds	r0, #8
 80090dc:	f003 fe74 	bl	800cdc8 <GUI_RectsIntersect>
 80090e0:	4607      	mov	r7, r0
 80090e2:	b328      	cbz	r0, 8009130 <_Paint1Trans+0x78>
 80090e4:	9901      	ldr	r1, [sp, #4]
 80090e6:	9a00      	ldr	r2, [sp, #0]
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	4c17      	ldr	r4, [pc, #92]	; (8009148 <_Paint1Trans+0x90>)
 80090ec:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80090ee:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 80090f2:	f101 0008 	add.w	r0, r1, #8
 80090f6:	3208      	adds	r2, #8
 80090f8:	f003 faf4 	bl	800c6e4 <GUI__IntersectRects>
 80090fc:	4668      	mov	r0, sp
 80090fe:	f7ff f907 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009102:	9a01      	ldr	r2, [sp, #4]
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	f9b2 1000 	ldrsh.w	r1, [r2]
 800910a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800910e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009110:	651a      	str	r2, [r3, #80]	; 0x50
 8009112:	a801      	add	r0, sp, #4
 8009114:	6026      	str	r6, [r4, #0]
 8009116:	f7ff f8fb 	bl	8008310 <GUI_ALLOC_UnlockH>
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff fee4 	bl	8008ee8 <_Paint1>
 8009120:	2300      	movs	r3, #0
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	651f      	str	r7, [r3, #80]	; 0x50
 8009128:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 800912c:	2701      	movs	r7, #1
 800912e:	e005      	b.n	800913c <_Paint1Trans+0x84>
 8009130:	4668      	mov	r0, sp
 8009132:	f7ff f8ed 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009136:	a801      	add	r0, sp, #4
 8009138:	f7ff f8ea 	bl	8008310 <GUI_ALLOC_UnlockH>
 800913c:	4638      	mov	r0, r7
 800913e:	b002      	add	sp, #8
 8009140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009144:	200001b0 	.word	0x200001b0
 8009148:	2001b018 	.word	0x2001b018

0800914c <_PaintTransChildren>:
 800914c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009150:	4606      	mov	r6, r0
 8009152:	f7ff f8cf 	bl	80082f4 <GUI_ALLOC_LockH>
 8009156:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009158:	9001      	str	r0, [sp, #4]
 800915a:	079b      	lsls	r3, r3, #30
 800915c:	d405      	bmi.n	800916a <_PaintTransChildren+0x1e>
 800915e:	a801      	add	r0, sp, #4
 8009160:	f7ff f8d6 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009164:	b002      	add	sp, #8
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	69c4      	ldr	r4, [r0, #28]
 800916c:	2c00      	cmp	r4, #0
 800916e:	d0f6      	beq.n	800915e <_PaintTransChildren+0x12>
 8009170:	4620      	mov	r0, r4
 8009172:	f7ff f8bf 	bl	80082f4 <GUI_ALLOC_LockH>
 8009176:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009178:	ad02      	add	r5, sp, #8
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	2b03      	cmp	r3, #3
 8009180:	f845 0d08 	str.w	r0, [r5, #-8]!
 8009184:	d137      	bne.n	80091f6 <_PaintTransChildren+0xaa>
 8009186:	9901      	ldr	r1, [sp, #4]
 8009188:	3108      	adds	r1, #8
 800918a:	f003 fe1d 	bl	800cdc8 <GUI_RectsIntersect>
 800918e:	2800      	cmp	r0, #0
 8009190:	d031      	beq.n	80091f6 <_PaintTransChildren+0xaa>
 8009192:	a802      	add	r0, sp, #8
 8009194:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8009198:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800919c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 80091a0:	899f      	ldrh	r7, [r3, #12]
 80091a2:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 80091a6:	f7ff f8b3 	bl	8008310 <GUI_ALLOC_UnlockH>
 80091aa:	4668      	mov	r0, sp
 80091ac:	f7ff f8b0 	bl	8008310 <GUI_ALLOC_UnlockH>
 80091b0:	4620      	mov	r0, r4
 80091b2:	f7ff ff81 	bl	80090b8 <_Paint1Trans>
 80091b6:	b170      	cbz	r0, 80091d6 <_PaintTransChildren+0x8a>
 80091b8:	4620      	mov	r0, r4
 80091ba:	f7ff f891 	bl	80082e0 <GUI_ALLOC_h2p>
 80091be:	9000      	str	r0, [sp, #0]
 80091c0:	4620      	mov	r0, r4
 80091c2:	f7ff ffc3 	bl	800914c <_PaintTransChildren>
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7ff f88a 	bl	80082e0 <GUI_ALLOC_h2p>
 80091cc:	9000      	str	r0, [sp, #0]
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff f886 	bl	80082e0 <GUI_ALLOC_h2p>
 80091d4:	9001      	str	r0, [sp, #4]
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff f88c 	bl	80082f4 <GUI_ALLOC_LockH>
 80091dc:	9001      	str	r0, [sp, #4]
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff f888 	bl	80082f4 <GUI_ALLOC_LockH>
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	9000      	str	r0, [sp, #0]
 80091e8:	f8a3 9008 	strh.w	r9, [r3, #8]
 80091ec:	f8a3 800a 	strh.w	r8, [r3, #10]
 80091f0:	819f      	strh	r7, [r3, #12]
 80091f2:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80091f6:	9b00      	ldr	r3, [sp, #0]
 80091f8:	4668      	mov	r0, sp
 80091fa:	6a1c      	ldr	r4, [r3, #32]
 80091fc:	f7ff f888 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009200:	e7b4      	b.n	800916c <_PaintTransChildren+0x20>
	...

08009204 <WM__PaintWinAndOverlays>:
 8009204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009206:	4604      	mov	r4, r0
 8009208:	f7ff f874 	bl	80082f4 <GUI_ALLOC_LockH>
 800920c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800920e:	9001      	str	r0, [sp, #4]
 8009210:	f640 0301 	movw	r3, #2049	; 0x801
 8009214:	4013      	ands	r3, r2
 8009216:	2b01      	cmp	r3, #1
 8009218:	d005      	beq.n	8009226 <WM__PaintWinAndOverlays+0x22>
 800921a:	a801      	add	r0, sp, #4
 800921c:	f7ff f878 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff fe61 	bl	8008ee8 <_Paint1>
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <WM__PaintWinAndOverlays+0x74>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	b313      	cbz	r3, 8009272 <WM__PaintWinAndOverlays+0x6e>
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff ff8d 	bl	800914c <_PaintTransChildren>
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff f854 	bl	80082e0 <GUI_ALLOC_h2p>
 8009238:	6985      	ldr	r5, [r0, #24]
 800923a:	6a04      	ldr	r4, [r0, #32]
 800923c:	b1cd      	cbz	r5, 8009272 <WM__PaintWinAndOverlays+0x6e>
 800923e:	b194      	cbz	r4, 8009266 <WM__PaintWinAndOverlays+0x62>
 8009240:	4620      	mov	r0, r4
 8009242:	f7ff f84d 	bl	80082e0 <GUI_ALLOC_h2p>
 8009246:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	2b03      	cmp	r3, #3
 800924e:	d102      	bne.n	8009256 <WM__PaintWinAndOverlays+0x52>
 8009250:	4620      	mov	r0, r4
 8009252:	f7ff ff31 	bl	80090b8 <_Paint1Trans>
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff ff78 	bl	800914c <_PaintTransChildren>
 800925c:	4620      	mov	r0, r4
 800925e:	f7ff f83f 	bl	80082e0 <GUI_ALLOC_h2p>
 8009262:	6a04      	ldr	r4, [r0, #32]
 8009264:	e7eb      	b.n	800923e <WM__PaintWinAndOverlays+0x3a>
 8009266:	4628      	mov	r0, r5
 8009268:	f7ff f83a 	bl	80082e0 <GUI_ALLOC_h2p>
 800926c:	6a04      	ldr	r4, [r0, #32]
 800926e:	6985      	ldr	r5, [r0, #24]
 8009270:	e7e4      	b.n	800923c <WM__PaintWinAndOverlays+0x38>
 8009272:	b003      	add	sp, #12
 8009274:	bd30      	pop	{r4, r5, pc}
 8009276:	bf00      	nop
 8009278:	2001b064 	.word	0x2001b064

0800927c <_cbPaintMemDev>:
 800927c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009280:	4d17      	ldr	r5, [pc, #92]	; (80092e0 <_cbPaintMemDev+0x64>)
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	4606      	mov	r6, r0
 8009286:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009288:	f7ff f834 	bl	80082f4 <GUI_ALLOC_LockH>
 800928c:	682a      	ldr	r2, [r5, #0]
 800928e:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8009292:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8009296:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 800929a:	89c7      	ldrh	r7, [r0, #14]
 800929c:	ac02      	add	r4, sp, #8
 800929e:	3208      	adds	r2, #8
 80092a0:	f844 0d04 	str.w	r0, [r4, #-4]!
 80092a4:	f100 0308 	add.w	r3, r0, #8
 80092a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff f82d 	bl	8008310 <GUI_ALLOC_UnlockH>
 80092b6:	6830      	ldr	r0, [r6, #0]
 80092b8:	f7ff ffa4 	bl	8009204 <WM__PaintWinAndOverlays>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80092c0:	f7ff f818 	bl	80082f4 <GUI_ALLOC_LockH>
 80092c4:	9001      	str	r0, [sp, #4]
 80092c6:	f8a0 a008 	strh.w	sl, [r0, #8]
 80092ca:	f8a0 900a 	strh.w	r9, [r0, #10]
 80092ce:	f8a0 800c 	strh.w	r8, [r0, #12]
 80092d2:	81c7      	strh	r7, [r0, #14]
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7ff f81b 	bl	8008310 <GUI_ALLOC_UnlockH>
 80092da:	b002      	add	sp, #8
 80092dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e0:	200001b0 	.word	0x200001b0

080092e4 <WM__ClipAtParentBorders>:
 80092e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092e6:	4607      	mov	r7, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	4628      	mov	r0, r5
 80092ec:	f7ff f802 	bl	80082f4 <GUI_ALLOC_LockH>
 80092f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092f2:	ac02      	add	r4, sp, #8
 80092f4:	f013 0602 	ands.w	r6, r3, #2
 80092f8:	4601      	mov	r1, r0
 80092fa:	f844 0d04 	str.w	r0, [r4, #-4]!
 80092fe:	d104      	bne.n	800930a <WM__ClipAtParentBorders+0x26>
 8009300:	4620      	mov	r0, r4
 8009302:	f7ff f805 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009306:	4630      	mov	r0, r6
 8009308:	e016      	b.n	8009338 <WM__ClipAtParentBorders+0x54>
 800930a:	4638      	mov	r0, r7
 800930c:	f003 fa1c 	bl	800c748 <GUI__IntersectRect>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	699e      	ldr	r6, [r3, #24]
 8009314:	4620      	mov	r0, r4
 8009316:	b956      	cbnz	r6, 800932e <WM__ClipAtParentBorders+0x4a>
 8009318:	f7fe fffa 	bl	8008310 <GUI_ALLOC_UnlockH>
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <WM__ClipAtParentBorders+0x58>)
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	4295      	cmp	r5, r2
 8009322:	d008      	beq.n	8009336 <WM__ClipAtParentBorders+0x52>
 8009324:	6858      	ldr	r0, [r3, #4]
 8009326:	1a2b      	subs	r3, r5, r0
 8009328:	4258      	negs	r0, r3
 800932a:	4158      	adcs	r0, r3
 800932c:	e004      	b.n	8009338 <WM__ClipAtParentBorders+0x54>
 800932e:	f7fe ffef 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009332:	4635      	mov	r5, r6
 8009334:	e7d9      	b.n	80092ea <WM__ClipAtParentBorders+0x6>
 8009336:	2001      	movs	r0, #1
 8009338:	b003      	add	sp, #12
 800933a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800933c:	2001b01c 	.word	0x2001b01c

08009340 <WM__InsertWindowIntoList>:
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	4604      	mov	r4, r0
 8009344:	b085      	sub	sp, #20
 8009346:	460d      	mov	r5, r1
 8009348:	2900      	cmp	r1, #0
 800934a:	d049      	beq.n	80093e0 <WM__InsertWindowIntoList+0xa0>
 800934c:	f7fe ffd2 	bl	80082f4 <GUI_ALLOC_LockH>
 8009350:	2300      	movs	r3, #0
 8009352:	6203      	str	r3, [r0, #32]
 8009354:	6185      	str	r5, [r0, #24]
 8009356:	9001      	str	r0, [sp, #4]
 8009358:	4628      	mov	r0, r5
 800935a:	f7fe ffcb 	bl	80082f4 <GUI_ALLOC_LockH>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	69c5      	ldr	r5, [r0, #28]
 8009362:	9002      	str	r0, [sp, #8]
 8009364:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8009366:	b92d      	cbnz	r5, 8009374 <WM__InsertWindowIntoList+0x34>
 8009368:	61c4      	str	r4, [r0, #28]
 800936a:	a801      	add	r0, sp, #4
 800936c:	f7fe ffd0 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009370:	a802      	add	r0, sp, #8
 8009372:	e033      	b.n	80093dc <WM__InsertWindowIntoList+0x9c>
 8009374:	4628      	mov	r0, r5
 8009376:	f7fe ffbd 	bl	80082f4 <GUI_ALLOC_LockH>
 800937a:	ae04      	add	r6, sp, #16
 800937c:	f007 0708 	and.w	r7, r7, #8
 8009380:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009384:	b977      	cbnz	r7, 80093a4 <WM__InsertWindowIntoList+0x64>
 8009386:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009388:	071a      	lsls	r2, r3, #28
 800938a:	d50b      	bpl.n	80093a4 <WM__InsertWindowIntoList+0x64>
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	621d      	str	r5, [r3, #32]
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	a801      	add	r0, sp, #4
 8009394:	61dc      	str	r4, [r3, #28]
 8009396:	f7fe ffbb 	bl	8008310 <GUI_ALLOC_UnlockH>
 800939a:	a802      	add	r0, sp, #8
 800939c:	f7fe ffb8 	bl	8008310 <GUI_ALLOC_UnlockH>
 80093a0:	4630      	mov	r0, r6
 80093a2:	e01b      	b.n	80093dc <WM__InsertWindowIntoList+0x9c>
 80093a4:	a802      	add	r0, sp, #8
 80093a6:	f7fe ffb3 	bl	8008310 <GUI_ALLOC_UnlockH>
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7fe ffb0 	bl	8008310 <GUI_ALLOC_UnlockH>
 80093b0:	4628      	mov	r0, r5
 80093b2:	f7fe ff95 	bl	80082e0 <GUI_ALLOC_h2p>
 80093b6:	9003      	str	r0, [sp, #12]
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	6a1d      	ldr	r5, [r3, #32]
 80093bc:	b90d      	cbnz	r5, 80093c2 <WM__InsertWindowIntoList+0x82>
 80093be:	621c      	str	r4, [r3, #32]
 80093c0:	e00b      	b.n	80093da <WM__InsertWindowIntoList+0x9a>
 80093c2:	4628      	mov	r0, r5
 80093c4:	f7fe ff8c 	bl	80082e0 <GUI_ALLOC_h2p>
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	d1f4      	bne.n	80093b6 <WM__InsertWindowIntoList+0x76>
 80093cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80093ce:	071b      	lsls	r3, r3, #28
 80093d0:	d5f1      	bpl.n	80093b6 <WM__InsertWindowIntoList+0x76>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	621c      	str	r4, [r3, #32]
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	621d      	str	r5, [r3, #32]
 80093da:	a801      	add	r0, sp, #4
 80093dc:	f7fe ff98 	bl	8008310 <GUI_ALLOC_UnlockH>
 80093e0:	b005      	add	sp, #20
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093e4 <WM__RemoveWindowFromList>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	4604      	mov	r4, r0
 80093e8:	f7fe ff7a 	bl	80082e0 <GUI_ALLOC_h2p>
 80093ec:	4605      	mov	r5, r0
 80093ee:	6980      	ldr	r0, [r0, #24]
 80093f0:	b1a8      	cbz	r0, 800941e <WM__RemoveWindowFromList+0x3a>
 80093f2:	f7fe ff75 	bl	80082e0 <GUI_ALLOC_h2p>
 80093f6:	69c3      	ldr	r3, [r0, #28]
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	4606      	mov	r6, r0
 80093fc:	d105      	bne.n	800940a <WM__RemoveWindowFromList+0x26>
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe ff6e 	bl	80082e0 <GUI_ALLOC_h2p>
 8009404:	6a03      	ldr	r3, [r0, #32]
 8009406:	61f3      	str	r3, [r6, #28]
 8009408:	bd70      	pop	{r4, r5, r6, pc}
 800940a:	b143      	cbz	r3, 800941e <WM__RemoveWindowFromList+0x3a>
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe ff67 	bl	80082e0 <GUI_ALLOC_h2p>
 8009412:	6a03      	ldr	r3, [r0, #32]
 8009414:	42a3      	cmp	r3, r4
 8009416:	d1f8      	bne.n	800940a <WM__RemoveWindowFromList+0x26>
 8009418:	6a2b      	ldr	r3, [r5, #32]
 800941a:	6203      	str	r3, [r0, #32]
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	bd70      	pop	{r4, r5, r6, pc}

08009420 <WM__Client2Screen>:
 8009420:	4603      	mov	r3, r0
 8009422:	4608      	mov	r0, r1
 8009424:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009428:	f9b3 1000 	ldrsh.w	r1, [r3]
 800942c:	f003 bcf2 	b.w	800ce14 <GUI_MoveRect>

08009430 <_SetClipRectUserIntersect>:
 8009430:	4b11      	ldr	r3, [pc, #68]	; (8009478 <_SetClipRectUserIntersect+0x48>)
 8009432:	b530      	push	{r4, r5, lr}
 8009434:	681c      	ldr	r4, [r3, #0]
 8009436:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009438:	b085      	sub	sp, #20
 800943a:	4605      	mov	r5, r0
 800943c:	b1ba      	cbz	r2, 800946e <_SetClipRectUserIntersect+0x3e>
 800943e:	6810      	ldr	r0, [r2, #0]
 8009440:	6851      	ldr	r1, [r2, #4]
 8009442:	ab02      	add	r3, sp, #8
 8009444:	c303      	stmia	r3!, {r0, r1}
 8009446:	4b0d      	ldr	r3, [pc, #52]	; (800947c <_SetClipRectUserIntersect+0x4c>)
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	b900      	cbnz	r0, 800944e <_SetClipRectUserIntersect+0x1e>
 800944c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800944e:	f7fe ff51 	bl	80082f4 <GUI_ALLOC_LockH>
 8009452:	ac04      	add	r4, sp, #16
 8009454:	a902      	add	r1, sp, #8
 8009456:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800945a:	f7ff ffe1 	bl	8009420 <WM__Client2Screen>
 800945e:	4620      	mov	r0, r4
 8009460:	f7fe ff56 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009464:	a802      	add	r0, sp, #8
 8009466:	4629      	mov	r1, r5
 8009468:	f003 f96e 	bl	800c748 <GUI__IntersectRect>
 800946c:	a802      	add	r0, sp, #8
 800946e:	f002 fc0d 	bl	800bc8c <LCD_SetClipRectEx>
 8009472:	b005      	add	sp, #20
 8009474:	bd30      	pop	{r4, r5, pc}
 8009476:	bf00      	nop
 8009478:	200001b0 	.word	0x200001b0
 800947c:	2001b018 	.word	0x2001b018

08009480 <WM__ActivateClipRect>:
 8009480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <WM__ActivateClipRect+0x3c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800948a:	b10a      	cbz	r2, 8009490 <WM__ActivateClipRect+0x10>
 800948c:	480c      	ldr	r0, [pc, #48]	; (80094c0 <WM__ActivateClipRect+0x40>)
 800948e:	e011      	b.n	80094b4 <WM__ActivateClipRect+0x34>
 8009490:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009492:	f7fe ff2f 	bl	80082f4 <GUI_ALLOC_LockH>
 8009496:	9001      	str	r0, [sp, #4]
 8009498:	c803      	ldmia	r0, {r0, r1}
 800949a:	ac02      	add	r4, sp, #8
 800949c:	e884 0003 	stmia.w	r4, {r0, r1}
 80094a0:	a801      	add	r0, sp, #4
 80094a2:	f7fe ff35 	bl	8008310 <GUI_ALLOC_UnlockH>
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <WM__ActivateClipRect+0x44>)
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	b111      	cbz	r1, 80094b2 <WM__ActivateClipRect+0x32>
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7ff ff19 	bl	80092e4 <WM__ClipAtParentBorders>
 80094b2:	4620      	mov	r0, r4
 80094b4:	f7ff ffbc 	bl	8009430 <_SetClipRectUserIntersect>
 80094b8:	b004      	add	sp, #16
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	200001b0 	.word	0x200001b0
 80094c0:	20019468 	.word	0x20019468
 80094c4:	2001b018 	.word	0x2001b018

080094c8 <WM__IsWindow>:
 80094c8:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <WM__IsWindow+0x1c>)
 80094ca:	b510      	push	{r4, lr}
 80094cc:	4604      	mov	r4, r0
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	b128      	cbz	r0, 80094de <WM__IsWindow+0x16>
 80094d2:	42a0      	cmp	r0, r4
 80094d4:	d004      	beq.n	80094e0 <WM__IsWindow+0x18>
 80094d6:	f7fe ff03 	bl	80082e0 <GUI_ALLOC_h2p>
 80094da:	6940      	ldr	r0, [r0, #20]
 80094dc:	e7f8      	b.n	80094d0 <WM__IsWindow+0x8>
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	2001      	movs	r0, #1
 80094e2:	bd10      	pop	{r4, pc}
 80094e4:	2001b038 	.word	0x2001b038

080094e8 <WM__InvalidateDrawAndDescs>:
 80094e8:	b513      	push	{r0, r1, r4, lr}
 80094ea:	4604      	mov	r4, r0
 80094ec:	b300      	cbz	r0, 8009530 <WM__InvalidateDrawAndDescs+0x48>
 80094ee:	f7fe ff01 	bl	80082f4 <GUI_ALLOC_LockH>
 80094f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80094f4:	9001      	str	r0, [sp, #4]
 80094f6:	0793      	lsls	r3, r2, #30
 80094f8:	d517      	bpl.n	800952a <WM__InvalidateDrawAndDescs+0x42>
 80094fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80094fc:	b140      	cbz	r0, 8009510 <WM__InvalidateDrawAndDescs+0x28>
 80094fe:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <WM__InvalidateDrawAndDescs+0x4c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	42a3      	cmp	r3, r4
 8009504:	d004      	beq.n	8009510 <WM__InvalidateDrawAndDescs+0x28>
 8009506:	f002 fad3 	bl	800bab0 <GUI_MEMDEV_Delete>
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	625a      	str	r2, [r3, #36]	; 0x24
 8009510:	4620      	mov	r0, r4
 8009512:	f003 fef6 	bl	800d302 <WM_GetFirstChild>
 8009516:	4604      	mov	r4, r0
 8009518:	b13c      	cbz	r4, 800952a <WM__InvalidateDrawAndDescs+0x42>
 800951a:	4620      	mov	r0, r4
 800951c:	f7ff ffe4 	bl	80094e8 <WM__InvalidateDrawAndDescs>
 8009520:	4620      	mov	r0, r4
 8009522:	f7fe fedd 	bl	80082e0 <GUI_ALLOC_h2p>
 8009526:	6a04      	ldr	r4, [r0, #32]
 8009528:	e7f6      	b.n	8009518 <WM__InvalidateDrawAndDescs+0x30>
 800952a:	a801      	add	r0, sp, #4
 800952c:	f7fe fef0 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009530:	b002      	add	sp, #8
 8009532:	bd10      	pop	{r4, pc}
 8009534:	2001b060 	.word	0x2001b060

08009538 <WM__RectIsNZ>:
 8009538:	f9b0 2000 	ldrsh.w	r2, [r0]
 800953c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	dc08      	bgt.n	8009556 <WM__RectIsNZ+0x1e>
 8009544:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009548:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800954c:	429a      	cmp	r2, r3
 800954e:	bfcc      	ite	gt
 8009550:	2000      	movgt	r0, #0
 8009552:	2001      	movle	r0, #1
 8009554:	4770      	bx	lr
 8009556:	2000      	movs	r0, #0
 8009558:	4770      	bx	lr
	...

0800955c <_Invalidate1Abs>:
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	b085      	sub	sp, #20
 8009560:	4606      	mov	r6, r0
 8009562:	460d      	mov	r5, r1
 8009564:	4617      	mov	r7, r2
 8009566:	f7fe febb 	bl	80082e0 <GUI_ALLOC_h2p>
 800956a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800956c:	9001      	str	r0, [sp, #4]
 800956e:	07a3      	lsls	r3, r4, #30
 8009570:	d534      	bpl.n	80095dc <_Invalidate1Abs+0x80>
 8009572:	4628      	mov	r0, r5
 8009574:	f7ff ffe0 	bl	8009538 <WM__RectIsNZ>
 8009578:	2800      	cmp	r0, #0
 800957a:	d02f      	beq.n	80095dc <_Invalidate1Abs+0x80>
 800957c:	f640 0301 	movw	r3, #2049	; 0x801
 8009580:	4023      	ands	r3, r4
 8009582:	2b01      	cmp	r3, #1
 8009584:	d02a      	beq.n	80095dc <_Invalidate1Abs+0x80>
 8009586:	4630      	mov	r0, r6
 8009588:	f7fe feb4 	bl	80082f4 <GUI_ALLOC_LockH>
 800958c:	ac02      	add	r4, sp, #8
 800958e:	4602      	mov	r2, r0
 8009590:	9001      	str	r0, [sp, #4]
 8009592:	4629      	mov	r1, r5
 8009594:	4620      	mov	r0, r4
 8009596:	f003 f8a5 	bl	800c6e4 <GUI__IntersectRects>
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff ffcc 	bl	8009538 <WM__RectIsNZ>
 80095a0:	b1c8      	cbz	r0, 80095d6 <_Invalidate1Abs+0x7a>
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80095a6:	f244 0120 	movw	r1, #16416	; 0x4020
 80095aa:	4031      	ands	r1, r6
 80095ac:	f103 0508 	add.w	r5, r3, #8
 80095b0:	b129      	cbz	r1, 80095be <_Invalidate1Abs+0x62>
 80095b2:	4628      	mov	r0, r5
 80095b4:	4629      	mov	r1, r5
 80095b6:	4622      	mov	r2, r4
 80095b8:	f003 fc3c 	bl	800ce34 <GUI_MergeRect>
 80095bc:	e00b      	b.n	80095d6 <_Invalidate1Abs+0x7a>
 80095be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095c2:	433e      	orrs	r6, r7
 80095c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80095c8:	629e      	str	r6, [r3, #40]	; 0x28
 80095ca:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <_Invalidate1Abs+0x84>)
 80095cc:	881a      	ldrh	r2, [r3, #0]
 80095ce:	3201      	adds	r2, #1
 80095d0:	801a      	strh	r2, [r3, #0]
 80095d2:	f003 fa7f 	bl	800cad4 <GUI_SignalEvent>
 80095d6:	a801      	add	r0, sp, #4
 80095d8:	f7fe fe9a 	bl	8008310 <GUI_ALLOC_UnlockH>
 80095dc:	b005      	add	sp, #20
 80095de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e0:	2001b034 	.word	0x2001b034

080095e4 <WM__Invalidate1Abs>:
 80095e4:	2220      	movs	r2, #32
 80095e6:	f7ff bfb9 	b.w	800955c <_Invalidate1Abs>

080095ea <WM_InvalidateWindowAndDescsEx>:
 80095ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ec:	460f      	mov	r7, r1
 80095ee:	b085      	sub	sp, #20
 80095f0:	4615      	mov	r5, r2
 80095f2:	4606      	mov	r6, r0
 80095f4:	b348      	cbz	r0, 800964a <WM_InvalidateWindowAndDescsEx+0x60>
 80095f6:	f7fe fe7d 	bl	80082f4 <GUI_ALLOC_LockH>
 80095fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095fc:	ac04      	add	r4, sp, #16
 80095fe:	079b      	lsls	r3, r3, #30
 8009600:	4602      	mov	r2, r0
 8009602:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8009606:	d403      	bmi.n	8009610 <WM_InvalidateWindowAndDescsEx+0x26>
 8009608:	4620      	mov	r0, r4
 800960a:	f7fe fe81 	bl	8008310 <GUI_ALLOC_UnlockH>
 800960e:	e01c      	b.n	800964a <WM_InvalidateWindowAndDescsEx+0x60>
 8009610:	a802      	add	r0, sp, #8
 8009612:	4639      	mov	r1, r7
 8009614:	f003 f866 	bl	800c6e4 <GUI__IntersectRects>
 8009618:	2800      	cmp	r0, #0
 800961a:	d0f5      	beq.n	8009608 <WM_InvalidateWindowAndDescsEx+0x1e>
 800961c:	4620      	mov	r0, r4
 800961e:	f7fe fe77 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009622:	4630      	mov	r0, r6
 8009624:	a902      	add	r1, sp, #8
 8009626:	462a      	mov	r2, r5
 8009628:	f7ff ff98 	bl	800955c <_Invalidate1Abs>
 800962c:	4630      	mov	r0, r6
 800962e:	f003 fe68 	bl	800d302 <WM_GetFirstChild>
 8009632:	4604      	mov	r4, r0
 8009634:	b14c      	cbz	r4, 800964a <WM_InvalidateWindowAndDescsEx+0x60>
 8009636:	4620      	mov	r0, r4
 8009638:	a902      	add	r1, sp, #8
 800963a:	462a      	mov	r2, r5
 800963c:	f7ff ffd5 	bl	80095ea <WM_InvalidateWindowAndDescsEx>
 8009640:	4620      	mov	r0, r4
 8009642:	f7fe fe4d 	bl	80082e0 <GUI_ALLOC_h2p>
 8009646:	6a04      	ldr	r4, [r0, #32]
 8009648:	e7f4      	b.n	8009634 <WM_InvalidateWindowAndDescsEx+0x4a>
 800964a:	b005      	add	sp, #20
 800964c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800964e <WM__InvalidateRect>:
 800964e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009652:	4680      	mov	r8, r0
 8009654:	4617      	mov	r7, r2
 8009656:	461d      	mov	r5, r3
 8009658:	460c      	mov	r4, r1
 800965a:	2900      	cmp	r1, #0
 800965c:	d030      	beq.n	80096c0 <WM__InvalidateRect+0x72>
 800965e:	4608      	mov	r0, r1
 8009660:	f7fe fe48 	bl	80082f4 <GUI_ALLOC_LockH>
 8009664:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009666:	9001      	str	r0, [sp, #4]
 8009668:	07b3      	lsls	r3, r6, #30
 800966a:	4602      	mov	r2, r0
 800966c:	d525      	bpl.n	80096ba <WM__InvalidateRect+0x6c>
 800966e:	a802      	add	r0, sp, #8
 8009670:	4641      	mov	r1, r8
 8009672:	f003 f837 	bl	800c6e4 <GUI__IntersectRects>
 8009676:	b300      	cbz	r0, 80096ba <WM__InvalidateRect+0x6c>
 8009678:	f640 0301 	movw	r3, #2049	; 0x801
 800967c:	4033      	ands	r3, r6
 800967e:	2b01      	cmp	r3, #1
 8009680:	d107      	bne.n	8009692 <WM__InvalidateRect+0x44>
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	a802      	add	r0, sp, #8
 8009686:	6999      	ldr	r1, [r3, #24]
 8009688:	6a1a      	ldr	r2, [r3, #32]
 800968a:	462b      	mov	r3, r5
 800968c:	f7ff ffdf 	bl	800964e <WM__InvalidateRect>
 8009690:	e004      	b.n	800969c <WM__InvalidateRect+0x4e>
 8009692:	4620      	mov	r0, r4
 8009694:	a902      	add	r1, sp, #8
 8009696:	462a      	mov	r2, r5
 8009698:	f7ff ff60 	bl	800955c <_Invalidate1Abs>
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	69dc      	ldr	r4, [r3, #28]
 80096a0:	b15c      	cbz	r4, 80096ba <WM__InvalidateRect+0x6c>
 80096a2:	42bc      	cmp	r4, r7
 80096a4:	d009      	beq.n	80096ba <WM__InvalidateRect+0x6c>
 80096a6:	4620      	mov	r0, r4
 80096a8:	a902      	add	r1, sp, #8
 80096aa:	462a      	mov	r2, r5
 80096ac:	f7ff ff9d 	bl	80095ea <WM_InvalidateWindowAndDescsEx>
 80096b0:	4620      	mov	r0, r4
 80096b2:	f7fe fe15 	bl	80082e0 <GUI_ALLOC_h2p>
 80096b6:	6a04      	ldr	r4, [r0, #32]
 80096b8:	e7f2      	b.n	80096a0 <WM__InvalidateRect+0x52>
 80096ba:	a801      	add	r0, sp, #4
 80096bc:	f7fe fe28 	bl	8008310 <GUI_ALLOC_UnlockH>
 80096c0:	b004      	add	sp, #16
 80096c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096c6 <WM__InvalidateParent>:
 80096c6:	b570      	push	{r4, r5, r6, lr}
 80096c8:	4605      	mov	r5, r0
 80096ca:	4608      	mov	r0, r1
 80096cc:	460c      	mov	r4, r1
 80096ce:	4616      	mov	r6, r2
 80096d0:	f7fe fe06 	bl	80082e0 <GUI_ALLOC_h2p>
 80096d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80096d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80096da:	4628      	mov	r0, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	4632      	mov	r2, r6
 80096e0:	bf0c      	ite	eq
 80096e2:	2320      	moveq	r3, #32
 80096e4:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 80096e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096ec:	f7ff bfaf 	b.w	800964e <WM__InvalidateRect>

080096f0 <WM__InvalidateRectEx>:
 80096f0:	2320      	movs	r3, #32
 80096f2:	f7ff bfac 	b.w	800964e <WM__InvalidateRect>

080096f6 <WM__DetachWindow>:
 80096f6:	b513      	push	{r0, r1, r4, lr}
 80096f8:	4604      	mov	r4, r0
 80096fa:	f7fe fdfb 	bl	80082f4 <GUI_ALLOC_LockH>
 80096fe:	6981      	ldr	r1, [r0, #24]
 8009700:	9001      	str	r0, [sp, #4]
 8009702:	b141      	cbz	r1, 8009716 <WM__DetachWindow+0x20>
 8009704:	6a02      	ldr	r2, [r0, #32]
 8009706:	f7ff fff3 	bl	80096f0 <WM__InvalidateRectEx>
 800970a:	4620      	mov	r0, r4
 800970c:	f7ff fe6a 	bl	80093e4 <WM__RemoveWindowFromList>
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	619a      	str	r2, [r3, #24]
 8009716:	a801      	add	r0, sp, #4
 8009718:	f7fe fdfa 	bl	8008310 <GUI_ALLOC_UnlockH>
 800971c:	b002      	add	sp, #8
 800971e:	bd10      	pop	{r4, pc}

08009720 <WM__SendMsgNoData>:
 8009720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009722:	ab04      	add	r3, sp, #16
 8009724:	9001      	str	r0, [sp, #4]
 8009726:	f843 1d10 	str.w	r1, [r3, #-16]!
 800972a:	4669      	mov	r1, sp
 800972c:	f003 fcb8 	bl	800d0a0 <WM__SendMessage>
 8009730:	b005      	add	sp, #20
 8009732:	f85d fb04 	ldr.w	pc, [sp], #4

08009736 <WM__GetClientRectWin>:
 8009736:	2300      	movs	r3, #0
 8009738:	800b      	strh	r3, [r1, #0]
 800973a:	8882      	ldrh	r2, [r0, #4]
 800973c:	804b      	strh	r3, [r1, #2]
 800973e:	8803      	ldrh	r3, [r0, #0]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	808b      	strh	r3, [r1, #4]
 8009744:	88c2      	ldrh	r2, [r0, #6]
 8009746:	8843      	ldrh	r3, [r0, #2]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	80cb      	strh	r3, [r1, #6]
 800974c:	4770      	bx	lr

0800974e <WM_InvalidateRect>:
 800974e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009750:	460f      	mov	r7, r1
 8009752:	b087      	sub	sp, #28
 8009754:	4605      	mov	r5, r0
 8009756:	2800      	cmp	r0, #0
 8009758:	d033      	beq.n	80097c2 <WM_InvalidateRect+0x74>
 800975a:	f7fe fdcb 	bl	80082f4 <GUI_ALLOC_LockH>
 800975e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009760:	9001      	str	r0, [sp, #4]
 8009762:	07b2      	lsls	r2, r6, #30
 8009764:	d52a      	bpl.n	80097bc <WM_InvalidateRect+0x6e>
 8009766:	c803      	ldmia	r0, {r0, r1}
 8009768:	ac04      	add	r4, sp, #16
 800976a:	03f3      	lsls	r3, r6, #15
 800976c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009770:	d502      	bpl.n	8009778 <WM_InvalidateRect+0x2a>
 8009772:	4628      	mov	r0, r5
 8009774:	f7ff feb8 	bl	80094e8 <WM__InvalidateDrawAndDescs>
 8009778:	b15f      	cbz	r7, 8009792 <WM_InvalidateRect+0x44>
 800977a:	6838      	ldr	r0, [r7, #0]
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	ab02      	add	r3, sp, #8
 8009780:	c303      	stmia	r3!, {r0, r1}
 8009782:	9801      	ldr	r0, [sp, #4]
 8009784:	a902      	add	r1, sp, #8
 8009786:	f7ff fe4b 	bl	8009420 <WM__Client2Screen>
 800978a:	4620      	mov	r0, r4
 800978c:	a902      	add	r1, sp, #8
 800978e:	f002 ffdb 	bl	800c748 <GUI__IntersectRect>
 8009792:	4620      	mov	r0, r4
 8009794:	4629      	mov	r1, r5
 8009796:	f7ff fda5 	bl	80092e4 <WM__ClipAtParentBorders>
 800979a:	b178      	cbz	r0, 80097bc <WM_InvalidateRect+0x6e>
 800979c:	f640 0301 	movw	r3, #2049	; 0x801
 80097a0:	4033      	ands	r3, r6
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d106      	bne.n	80097b4 <WM_InvalidateRect+0x66>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	4620      	mov	r0, r4
 80097aa:	6999      	ldr	r1, [r3, #24]
 80097ac:	6a1a      	ldr	r2, [r3, #32]
 80097ae:	f7ff ff9f 	bl	80096f0 <WM__InvalidateRectEx>
 80097b2:	e003      	b.n	80097bc <WM_InvalidateRect+0x6e>
 80097b4:	4628      	mov	r0, r5
 80097b6:	4621      	mov	r1, r4
 80097b8:	f7ff ff14 	bl	80095e4 <WM__Invalidate1Abs>
 80097bc:	a801      	add	r0, sp, #4
 80097be:	f7fe fda7 	bl	8008310 <GUI_ALLOC_UnlockH>
 80097c2:	b007      	add	sp, #28
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097c6 <WM_InvalidateWindow>:
 80097c6:	2100      	movs	r1, #0
 80097c8:	f7ff bfc1 	b.w	800974e <WM_InvalidateRect>

080097cc <WM__GetTopLevelLayer>:
 80097cc:	b510      	push	{r4, lr}
 80097ce:	4604      	mov	r4, r0
 80097d0:	f7fe fd86 	bl	80082e0 <GUI_ALLOC_h2p>
 80097d4:	6980      	ldr	r0, [r0, #24]
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d1f9      	bne.n	80097ce <WM__GetTopLevelLayer+0x2>
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <WM__GetTopLevelLayer+0x24>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4294      	cmp	r4, r2
 80097e0:	d005      	beq.n	80097ee <WM__GetTopLevelLayer+0x22>
 80097e2:	6858      	ldr	r0, [r3, #4]
 80097e4:	4284      	cmp	r4, r0
 80097e6:	bf14      	ite	ne
 80097e8:	f04f 30ff 	movne.w	r0, #4294967295
 80097ec:	2001      	moveq	r0, #1
 80097ee:	bd10      	pop	{r4, pc}
 80097f0:	2001b01c 	.word	0x2001b01c

080097f4 <WM__SelectTopLevelLayer>:
 80097f4:	b508      	push	{r3, lr}
 80097f6:	f7ff ffe9 	bl	80097cc <WM__GetTopLevelLayer>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	db03      	blt.n	8009806 <WM__SelectTopLevelLayer+0x12>
 80097fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009802:	f003 baab 	b.w	800cd5c <GUI_SelectLayer>
 8009806:	bd08      	pop	{r3, pc}

08009808 <WM_SelectWindow>:
 8009808:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <WM_SelectWindow+0x38>)
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8009810:	4604      	mov	r4, r0
 8009812:	4616      	mov	r6, r2
 8009814:	b908      	cbnz	r0, 800981a <WM_SelectWindow+0x12>
 8009816:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <WM_SelectWindow+0x3c>)
 8009818:	6814      	ldr	r4, [r2, #0]
 800981a:	649c      	str	r4, [r3, #72]	; 0x48
 800981c:	4620      	mov	r0, r4
 800981e:	f7ff ffe9 	bl	80097f4 <WM__SelectTopLevelLayer>
 8009822:	f002 fe21 	bl	800c468 <LCD_SetClipRectMax>
 8009826:	4620      	mov	r0, r4
 8009828:	f7fe fd5a 	bl	80082e0 <GUI_ALLOC_h2p>
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8009832:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009836:	64d9      	str	r1, [r3, #76]	; 0x4c
 8009838:	651a      	str	r2, [r3, #80]	; 0x50
 800983a:	4628      	mov	r0, r5
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	bf00      	nop
 8009840:	200001b0 	.word	0x200001b0
 8009844:	2001b038 	.word	0x2001b038

08009848 <WM_CreateWindowAsChild>:
 8009848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800984e:	469b      	mov	fp, r3
 8009850:	4b4b      	ldr	r3, [pc, #300]	; (8009980 <WM_CreateWindowAsChild+0x138>)
 8009852:	4607      	mov	r7, r0
 8009854:	4688      	mov	r8, r1
 8009856:	4692      	mov	sl, r2
 8009858:	681e      	ldr	r6, [r3, #0]
 800985a:	bb65      	cbnz	r5, 80098b6 <WM_CreateWindowAsChild+0x6e>
 800985c:	4b49      	ldr	r3, [pc, #292]	; (8009984 <WM_CreateWindowAsChild+0x13c>)
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b363      	cbz	r3, 80098bc <WM_CreateWindowAsChild+0x74>
 8009862:	4b49      	ldr	r3, [pc, #292]	; (8009988 <WM_CreateWindowAsChild+0x140>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	7c5a      	ldrb	r2, [r3, #17]
 8009868:	4b48      	ldr	r3, [pc, #288]	; (800998c <WM_CreateWindowAsChild+0x144>)
 800986a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	d024      	beq.n	80098bc <WM_CreateWindowAsChild+0x74>
 8009872:	b31b      	cbz	r3, 80098bc <WM_CreateWindowAsChild+0x74>
 8009874:	461d      	mov	r5, r3
 8009876:	4628      	mov	r0, r5
 8009878:	f7fe fd3c 	bl	80082f4 <GUI_ALLOC_LockH>
 800987c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009880:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009884:	9001      	str	r0, [sp, #4]
 8009886:	4417      	add	r7, r2
 8009888:	4498      	add	r8, r3
 800988a:	f1ba 0f00 	cmp.w	sl, #0
 800988e:	d105      	bne.n	800989c <WM_CreateWindowAsChild+0x54>
 8009890:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8009894:	ebc2 0a0a 	rsb	sl, r2, sl
 8009898:	f10a 0a01 	add.w	sl, sl, #1
 800989c:	f1bb 0f00 	cmp.w	fp, #0
 80098a0:	d105      	bne.n	80098ae <WM_CreateWindowAsChild+0x66>
 80098a2:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 80098a6:	ebc3 0b0b 	rsb	fp, r3, fp
 80098aa:	f10b 0b01 	add.w	fp, fp, #1
 80098ae:	a801      	add	r0, sp, #4
 80098b0:	f7fe fd2e 	bl	8008310 <GUI_ALLOC_UnlockH>
 80098b4:	e002      	b.n	80098bc <WM_CreateWindowAsChild+0x74>
 80098b6:	1c6b      	adds	r3, r5, #1
 80098b8:	d1dd      	bne.n	8009876 <WM_CreateWindowAsChild+0x2e>
 80098ba:	2500      	movs	r5, #0
 80098bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80098be:	302c      	adds	r0, #44	; 0x2c
 80098c0:	f003 fb3c 	bl	800cf3c <GUI_ALLOC_AllocZero>
 80098c4:	4604      	mov	r4, r0
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d056      	beq.n	8009978 <WM_CreateWindowAsChild+0x130>
 80098ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098cc:	431e      	orrs	r6, r3
 80098ce:	4b2d      	ldr	r3, [pc, #180]	; (8009984 <WM_CreateWindowAsChild+0x13c>)
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	3201      	adds	r2, #1
 80098d4:	801a      	strh	r2, [r3, #0]
 80098d6:	f7fe fd0d 	bl	80082f4 <GUI_ALLOC_LockH>
 80098da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098dc:	6103      	str	r3, [r0, #16]
 80098de:	f10d 0908 	add.w	r9, sp, #8
 80098e2:	4b2b      	ldr	r3, [pc, #172]	; (8009990 <WM_CreateWindowAsChild+0x148>)
 80098e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80098e6:	f849 0d08 	str.w	r0, [r9, #-8]!
 80098ea:	4033      	ands	r3, r6
 80098ec:	8007      	strh	r7, [r0, #0]
 80098ee:	f8a0 8002 	strh.w	r8, [r0, #2]
 80098f2:	4457      	add	r7, sl
 80098f4:	44d8      	add	r8, fp
 80098f6:	4313      	orrs	r3, r2
 80098f8:	3f01      	subs	r7, #1
 80098fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80098fe:	6283      	str	r3, [r0, #40]	; 0x28
 8009900:	8087      	strh	r7, [r0, #4]
 8009902:	f8a0 8006 	strh.w	r8, [r0, #6]
 8009906:	4668      	mov	r0, sp
 8009908:	f7fe fd02 	bl	8008310 <GUI_ALLOC_UnlockH>
 800990c:	4b21      	ldr	r3, [pc, #132]	; (8009994 <WM_CreateWindowAsChild+0x14c>)
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	b148      	cbz	r0, 8009926 <WM_CreateWindowAsChild+0xde>
 8009912:	f7fe fce5 	bl	80082e0 <GUI_ALLOC_h2p>
 8009916:	4607      	mov	r7, r0
 8009918:	4620      	mov	r0, r4
 800991a:	f7fe fce1 	bl	80082e0 <GUI_ALLOC_h2p>
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6143      	str	r3, [r0, #20]
 8009922:	617c      	str	r4, [r7, #20]
 8009924:	e000      	b.n	8009928 <WM_CreateWindowAsChild+0xe0>
 8009926:	601c      	str	r4, [r3, #0]
 8009928:	4629      	mov	r1, r5
 800992a:	4620      	mov	r0, r4
 800992c:	f7ff fd08 	bl	8009340 <WM__InsertWindowIntoList>
 8009930:	06b5      	lsls	r5, r6, #26
 8009932:	d502      	bpl.n	800993a <WM_CreateWindowAsChild+0xf2>
 8009934:	4620      	mov	r0, r4
 8009936:	f7ff ff67 	bl	8009808 <WM_SelectWindow>
 800993a:	07f0      	lsls	r0, r6, #31
 800993c:	d503      	bpl.n	8009946 <WM_CreateWindowAsChild+0xfe>
 800993e:	4b16      	ldr	r3, [pc, #88]	; (8009998 <WM_CreateWindowAsChild+0x150>)
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	3201      	adds	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	0671      	lsls	r1, r6, #25
 8009948:	d502      	bpl.n	8009950 <WM_CreateWindowAsChild+0x108>
 800994a:	4620      	mov	r0, r4
 800994c:	f003 fcf2 	bl	800d334 <WM_BringToBottom>
 8009950:	07b2      	lsls	r2, r6, #30
 8009952:	d50d      	bpl.n	8009970 <WM_CreateWindowAsChild+0x128>
 8009954:	4620      	mov	r0, r4
 8009956:	f7fe fccd 	bl	80082f4 <GUI_ALLOC_LockH>
 800995a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800995c:	9000      	str	r0, [sp, #0]
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	6283      	str	r3, [r0, #40]	; 0x28
 8009964:	4668      	mov	r0, sp
 8009966:	f7fe fcd3 	bl	8008310 <GUI_ALLOC_UnlockH>
 800996a:	4620      	mov	r0, r4
 800996c:	f7ff ff2b 	bl	80097c6 <WM_InvalidateWindow>
 8009970:	4620      	mov	r0, r4
 8009972:	2101      	movs	r1, #1
 8009974:	f7ff fed4 	bl	8009720 <WM__SendMsgNoData>
 8009978:	4620      	mov	r0, r4
 800997a:	b003      	add	sp, #12
 800997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009980:	2001b044 	.word	0x2001b044
 8009984:	2001b014 	.word	0x2001b014
 8009988:	200001b0 	.word	0x200001b0
 800998c:	2001b01c 	.word	0x2001b01c
 8009990:	003f3f9f 	.word	0x003f3f9f
 8009994:	2001b038 	.word	0x2001b038
 8009998:	2001b064 	.word	0x2001b064

0800999c <WM_DeleteWindow>:
 800999c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800999e:	4604      	mov	r4, r0
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d06e      	beq.n	8009a82 <WM_DeleteWindow+0xe6>
 80099a4:	f7ff fd90 	bl	80094c8 <WM__IsWindow>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d06a      	beq.n	8009a82 <WM_DeleteWindow+0xe6>
 80099ac:	4620      	mov	r0, r4
 80099ae:	f7ff ff0d 	bl	80097cc <WM__GetTopLevelLayer>
 80099b2:	210b      	movs	r1, #11
 80099b4:	4605      	mov	r5, r0
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff feb2 	bl	8009720 <WM__SendMsgNoData>
 80099bc:	4620      	mov	r0, r4
 80099be:	f003 fbba 	bl	800d136 <WM__DeleteAssocTimer>
 80099c2:	4620      	mov	r0, r4
 80099c4:	f7fe fc96 	bl	80082f4 <GUI_ALLOC_LockH>
 80099c8:	9001      	str	r0, [sp, #4]
 80099ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80099cc:	b108      	cbz	r0, 80099d2 <WM_DeleteWindow+0x36>
 80099ce:	f002 f86f 	bl	800bab0 <GUI_MEMDEV_Delete>
 80099d2:	4b2d      	ldr	r3, [pc, #180]	; (8009a88 <WM_DeleteWindow+0xec>)
 80099d4:	4a2d      	ldr	r2, [pc, #180]	; (8009a8c <WM_DeleteWindow+0xf0>)
 80099d6:	2100      	movs	r1, #0
 80099d8:	6019      	str	r1, [r3, #0]
 80099da:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <WM_DeleteWindow+0xf4>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80099e2:	42a0      	cmp	r0, r4
 80099e4:	bf08      	it	eq
 80099e6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80099ea:	4a2a      	ldr	r2, [pc, #168]	; (8009a94 <WM_DeleteWindow+0xf8>)
 80099ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099f0:	42a1      	cmp	r1, r4
 80099f2:	bf04      	itt	eq
 80099f4:	2100      	moveq	r1, #0
 80099f6:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80099fa:	4b27      	ldr	r3, [pc, #156]	; (8009a98 <WM_DeleteWindow+0xfc>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	b12b      	cbz	r3, 8009a0c <WM_DeleteWindow+0x70>
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	42a2      	cmp	r2, r4
 8009a04:	bf04      	itt	eq
 8009a06:	2200      	moveq	r2, #0
 8009a08:	605a      	streq	r2, [r3, #4]
 8009a0a:	e7f7      	b.n	80099fc <WM_DeleteWindow+0x60>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	2107      	movs	r1, #7
 8009a10:	f003 fc65 	bl	800d2de <WM_NotifyParent>
 8009a14:	9e01      	ldr	r6, [sp, #4]
 8009a16:	69f0      	ldr	r0, [r6, #28]
 8009a18:	f7ff ffc0 	bl	800999c <WM_DeleteWindow>
 8009a1c:	69f3      	ldr	r3, [r6, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1f9      	bne.n	8009a16 <WM_DeleteWindow+0x7a>
 8009a22:	4620      	mov	r0, r4
 8009a24:	f7ff fe67 	bl	80096f6 <WM__DetachWindow>
 8009a28:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <WM_DeleteWindow+0x100>)
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	b150      	cbz	r0, 8009a44 <WM_DeleteWindow+0xa8>
 8009a2e:	f7fe fc57 	bl	80082e0 <GUI_ALLOC_h2p>
 8009a32:	4606      	mov	r6, r0
 8009a34:	6940      	ldr	r0, [r0, #20]
 8009a36:	42a0      	cmp	r0, r4
 8009a38:	d1f8      	bne.n	8009a2c <WM_DeleteWindow+0x90>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7fe fc50 	bl	80082e0 <GUI_ALLOC_h2p>
 8009a40:	6943      	ldr	r3, [r0, #20]
 8009a42:	6173      	str	r3, [r6, #20]
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	07da      	lsls	r2, r3, #31
 8009a4a:	d503      	bpl.n	8009a54 <WM_DeleteWindow+0xb8>
 8009a4c:	4a14      	ldr	r2, [pc, #80]	; (8009aa0 <WM_DeleteWindow+0x104>)
 8009a4e:	6811      	ldr	r1, [r2, #0]
 8009a50:	3901      	subs	r1, #1
 8009a52:	6011      	str	r1, [r2, #0]
 8009a54:	069b      	lsls	r3, r3, #26
 8009a56:	d503      	bpl.n	8009a60 <WM_DeleteWindow+0xc4>
 8009a58:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <WM_DeleteWindow+0x108>)
 8009a5a:	881a      	ldrh	r2, [r3, #0]
 8009a5c:	3a01      	subs	r2, #1
 8009a5e:	801a      	strh	r2, [r3, #0]
 8009a60:	a801      	add	r0, sp, #4
 8009a62:	f7fe fc55 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <WM_DeleteWindow+0x10c>)
 8009a68:	881a      	ldrh	r2, [r3, #0]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	3a01      	subs	r2, #1
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	f7fe fc6e 	bl	8008350 <GUI_ALLOC_Free>
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	db04      	blt.n	8009a82 <WM_DeleteWindow+0xe6>
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <WM_DeleteWindow+0x110>)
 8009a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a7e:	f7ff fec3 	bl	8009808 <WM_SelectWindow>
 8009a82:	b002      	add	sp, #8
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	bf00      	nop
 8009a88:	20019478 	.word	0x20019478
 8009a8c:	2001b02c 	.word	0x2001b02c
 8009a90:	2001b03c 	.word	0x2001b03c
 8009a94:	2001b058 	.word	0x2001b058
 8009a98:	2001b050 	.word	0x2001b050
 8009a9c:	2001b038 	.word	0x2001b038
 8009aa0:	2001b064 	.word	0x2001b064
 8009aa4:	2001b034 	.word	0x2001b034
 8009aa8:	2001b014 	.word	0x2001b014
 8009aac:	2001b01c 	.word	0x2001b01c

08009ab0 <WM__GetNextIVR>:
 8009ab0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009ab4:	4f5d      	ldr	r7, [pc, #372]	; (8009c2c <WM__GetNextIVR+0x17c>)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009abc:	2800      	cmp	r0, #0
 8009abe:	f000 80b2 	beq.w	8009c26 <WM__GetNextIVR+0x176>
 8009ac2:	4b5b      	ldr	r3, [pc, #364]	; (8009c30 <WM__GetNextIVR+0x180>)
 8009ac4:	695a      	ldr	r2, [r3, #20]
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	461c      	mov	r4, r3
 8009aca:	dd03      	ble.n	8009ad4 <WM__GetNextIVR+0x24>
 8009acc:	3a01      	subs	r2, #1
 8009ace:	615a      	str	r2, [r3, #20]
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e0a8      	b.n	8009c26 <WM__GetNextIVR+0x176>
 8009ad4:	f104 0608 	add.w	r6, r4, #8
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009ade:	3301      	adds	r3, #1
 8009ae0:	ad02      	add	r5, sp, #8
 8009ae2:	6123      	str	r3, [r4, #16]
 8009ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ae8:	b923      	cbnz	r3, 8009af4 <WM__GetNextIVR+0x44>
 8009aea:	8823      	ldrh	r3, [r4, #0]
 8009aec:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009af0:	8863      	ldrh	r3, [r4, #2]
 8009af2:	e011      	b.n	8009b18 <WM__GetNextIVR+0x68>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	8962      	ldrh	r2, [r4, #10]
 8009af8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009afc:	3301      	adds	r3, #1
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009b04:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009b08:	b21b      	sxth	r3, r3
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	da06      	bge.n	8009b1c <WM__GetNextIVR+0x6c>
 8009b0e:	8823      	ldrh	r3, [r4, #0]
 8009b10:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009b14:	89e3      	ldrh	r3, [r4, #14]
 8009b16:	3301      	adds	r3, #1
 8009b18:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009b1c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8009b20:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009b24:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009c30 <WM__GetNextIVR+0x180>
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	dd04      	ble.n	8009b36 <WM__GetNextIVR+0x86>
 8009b2c:	6963      	ldr	r3, [r4, #20]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2000      	movs	r0, #0
 8009b32:	6163      	str	r3, [r4, #20]
 8009b34:	e077      	b.n	8009c26 <WM__GetNextIVR+0x176>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009b3a:	f7fe fbdb 	bl	80082f4 <GUI_ALLOC_LockH>
 8009b3e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009b42:	f9b8 3000 	ldrsh.w	r3, [r8]
 8009b46:	9001      	str	r0, [sp, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d11c      	bne.n	8009b86 <WM__GetNextIVR+0xd6>
 8009b4c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009b50:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b54:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009b58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009b5c:	4b33      	ldr	r3, [pc, #204]	; (8009c2c <WM__GetNextIVR+0x17c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b62:	b15a      	cbz	r2, 8009b7c <WM__GetNextIVR+0xcc>
 8009b64:	4610      	mov	r0, r2
 8009b66:	f7fe fbbb 	bl	80082e0 <GUI_ALLOC_h2p>
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6a00      	ldr	r0, [r0, #32]
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7ff f9cb 	bl	8008f0c <_Findy1>
 8009b76:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009b7a:	e7f2      	b.n	8009b62 <WM__GetNextIVR+0xb2>
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	4629      	mov	r1, r5
 8009b80:	69d8      	ldr	r0, [r3, #28]
 8009b82:	f7ff f9c3 	bl	8008f0c <_Findy1>
 8009b86:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009b8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b92:	b16a      	cbz	r2, 8009bb0 <WM__GetNextIVR+0x100>
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fe fba3 	bl	80082e0 <GUI_ALLOC_h2p>
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6a00      	ldr	r0, [r0, #32]
 8009ba2:	f7ff fa09 	bl	8008fb8 <_Findx0>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d1ed      	bne.n	8009b86 <WM__GetNextIVR+0xd6>
 8009baa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009bae:	e7f0      	b.n	8009b92 <WM__GetNextIVR+0xe2>
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	69d8      	ldr	r0, [r3, #28]
 8009bb6:	f7ff f9ff 	bl	8008fb8 <_Findx0>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d1e3      	bne.n	8009b86 <WM__GetNextIVR+0xd6>
 8009bbe:	88a3      	ldrh	r3, [r4, #4]
 8009bc0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009bc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009bc8:	b21b      	sxth	r3, r3
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	dd07      	ble.n	8009bde <WM__GetNextIVR+0x12e>
 8009bce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009bd2:	e886 0003 	stmia.w	r6, {r0, r1}
 8009bd6:	a801      	add	r0, sp, #4
 8009bd8:	f7fe fb9a 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009bdc:	e797      	b.n	8009b0e <WM__GetNextIVR+0x5e>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009be2:	b152      	cbz	r2, 8009bfa <WM__GetNextIVR+0x14a>
 8009be4:	4610      	mov	r0, r2
 8009be6:	f7fe fb7b 	bl	80082e0 <GUI_ALLOC_h2p>
 8009bea:	4607      	mov	r7, r0
 8009bec:	2200      	movs	r2, #0
 8009bee:	6a00      	ldr	r0, [r0, #32]
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7ff fa25 	bl	8009040 <_Findx1>
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	e7f3      	b.n	8009be2 <WM__GetNextIVR+0x132>
 8009bfa:	af04      	add	r7, sp, #16
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8009c02:	69d8      	ldr	r0, [r3, #28]
 8009c04:	f7ff fa1c 	bl	8009040 <_Findx1>
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7fe fb81 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009c14:	4293      	cmp	r3, r2
 8009c16:	dc89      	bgt.n	8009b2c <WM__GetNextIVR+0x7c>
 8009c18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009c1c:	e886 0003 	stmia.w	r6, {r0, r1}
 8009c20:	f7ff fc2e 	bl	8009480 <WM__ActivateClipRect>
 8009c24:	2001      	movs	r0, #1
 8009c26:	b004      	add	sp, #16
 8009c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2c:	200001b0 	.word	0x200001b0
 8009c30:	20019460 	.word	0x20019460

08009c34 <WM__InitIVRSearch>:
 8009c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c38:	4f39      	ldr	r7, [pc, #228]	; (8009d20 <WM__InitIVRSearch+0xec>)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8009c40:	b086      	sub	sp, #24
 8009c42:	4606      	mov	r6, r0
 8009c44:	b912      	cbnz	r2, 8009c4c <WM__InitIVRSearch+0x18>
 8009c46:	f7ff fc1b 	bl	8009480 <WM__ActivateClipRect>
 8009c4a:	e064      	b.n	8009d16 <WM__InitIVRSearch+0xe2>
 8009c4c:	4d35      	ldr	r5, [pc, #212]	; (8009d24 <WM__InitIVRSearch+0xf0>)
 8009c4e:	696a      	ldr	r2, [r5, #20]
 8009c50:	3201      	adds	r2, #1
 8009c52:	2a01      	cmp	r2, #1
 8009c54:	616a      	str	r2, [r5, #20]
 8009c56:	462c      	mov	r4, r5
 8009c58:	dc5d      	bgt.n	8009d16 <WM__InitIVRSearch+0xe2>
 8009c5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009c5c:	f7fe fb4a 	bl	80082f4 <GUI_ALLOC_LockH>
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	612a      	str	r2, [r5, #16]
 8009c66:	4a30      	ldr	r2, [pc, #192]	; (8009d28 <WM__InitIVRSearch+0xf4>)
 8009c68:	9000      	str	r0, [sp, #0]
 8009c6a:	7812      	ldrb	r2, [r2, #0]
 8009c6c:	b12a      	cbz	r2, 8009c7a <WM__InitIVRSearch+0x46>
 8009c6e:	f100 0308 	add.w	r3, r0, #8
 8009c72:	aa02      	add	r2, sp, #8
 8009c74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c78:	e005      	b.n	8009c86 <WM__InitIVRSearch+0x52>
 8009c7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009c7c:	f012 0802 	ands.w	r8, r2, #2
 8009c80:	d00a      	beq.n	8009c98 <WM__InitIVRSearch+0x64>
 8009c82:	c803      	ldmia	r0, {r0, r1}
 8009c84:	aa02      	add	r2, sp, #8
 8009c86:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c8a:	ad02      	add	r5, sp, #8
 8009c8c:	b166      	cbz	r6, 8009ca8 <WM__InitIVRSearch+0x74>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	4631      	mov	r1, r6
 8009c92:	f002 fd59 	bl	800c748 <GUI__IntersectRect>
 8009c96:	e007      	b.n	8009ca8 <WM__InitIVRSearch+0x74>
 8009c98:	696b      	ldr	r3, [r5, #20]
 8009c9a:	4668      	mov	r0, sp
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	616b      	str	r3, [r5, #20]
 8009ca0:	f7fe fb36 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	e037      	b.n	8009d18 <WM__InitIVRSearch+0xe4>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	4e20      	ldr	r6, [pc, #128]	; (8009d2c <WM__InitIVRSearch+0xf8>)
 8009cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cae:	b1c2      	cbz	r2, 8009ce2 <WM__InitIVRSearch+0xae>
 8009cb0:	9b00      	ldr	r3, [sp, #0]
 8009cb2:	6810      	ldr	r0, [r2, #0]
 8009cb4:	6851      	ldr	r1, [r2, #4]
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	ab04      	add	r3, sp, #16
 8009cba:	c303      	stmia	r3!, {r0, r1}
 8009cbc:	6833      	ldr	r3, [r6, #0]
 8009cbe:	b133      	cbz	r3, 8009cce <WM__InitIVRSearch+0x9a>
 8009cc0:	a801      	add	r0, sp, #4
 8009cc2:	f7fe fb25 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009cc6:	6830      	ldr	r0, [r6, #0]
 8009cc8:	f7fe fb14 	bl	80082f4 <GUI_ALLOC_LockH>
 8009ccc:	9001      	str	r0, [sp, #4]
 8009cce:	9801      	ldr	r0, [sp, #4]
 8009cd0:	a904      	add	r1, sp, #16
 8009cd2:	f7ff fba5 	bl	8009420 <WM__Client2Screen>
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	a904      	add	r1, sp, #16
 8009cda:	f002 fd35 	bl	800c748 <GUI__IntersectRect>
 8009cde:	a801      	add	r0, sp, #4
 8009ce0:	e000      	b.n	8009ce4 <WM__InitIVRSearch+0xb0>
 8009ce2:	4668      	mov	r0, sp
 8009ce4:	f7fe fb14 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009ce8:	6831      	ldr	r1, [r6, #0]
 8009cea:	b119      	cbz	r1, 8009cf4 <WM__InitIVRSearch+0xc0>
 8009cec:	4628      	mov	r0, r5
 8009cee:	f7ff faf9 	bl	80092e4 <WM__ClipAtParentBorders>
 8009cf2:	b128      	cbz	r0, 8009d00 <WM__InitIVRSearch+0xcc>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009cfa:	f7ff faf3 	bl	80092e4 <WM__ClipAtParentBorders>
 8009cfe:	b918      	cbnz	r0, 8009d08 <WM__InitIVRSearch+0xd4>
 8009d00:	6963      	ldr	r3, [r4, #20]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	6163      	str	r3, [r4, #20]
 8009d06:	e007      	b.n	8009d18 <WM__InitIVRSearch+0xe4>
 8009d08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009d10:	f7ff fece 	bl	8009ab0 <WM__GetNextIVR>
 8009d14:	e000      	b.n	8009d18 <WM__InitIVRSearch+0xe4>
 8009d16:	2001      	movs	r0, #1
 8009d18:	b006      	add	sp, #24
 8009d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1e:	bf00      	nop
 8009d20:	200001b0 	.word	0x200001b0
 8009d24:	20019460 	.word	0x20019460
 8009d28:	2001b041 	.word	0x2001b041
 8009d2c:	2001b018 	.word	0x2001b018

08009d30 <WM_SetDefault>:
 8009d30:	b508      	push	{r3, lr}
 8009d32:	f002 ffcd 	bl	800ccd0 <GL_SetDefault>
 8009d36:	4b02      	ldr	r3, [pc, #8]	; (8009d40 <WM_SetDefault+0x10>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	645a      	str	r2, [r3, #68]	; 0x44
 8009d3e:	bd08      	pop	{r3, pc}
 8009d40:	200001b0 	.word	0x200001b0

08009d44 <WM__Paint1>:
 8009d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d46:	b089      	sub	sp, #36	; 0x24
 8009d48:	4604      	mov	r4, r0
 8009d4a:	f7fe fad3 	bl	80082f4 <GUI_ALLOC_LockH>
 8009d4e:	6907      	ldr	r7, [r0, #16]
 8009d50:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009d52:	9001      	str	r0, [sp, #4]
 8009d54:	3008      	adds	r0, #8
 8009d56:	c803      	ldmia	r0, {r0, r1}
 8009d58:	ad02      	add	r5, sp, #8
 8009d5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009d5e:	a801      	add	r0, sp, #4
 8009d60:	f7fe fad6 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009d64:	2f00      	cmp	r7, #0
 8009d66:	d031      	beq.n	8009dcc <WM__Paint1+0x88>
 8009d68:	07b3      	lsls	r3, r6, #30
 8009d6a:	d52f      	bpl.n	8009dcc <WM__Paint1+0x88>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	212e      	movs	r1, #46	; 0x2e
 8009d70:	f003 fa38 	bl	800d1e4 <WM_SendMessageNoPara>
 8009d74:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <WM__Paint1+0x8c>)
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8009d7c:	f102 0201 	add.w	r2, r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	461e      	mov	r6, r3
 8009d84:	d00a      	beq.n	8009d9c <WM__Paint1+0x58>
 8009d86:	230f      	movs	r3, #15
 8009d88:	9405      	str	r4, [sp, #20]
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	9507      	str	r5, [sp, #28]
 8009d8e:	f7ff ffcf 	bl	8009d30 <WM_SetDefault>
 8009d92:	4620      	mov	r0, r4
 8009d94:	a904      	add	r1, sp, #16
 8009d96:	f003 f983 	bl	800d0a0 <WM__SendMessage>
 8009d9a:	e010      	b.n	8009dbe <WM__Paint1+0x7a>
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f7ff ff49 	bl	8009c34 <WM__InitIVRSearch>
 8009da2:	b160      	cbz	r0, 8009dbe <WM__Paint1+0x7a>
 8009da4:	230f      	movs	r3, #15
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	9405      	str	r4, [sp, #20]
 8009daa:	9507      	str	r5, [sp, #28]
 8009dac:	f7ff ffc0 	bl	8009d30 <WM_SetDefault>
 8009db0:	4620      	mov	r0, r4
 8009db2:	a904      	add	r1, sp, #16
 8009db4:	f003 f974 	bl	800d0a0 <WM__SendMessage>
 8009db8:	f7ff fe7a 	bl	8009ab0 <WM__GetNextIVR>
 8009dbc:	e7f1      	b.n	8009da2 <WM__Paint1+0x5e>
 8009dbe:	7833      	ldrb	r3, [r6, #0]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	212f      	movs	r1, #47	; 0x2f
 8009dc6:	7033      	strb	r3, [r6, #0]
 8009dc8:	f003 fa0c 	bl	800d1e4 <WM_SendMessageNoPara>
 8009dcc:	b009      	add	sp, #36	; 0x24
 8009dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd0:	2001b041 	.word	0x2001b041

08009dd4 <WM__Paint>:
 8009dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	ac06      	add	r4, sp, #24
 8009dda:	9003      	str	r0, [sp, #12]
 8009ddc:	f7fe fa8a 	bl	80082f4 <GUI_ALLOC_LockH>
 8009de0:	f100 0208 	add.w	r2, r0, #8
 8009de4:	4603      	mov	r3, r0
 8009de6:	9005      	str	r0, [sp, #20]
 8009de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dec:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009dee:	699e      	ldr	r6, [r3, #24]
 8009df0:	691f      	ldr	r7, [r3, #16]
 8009df2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009df6:	a805      	add	r0, sp, #20
 8009df8:	f7fe fa8a 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009dfc:	f244 0320 	movw	r3, #16416	; 0x4020
 8009e00:	402b      	ands	r3, r5
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d034      	beq.n	8009e70 <WM__Paint+0x9c>
 8009e06:	b1bf      	cbz	r7, 8009e38 <WM__Paint+0x64>
 8009e08:	4620      	mov	r0, r4
 8009e0a:	9903      	ldr	r1, [sp, #12]
 8009e0c:	f7ff fa6a 	bl	80092e4 <WM__ClipAtParentBorders>
 8009e10:	b190      	cbz	r0, 8009e38 <WM__Paint+0x64>
 8009e12:	9803      	ldr	r0, [sp, #12]
 8009e14:	f7ff fcf8 	bl	8009808 <WM_SelectWindow>
 8009e18:	0769      	lsls	r1, r5, #29
 8009e1a:	d50f      	bpl.n	8009e3c <WM__Paint+0x68>
 8009e1c:	b126      	cbz	r6, 8009e28 <WM__Paint+0x54>
 8009e1e:	f005 0501 	and.w	r5, r5, #1
 8009e22:	f085 0501 	eor.w	r5, r5, #1
 8009e26:	e000      	b.n	8009e2a <WM__Paint+0x56>
 8009e28:	2501      	movs	r5, #1
 8009e2a:	9500      	str	r5, [sp, #0]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4912      	ldr	r1, [pc, #72]	; (8009e78 <WM__Paint+0xa4>)
 8009e30:	aa03      	add	r2, sp, #12
 8009e32:	2300      	movs	r3, #0
 8009e34:	f000 facc 	bl	800a3d0 <GUI_MEMDEV_Draw>
 8009e38:	2400      	movs	r4, #0
 8009e3a:	e003      	b.n	8009e44 <WM__Paint+0x70>
 8009e3c:	9803      	ldr	r0, [sp, #12]
 8009e3e:	f7ff f9e1 	bl	8009204 <WM__PaintWinAndOverlays>
 8009e42:	2401      	movs	r4, #1
 8009e44:	9803      	ldr	r0, [sp, #12]
 8009e46:	f7fe fa55 	bl	80082f4 <GUI_ALLOC_LockH>
 8009e4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009e4c:	9005      	str	r0, [sp, #20]
 8009e4e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8009e52:	f023 0320 	bic.w	r3, r3, #32
 8009e56:	0492      	lsls	r2, r2, #18
 8009e58:	bf48      	it	mi
 8009e5a:	f043 0304 	orrmi.w	r3, r3, #4
 8009e5e:	6283      	str	r3, [r0, #40]	; 0x28
 8009e60:	a805      	add	r0, sp, #20
 8009e62:	f7fe fa55 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009e66:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <WM__Paint+0xa8>)
 8009e68:	881a      	ldrh	r2, [r3, #0]
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	e000      	b.n	8009e72 <WM__Paint+0x9e>
 8009e70:	461c      	mov	r4, r3
 8009e72:	4620      	mov	r0, r4
 8009e74:	b009      	add	sp, #36	; 0x24
 8009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e78:	0800927d 	.word	0x0800927d
 8009e7c:	2001b034 	.word	0x2001b034

08009e80 <WM_Exec>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	4b4c      	ldr	r3, [pc, #304]	; (8009fb8 <WM_Exec+0x138>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	b09f      	sub	sp, #124	; 0x7c
 8009e8a:	b103      	cbz	r3, 8009e8e <WM_Exec+0xe>
 8009e8c:	4798      	blx	r3
 8009e8e:	2600      	movs	r6, #0
 8009e90:	4d4a      	ldr	r5, [pc, #296]	; (8009fbc <WM_Exec+0x13c>)
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	b1db      	cbz	r3, 8009ece <WM_Exec+0x4e>
 8009e96:	4b4a      	ldr	r3, [pc, #296]	; (8009fc0 <WM_Exec+0x140>)
 8009e98:	681c      	ldr	r4, [r3, #0]
 8009e9a:	b1bc      	cbz	r4, 8009ecc <WM_Exec+0x4c>
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7fe fa29 	bl	80082f4 <GUI_ALLOC_LockH>
 8009ea2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009ea4:	6947      	ldr	r7, [r0, #20]
 8009ea6:	ab1e      	add	r3, sp, #120	; 0x78
 8009ea8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009eac:	f843 0d70 	str.w	r0, [r3, #-112]!
 8009eb0:	d007      	beq.n	8009ec2 <WM_Exec+0x42>
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fa2c 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7ff fd6f 	bl	800999c <WM_DeleteWindow>
 8009ebe:	463c      	mov	r4, r7
 8009ec0:	e7eb      	b.n	8009e9a <WM_Exec+0x1a>
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	463c      	mov	r4, r7
 8009ec6:	f7fe fa23 	bl	8008310 <GUI_ALLOC_UnlockH>
 8009eca:	e7e6      	b.n	8009e9a <WM_Exec+0x1a>
 8009ecc:	602c      	str	r4, [r5, #0]
 8009ece:	4b3d      	ldr	r3, [pc, #244]	; (8009fc4 <WM_Exec+0x144>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <WM_Exec+0x56>
 8009ed4:	4798      	blx	r3
 8009ed6:	4b3c      	ldr	r3, [pc, #240]	; (8009fc8 <WM_Exec+0x148>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	b92b      	cbnz	r3, 8009ee8 <WM_Exec+0x68>
 8009edc:	4f3b      	ldr	r7, [pc, #236]	; (8009fcc <WM_Exec+0x14c>)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009ee4:	b143      	cbz	r3, 8009ef8 <WM_Exec+0x78>
 8009ee6:	e003      	b.n	8009ef0 <WM_Exec+0x70>
 8009ee8:	4798      	blx	r3
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d0f6      	beq.n	8009edc <WM_Exec+0x5c>
 8009eee:	e058      	b.n	8009fa2 <WM_Exec+0x122>
 8009ef0:	f7fd fbe2 	bl	80076b8 <GUI_PollKeyMsg>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d154      	bne.n	8009fa2 <WM_Exec+0x122>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 8009efe:	b14d      	cbz	r5, 8009f14 <WM_Exec+0x94>
 8009f00:	4b33      	ldr	r3, [pc, #204]	; (8009fd0 <WM_Exec+0x150>)
 8009f02:	881d      	ldrh	r5, [r3, #0]
 8009f04:	b135      	cbz	r5, 8009f14 <WM_Exec+0x94>
 8009f06:	4b33      	ldr	r3, [pc, #204]	; (8009fd4 <WM_Exec+0x154>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d04b      	beq.n	8009fa6 <WM_Exec+0x126>
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4798      	blx	r3
 8009f12:	2501      	movs	r5, #1
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009f1a:	b913      	cbnz	r3, 8009f22 <WM_Exec+0xa2>
 8009f1c:	2d00      	cmp	r5, #0
 8009f1e:	d137      	bne.n	8009f90 <WM_Exec+0x110>
 8009f20:	e045      	b.n	8009fae <WM_Exec+0x12e>
 8009f22:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009fd0 <WM_Exec+0x150>
 8009f26:	f8b8 3000 	ldrh.w	r3, [r8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0f6      	beq.n	8009f1c <WM_Exec+0x9c>
 8009f2e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8009fd8 <WM_Exec+0x158>
 8009f32:	f8d9 4000 	ldr.w	r4, [r9]
 8009f36:	b90c      	cbnz	r4, 8009f3c <WM_Exec+0xbc>
 8009f38:	4b21      	ldr	r3, [pc, #132]	; (8009fc0 <WM_Exec+0x140>)
 8009f3a:	681c      	ldr	r4, [r3, #0]
 8009f3c:	a802      	add	r0, sp, #8
 8009f3e:	f002 ff2f 	bl	800cda0 <GUI_SaveContext_W>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8009f48:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8009f4c:	b914      	cbnz	r4, 8009f54 <WM_Exec+0xd4>
 8009f4e:	2400      	movs	r4, #0
 8009f50:	e00d      	b.n	8009f6e <WM_Exec+0xee>
 8009f52:	b963      	cbnz	r3, 8009f6e <WM_Exec+0xee>
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7ff ff3d 	bl	8009dd4 <WM__Paint>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	f7fe f9be 	bl	80082e0 <GUI_ALLOC_h2p>
 8009f64:	6944      	ldr	r4, [r0, #20]
 8009f66:	9b01      	ldr	r3, [sp, #4]
 8009f68:	2c00      	cmp	r4, #0
 8009f6a:	d1f2      	bne.n	8009f52 <WM_Exec+0xd2>
 8009f6c:	e7ef      	b.n	8009f4e <WM_Exec+0xce>
 8009f6e:	4658      	mov	r0, fp
 8009f70:	f8c9 4000 	str.w	r4, [r9]
 8009f74:	f7fd fb06 	bl	8007584 <GUI_SetColor>
 8009f78:	4650      	mov	r0, sl
 8009f7a:	f7fd fb01 	bl	8007580 <GUI_SetBkColor>
 8009f7e:	a802      	add	r0, sp, #8
 8009f80:	f002 ff18 	bl	800cdb4 <GUI_RestoreContext>
 8009f84:	f8b8 3000 	ldrh.w	r3, [r8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0c7      	beq.n	8009f1c <WM_Exec+0x9c>
 8009f8c:	2601      	movs	r6, #1
 8009f8e:	e7c1      	b.n	8009f14 <WM_Exec+0x94>
 8009f90:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <WM_Exec+0x154>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	b110      	cbz	r0, 8009f9c <WM_Exec+0x11c>
 8009f96:	6843      	ldr	r3, [r0, #4]
 8009f98:	4798      	blx	r3
 8009f9a:	e008      	b.n	8009fae <WM_Exec+0x12e>
 8009f9c:	f002 fb9a 	bl	800c6d4 <GUI__ManageCache>
 8009fa0:	e005      	b.n	8009fae <WM_Exec+0x12e>
 8009fa2:	2601      	movs	r6, #1
 8009fa4:	e774      	b.n	8009e90 <WM_Exec+0x10>
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f002 fb94 	bl	800c6d4 <GUI__ManageCache>
 8009fac:	e7b1      	b.n	8009f12 <WM_Exec+0x92>
 8009fae:	4630      	mov	r0, r6
 8009fb0:	b01f      	add	sp, #124	; 0x7c
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	bf00      	nop
 8009fb8:	2001b028 	.word	0x2001b028
 8009fbc:	2001945c 	.word	0x2001945c
 8009fc0:	2001b038 	.word	0x2001b038
 8009fc4:	2001b024 	.word	0x2001b024
 8009fc8:	2001af20 	.word	0x2001af20
 8009fcc:	200001b0 	.word	0x200001b0
 8009fd0:	2001b034 	.word	0x2001b034
 8009fd4:	2001b054 	.word	0x2001b054
 8009fd8:	20019478 	.word	0x20019478

08009fdc <WM_Activate>:
 8009fdc:	4b02      	ldr	r3, [pc, #8]	; (8009fe8 <WM_Activate+0xc>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009fe6:	4770      	bx	lr
 8009fe8:	200001b0 	.word	0x200001b0

08009fec <WM_Deactivate>:
 8009fec:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <WM_Deactivate+0x10>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009ff6:	f002 ba37 	b.w	800c468 <LCD_SetClipRectMax>
 8009ffa:	bf00      	nop
 8009ffc:	200001b0 	.word	0x200001b0

0800a000 <WM_DefaultProc>:
 800a000:	b510      	push	{r4, lr}
 800a002:	4604      	mov	r4, r0
 800a004:	6840      	ldr	r0, [r0, #4]
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	68e1      	ldr	r1, [r4, #12]
 800a00a:	2b17      	cmp	r3, #23
 800a00c:	d00f      	beq.n	800a02e <WM_DefaultProc+0x2e>
 800a00e:	dc06      	bgt.n	800a01e <WM_DefaultProc+0x1e>
 800a010:	2b0e      	cmp	r3, #14
 800a012:	d00e      	beq.n	800a032 <WM_DefaultProc+0x32>
 800a014:	2b14      	cmp	r3, #20
 800a016:	d114      	bne.n	800a042 <WM_DefaultProc+0x42>
 800a018:	f003 f97b 	bl	800d312 <WM__GetClientRectEx>
 800a01c:	e011      	b.n	800a042 <WM_DefaultProc+0x42>
 800a01e:	2b22      	cmp	r3, #34	; 0x22
 800a020:	d00c      	beq.n	800a03c <WM_DefaultProc+0x3c>
 800a022:	2b28      	cmp	r3, #40	; 0x28
 800a024:	d10d      	bne.n	800a042 <WM_DefaultProc+0x42>
 800a026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a02a:	f7ff bbcc 	b.w	80097c6 <WM_InvalidateWindow>
 800a02e:	60e0      	str	r0, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}
 800a032:	4621      	mov	r1, r4
 800a034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a038:	f003 b8c6 	b.w	800d1c8 <WM_SendToParent>
 800a03c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a040:	e000      	b.n	800a044 <WM_DefaultProc+0x44>
 800a042:	2300      	movs	r3, #0
 800a044:	60e3      	str	r3, [r4, #12]
 800a046:	bd10      	pop	{r4, pc}

0800a048 <_cbBackWin>:
 800a048:	6803      	ldr	r3, [r0, #0]
 800a04a:	2b0e      	cmp	r3, #14
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	d002      	beq.n	800a058 <_cbBackWin+0x10>
 800a052:	2b0f      	cmp	r3, #15
 800a054:	d009      	beq.n	800a06a <_cbBackWin+0x22>
 800a056:	e020      	b.n	800a09a <_cbBackWin+0x52>
 800a058:	68c3      	ldr	r3, [r0, #12]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	2a01      	cmp	r2, #1
 800a05e:	d121      	bne.n	800a0a4 <_cbBackWin+0x5c>
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a066:	f7fd bb1f 	b.w	80076a8 <GUI_StoreKey>
 800a06a:	4a0f      	ldr	r2, [pc, #60]	; (800a0a8 <_cbBackWin+0x60>)
 800a06c:	6843      	ldr	r3, [r0, #4]
 800a06e:	6811      	ldr	r1, [r2, #0]
 800a070:	428b      	cmp	r3, r1
 800a072:	d006      	beq.n	800a082 <_cbBackWin+0x3a>
 800a074:	6852      	ldr	r2, [r2, #4]
 800a076:	4293      	cmp	r3, r2
 800a078:	bf14      	ite	ne
 800a07a:	f04f 33ff 	movne.w	r3, #4294967295
 800a07e:	2301      	moveq	r3, #1
 800a080:	e000      	b.n	800a084 <_cbBackWin+0x3c>
 800a082:	2300      	movs	r3, #0
 800a084:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <_cbBackWin+0x64>)
 800a086:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a08a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a08e:	4298      	cmp	r0, r3
 800a090:	d003      	beq.n	800a09a <_cbBackWin+0x52>
 800a092:	f7fd fa75 	bl	8007580 <GUI_SetBkColor>
 800a096:	f7fd fcfd 	bl	8007a94 <GUI_Clear>
 800a09a:	4620      	mov	r0, r4
 800a09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a0:	f7ff bfae 	b.w	800a000 <WM_DefaultProc>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2001b01c 	.word	0x2001b01c
 800a0ac:	2001b048 	.word	0x2001b048

0800a0b0 <WM_Init>:
 800a0b0:	b530      	push	{r4, r5, lr}
 800a0b2:	4b2b      	ldr	r3, [pc, #172]	; (800a160 <WM_Init+0xb0>)
 800a0b4:	7818      	ldrb	r0, [r3, #0]
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	461d      	mov	r5, r3
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d14d      	bne.n	800a15a <WM_Init+0xaa>
 800a0be:	4b29      	ldr	r3, [pc, #164]	; (800a164 <WM_Init+0xb4>)
 800a0c0:	6018      	str	r0, [r3, #0]
 800a0c2:	4b29      	ldr	r3, [pc, #164]	; (800a168 <WM_Init+0xb8>)
 800a0c4:	6018      	str	r0, [r3, #0]
 800a0c6:	4b29      	ldr	r3, [pc, #164]	; (800a16c <WM_Init+0xbc>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6458      	str	r0, [r3, #68]	; 0x44
 800a0cc:	4b28      	ldr	r3, [pc, #160]	; (800a170 <WM_Init+0xc0>)
 800a0ce:	8018      	strh	r0, [r3, #0]
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <WM_Init+0xc4>)
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	8018      	strh	r0, [r3, #0]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f7fd fbb2 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800a0dc:	b1c0      	cbz	r0, 800a110 <WM_Init+0x60>
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e88d 000c 	stmia.w	sp, {r2, r3}
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800a0ee:	4b22      	ldr	r3, [pc, #136]	; (800a178 <WM_Init+0xc8>)
 800a0f0:	9302      	str	r3, [sp, #8]
 800a0f2:	9003      	str	r0, [sp, #12]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	f7ff fba6 	bl	8009848 <WM_CreateWindowAsChild>
 800a0fc:	4b1f      	ldr	r3, [pc, #124]	; (800a17c <WM_Init+0xcc>)
 800a0fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a102:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <WM_Init+0xd0>)
 800a104:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a108:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a10c:	f7ff fb5b 	bl	80097c6 <WM_InvalidateWindow>
 800a110:	3401      	adds	r4, #1
 800a112:	2c02      	cmp	r4, #2
 800a114:	d1df      	bne.n	800a0d6 <WM_Init+0x26>
 800a116:	481b      	ldr	r0, [pc, #108]	; (800a184 <WM_Init+0xd4>)
 800a118:	f7fe fea0 	bl	8008e5c <WM__AddCriticalHandle>
 800a11c:	481a      	ldr	r0, [pc, #104]	; (800a188 <WM_Init+0xd8>)
 800a11e:	f7fe fe9d 	bl	8008e5c <WM__AddCriticalHandle>
 800a122:	481a      	ldr	r0, [pc, #104]	; (800a18c <WM_Init+0xdc>)
 800a124:	f7fe fe9a 	bl	8008e5c <WM__AddCriticalHandle>
 800a128:	4819      	ldr	r0, [pc, #100]	; (800a190 <WM_Init+0xe0>)
 800a12a:	f7fe fe97 	bl	8008e5c <WM__AddCriticalHandle>
 800a12e:	4819      	ldr	r0, [pc, #100]	; (800a194 <WM_Init+0xe4>)
 800a130:	f7fe fe94 	bl	8008e5c <WM__AddCriticalHandle>
 800a134:	4818      	ldr	r0, [pc, #96]	; (800a198 <WM_Init+0xe8>)
 800a136:	f7fe fe91 	bl	8008e5c <WM__AddCriticalHandle>
 800a13a:	4b10      	ldr	r3, [pc, #64]	; (800a17c <WM_Init+0xcc>)
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f7ff fb63 	bl	8009808 <WM_SelectWindow>
 800a142:	f7ff ff4b 	bl	8009fdc <WM_Activate>
 800a146:	2301      	movs	r3, #1
 800a148:	702b      	strb	r3, [r5, #0]
 800a14a:	4814      	ldr	r0, [pc, #80]	; (800a19c <WM_Init+0xec>)
 800a14c:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <WM_Init+0xf0>)
 800a14e:	6003      	str	r3, [r0, #0]
 800a150:	b005      	add	sp, #20
 800a152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a156:	f7fd bcad 	b.w	8007ab4 <GUI__RegisterExit>
 800a15a:	b005      	add	sp, #20
 800a15c:	bd30      	pop	{r4, r5, pc}
 800a15e:	bf00      	nop
 800a160:	20019484 	.word	0x20019484
 800a164:	2001b038 	.word	0x2001b038
 800a168:	20019478 	.word	0x20019478
 800a16c:	200001b0 	.word	0x200001b0
 800a170:	2001b034 	.word	0x2001b034
 800a174:	2001b014 	.word	0x2001b014
 800a178:	0800a049 	.word	0x0800a049
 800a17c:	2001b01c 	.word	0x2001b01c
 800a180:	2001b048 	.word	0x2001b048
 800a184:	2001b004 	.word	0x2001b004
 800a188:	2001aff4 	.word	0x2001aff4
 800a18c:	2001afe4 	.word	0x2001afe4
 800a190:	2001b00c 	.word	0x2001b00c
 800a194:	2001affc 	.word	0x2001affc
 800a198:	2001afec 	.word	0x2001afec
 800a19c:	2001947c 	.word	0x2001947c
 800a1a0:	08008e99 	.word	0x08008e99

0800a1a4 <_CreateStaticDevice>:
 800a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	b087      	sub	sp, #28
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	f7fe f8a2 	bl	80082f4 <GUI_ALLOC_LockH>
 800a1b0:	af06      	add	r7, sp, #24
 800a1b2:	f8b0 8000 	ldrh.w	r8, [r0]
 800a1b6:	8886      	ldrh	r6, [r0, #4]
 800a1b8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800a1bc:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 800a1c0:	f847 0d04 	str.w	r0, [r7, #-4]!
 800a1c4:	fa0f f888 	sxth.w	r8, r8
 800a1c8:	b236      	sxth	r6, r6
 800a1ca:	ebc8 0606 	rsb	r6, r8, r6
 800a1ce:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800a1d2:	3601      	adds	r6, #1
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	fa0f f989 	sxth.w	r9, r9
 800a1da:	fa0f f58b 	sxth.w	r5, fp
 800a1de:	f7fe f897 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a1e2:	ebc9 0505 	rsb	r5, r9, r5
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	f105 0501 	add.w	r5, r5, #1
 800a1ec:	dd4d      	ble.n	800a28a <_CreateStaticDevice+0xe6>
 800a1ee:	2d00      	cmp	r5, #0
 800a1f0:	dd4b      	ble.n	800a28a <_CreateStaticDevice+0xe6>
 800a1f2:	f1ba 0f00 	cmp.w	sl, #0
 800a1f6:	d04a      	beq.n	800a28e <_CreateStaticDevice+0xea>
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	f7fe f87b 	bl	80082f4 <GUI_ALLOC_LockH>
 800a1fe:	ab06      	add	r3, sp, #24
 800a200:	8886      	ldrh	r6, [r0, #4]
 800a202:	f843 0d08 	str.w	r0, [r3, #-8]!
 800a206:	88c5      	ldrh	r5, [r0, #6]
 800a208:	b236      	sxth	r6, r6
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe f880 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a210:	4546      	cmp	r6, r8
 800a212:	d102      	bne.n	800a21a <_CreateStaticDevice+0x76>
 800a214:	b22d      	sxth	r5, r5
 800a216:	454d      	cmp	r5, r9
 800a218:	d032      	beq.n	800a280 <_CreateStaticDevice+0xdc>
 800a21a:	4650      	mov	r0, sl
 800a21c:	4641      	mov	r1, r8
 800a21e:	464a      	mov	r2, r9
 800a220:	f000 f886 	bl	800a330 <GUI_MEMDEV_SetOrg>
 800a224:	e02c      	b.n	800a280 <_CreateStaticDevice+0xdc>
 800a226:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a22c:	6283      	str	r3, [r0, #40]	; 0x28
 800a22e:	4638      	mov	r0, r7
 800a230:	f7fe f86e 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a234:	4640      	mov	r0, r8
 800a236:	f001 fc99 	bl	800bb6c <GUI_MEMDEV_Select>
 800a23a:	4607      	mov	r7, r0
 800a23c:	4650      	mov	r0, sl
 800a23e:	f002 fd67 	bl	800cd10 <GUI__AlphaPreserveTrans>
 800a242:	4640      	mov	r0, r8
 800a244:	f000 f8b4 	bl	800a3b0 <GUI_MEMDEV_GetDataPtr>
 800a248:	4b2d      	ldr	r3, [pc, #180]	; (800a300 <_CreateStaticDevice+0x15c>)
 800a24a:	fb05 f206 	mul.w	r2, r5, r6
 800a24e:	7819      	ldrb	r1, [r3, #0]
 800a250:	4d2c      	ldr	r5, [pc, #176]	; (800a304 <_CreateStaticDevice+0x160>)
 800a252:	4e2d      	ldr	r6, [pc, #180]	; (800a308 <_CreateStaticDevice+0x164>)
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	f7fc fd93 	bl	8006d80 <GUI__memset>
 800a25a:	4620      	mov	r0, r4
 800a25c:	f8d5 8000 	ldr.w	r8, [r5]
 800a260:	6034      	str	r4, [r6, #0]
 800a262:	f003 f846 	bl	800d2f2 <WM_GetWindowOrgX>
 800a266:	6028      	str	r0, [r5, #0]
 800a268:	4620      	mov	r0, r4
 800a26a:	f7ff fd6b 	bl	8009d44 <WM__Paint1>
 800a26e:	2000      	movs	r0, #0
 800a270:	f8c5 8000 	str.w	r8, [r5]
 800a274:	6030      	str	r0, [r6, #0]
 800a276:	f002 fd4b 	bl	800cd10 <GUI__AlphaPreserveTrans>
 800a27a:	4638      	mov	r0, r7
 800a27c:	f001 fc76 	bl	800bb6c <GUI_MEMDEV_Select>
 800a280:	4620      	mov	r0, r4
 800a282:	f7fe f82d 	bl	80082e0 <GUI_ALLOC_h2p>
 800a286:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a288:	e037      	b.n	800a2fa <_CreateStaticDevice+0x156>
 800a28a:	2000      	movs	r0, #0
 800a28c:	e035      	b.n	800a2fa <_CreateStaticDevice+0x156>
 800a28e:	f7fe fdd9 	bl	8008e44 <WM_GetDesktopWindow>
 800a292:	4284      	cmp	r4, r0
 800a294:	d112      	bne.n	800a2bc <_CreateStaticDevice+0x118>
 800a296:	f001 fd43 	bl	800bd20 <LCD_GetXSize>
 800a29a:	4682      	mov	sl, r0
 800a29c:	f001 fd48 	bl	800bd30 <LCD_GetYSize>
 800a2a0:	4556      	cmp	r6, sl
 800a2a2:	dc02      	bgt.n	800a2aa <_CreateStaticDevice+0x106>
 800a2a4:	4285      	cmp	r5, r0
 800a2a6:	dd09      	ble.n	800a2bc <_CreateStaticDevice+0x118>
 800a2a8:	e000      	b.n	800a2ac <_CreateStaticDevice+0x108>
 800a2aa:	4656      	mov	r6, sl
 800a2ac:	4285      	cmp	r5, r0
 800a2ae:	bfa8      	it	ge
 800a2b0:	4605      	movge	r5, r0
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	f002 ff62 	bl	800d180 <WM_SetSize>
 800a2bc:	4b13      	ldr	r3, [pc, #76]	; (800a30c <_CreateStaticDevice+0x168>)
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	f04f 0a01 	mov.w	sl, #1
 800a2c4:	4b12      	ldr	r3, [pc, #72]	; (800a310 <_CreateStaticDevice+0x16c>)
 800a2c6:	9302      	str	r3, [sp, #8]
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	f8cd a000 	str.w	sl, [sp]
 800a2d4:	f001 fb54 	bl	800b980 <GUI_MEMDEV__CreateFixed>
 800a2d8:	4680      	mov	r8, r0
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7fe f80a 	bl	80082f4 <GUI_ALLOC_LockH>
 800a2e0:	9005      	str	r0, [sp, #20]
 800a2e2:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800a2e6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ea:	d19c      	bne.n	800a226 <_CreateStaticDevice+0x82>
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7fe f80f 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f7ff fd26 	bl	8009d44 <WM__Paint1>
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	b007      	add	sp, #28
 800a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a300:	200001c0 	.word	0x200001c0
 800a304:	2001aeec 	.word	0x2001aeec
 800a308:	2001b060 	.word	0x2001b060
 800a30c:	080121ac 	.word	0x080121ac
 800a310:	080141f4 	.word	0x080141f4

0800a314 <GUI_MEMDEV_Paint1Static>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4605      	mov	r5, r0
 800a318:	2405      	movs	r4, #5
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7ff ff42 	bl	800a1a4 <_CreateStaticDevice>
 800a320:	b910      	cbnz	r0, 800a328 <GUI_MEMDEV_Paint1Static+0x14>
 800a322:	3c01      	subs	r4, #1
 800a324:	d1f9      	bne.n	800a31a <GUI_MEMDEV_Paint1Static+0x6>
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a32c:	f003 bd10 	b.w	800dd50 <GUI_MEMDEV_Write>

0800a330 <GUI_MEMDEV_SetOrg>:
 800a330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a332:	460d      	mov	r5, r1
 800a334:	4614      	mov	r4, r2
 800a336:	b918      	cbnz	r0, 800a340 <GUI_MEMDEV_SetOrg+0x10>
 800a338:	4b11      	ldr	r3, [pc, #68]	; (800a380 <GUI_MEMDEV_SetOrg+0x50>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a33e:	b1e8      	cbz	r0, 800a37c <GUI_MEMDEV_SetOrg+0x4c>
 800a340:	f7fd ffd8 	bl	80082f4 <GUI_ALLOC_LockH>
 800a344:	b2a4      	uxth	r4, r4
 800a346:	b2ad      	uxth	r5, r5
 800a348:	80c4      	strh	r4, [r0, #6]
 800a34a:	8085      	strh	r5, [r0, #4]
 800a34c:	9000      	str	r0, [sp, #0]
 800a34e:	f002 f88b 	bl	800c468 <LCD_SetClipRectMax>
 800a352:	9b00      	ldr	r3, [sp, #0]
 800a354:	6958      	ldr	r0, [r3, #20]
 800a356:	b170      	cbz	r0, 800a376 <GUI_MEMDEV_SetOrg+0x46>
 800a358:	f7fd ffcc 	bl	80082f4 <GUI_ALLOC_LockH>
 800a35c:	9b00      	ldr	r3, [sp, #0]
 800a35e:	9001      	str	r0, [sp, #4]
 800a360:	891a      	ldrh	r2, [r3, #8]
 800a362:	895b      	ldrh	r3, [r3, #10]
 800a364:	8082      	strh	r2, [r0, #4]
 800a366:	80c3      	strh	r3, [r0, #6]
 800a368:	b112      	cbz	r2, 800a370 <GUI_MEMDEV_SetOrg+0x40>
 800a36a:	b10b      	cbz	r3, 800a370 <GUI_MEMDEV_SetOrg+0x40>
 800a36c:	8005      	strh	r5, [r0, #0]
 800a36e:	8044      	strh	r4, [r0, #2]
 800a370:	a801      	add	r0, sp, #4
 800a372:	f7fd ffcd 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a376:	4668      	mov	r0, sp
 800a378:	f7fd ffca 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a37c:	b003      	add	sp, #12
 800a37e:	bd30      	pop	{r4, r5, pc}
 800a380:	200001b0 	.word	0x200001b0

0800a384 <GUI_MEMDEV_GetYSize>:
 800a384:	b513      	push	{r0, r1, r4, lr}
 800a386:	b920      	cbnz	r0, 800a392 <GUI_MEMDEV_GetYSize+0xe>
 800a388:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <GUI_MEMDEV_GetYSize+0x28>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a38e:	4604      	mov	r4, r0
 800a390:	b148      	cbz	r0, 800a3a6 <GUI_MEMDEV_GetYSize+0x22>
 800a392:	f7fd ffaf 	bl	80082f4 <GUI_ALLOC_LockH>
 800a396:	ab02      	add	r3, sp, #8
 800a398:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800a39c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fd ffb5 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	b002      	add	sp, #8
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	200001b0 	.word	0x200001b0

0800a3b0 <GUI_MEMDEV_GetDataPtr>:
 800a3b0:	b513      	push	{r0, r1, r4, lr}
 800a3b2:	b150      	cbz	r0, 800a3ca <GUI_MEMDEV_GetDataPtr+0x1a>
 800a3b4:	f7fd ff9e 	bl	80082f4 <GUI_ALLOC_LockH>
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	a802      	add	r0, sp, #8
 800a3bc:	f840 4d04 	str.w	r4, [r0, #-4]!
 800a3c0:	f7fd ffa6 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a3c4:	f104 0018 	add.w	r0, r4, #24
 800a3c8:	e7ff      	b.n	800a3ca <GUI_MEMDEV_GetDataPtr+0x1a>
 800a3ca:	b002      	add	sp, #8
 800a3cc:	bd10      	pop	{r4, pc}
	...

0800a3d0 <GUI_MEMDEV_Draw>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	461e      	mov	r6, r3
 800a3d6:	b089      	sub	sp, #36	; 0x24
 800a3d8:	4b4e      	ldr	r3, [pc, #312]	; (800a514 <GUI_MEMDEV_Draw+0x144>)
 800a3da:	9204      	str	r2, [sp, #16]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	9103      	str	r1, [sp, #12]
 800a3e0:	7c54      	ldrb	r4, [r2, #17]
 800a3e2:	4a4d      	ldr	r2, [pc, #308]	; (800a518 <GUI_MEMDEV_Draw+0x148>)
 800a3e4:	5712      	ldrsb	r2, [r2, r4]
 800a3e6:	2a01      	cmp	r2, #1
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	469b      	mov	fp, r3
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	dd06      	ble.n	800a3fe <GUI_MEMDEV_Draw+0x2e>
 800a3f0:	f001 fc84 	bl	800bcfc <LCD_GetXSizeEx>
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f001 fc83 	bl	800bd02 <LCD_GetYSizeEx>
 800a3fc:	e005      	b.n	800a40a <GUI_MEMDEV_Draw+0x3a>
 800a3fe:	f001 fc83 	bl	800bd08 <LCD_GetVXSizeEx>
 800a402:	4607      	mov	r7, r0
 800a404:	4620      	mov	r0, r4
 800a406:	f001 fc82 	bl	800bd0e <LCD_GetVYSizeEx>
 800a40a:	4604      	mov	r4, r0
 800a40c:	b325      	cbz	r5, 800a458 <GUI_MEMDEV_Draw+0x88>
 800a40e:	a806      	add	r0, sp, #24
 800a410:	a907      	add	r1, sp, #28
 800a412:	f002 fd43 	bl	800ce9c <GUI_GetOrg>
 800a416:	9b06      	ldr	r3, [sp, #24]
 800a418:	f9b5 a000 	ldrsh.w	sl, [r5]
 800a41c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800a420:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800a424:	441f      	add	r7, r3
 800a426:	9b07      	ldr	r3, [sp, #28]
 800a428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a42c:	3f01      	subs	r7, #1
 800a42e:	4297      	cmp	r7, r2
 800a430:	bfd4      	ite	le
 800a432:	ebca 0707 	rsble	r7, sl, r7
 800a436:	ebca 0702 	rsbgt	r7, sl, r2
 800a43a:	441c      	add	r4, r3
 800a43c:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800a440:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a444:	3c01      	subs	r4, #1
 800a446:	4294      	cmp	r4, r2
 800a448:	bfd4      	ite	le
 800a44a:	ebc8 0404 	rsble	r4, r8, r4
 800a44e:	ebc8 0402 	rsbgt	r4, r8, r2
 800a452:	3701      	adds	r7, #1
 800a454:	3401      	adds	r4, #1
 800a456:	e001      	b.n	800a45c <GUI_MEMDEV_Draw+0x8c>
 800a458:	46a8      	mov	r8, r5
 800a45a:	46aa      	mov	sl, r5
 800a45c:	b906      	cbnz	r6, 800a460 <GUI_MEMDEV_Draw+0x90>
 800a45e:	4266      	negs	r6, r4
 800a460:	2f00      	cmp	r7, #0
 800a462:	dd52      	ble.n	800a50a <GUI_MEMDEV_Draw+0x13a>
 800a464:	2c00      	cmp	r4, #0
 800a466:	dd50      	ble.n	800a50a <GUI_MEMDEV_Draw+0x13a>
 800a468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4650      	mov	r0, sl
 800a46e:	4641      	mov	r1, r8
 800a470:	463a      	mov	r2, r7
 800a472:	4633      	mov	r3, r6
 800a474:	f001 fb3e 	bl	800baf4 <GUI_MEMDEV_CreateEx>
 800a478:	4605      	mov	r5, r0
 800a47a:	b920      	cbnz	r0, 800a486 <GUI_MEMDEV_Draw+0xb6>
 800a47c:	9804      	ldr	r0, [sp, #16]
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	4798      	blx	r3
 800a482:	2001      	movs	r0, #1
 800a484:	e042      	b.n	800a50c <GUI_MEMDEV_Draw+0x13c>
 800a486:	f7ff ff7d 	bl	800a384 <GUI_MEMDEV_GetYSize>
 800a48a:	42a0      	cmp	r0, r4
 800a48c:	4606      	mov	r6, r0
 800a48e:	d006      	beq.n	800a49e <GUI_MEMDEV_Draw+0xce>
 800a490:	f8db 3000 	ldr.w	r3, [fp]
 800a494:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a496:	b110      	cbz	r0, 800a49e <GUI_MEMDEV_Draw+0xce>
 800a498:	2132      	movs	r1, #50	; 0x32
 800a49a:	f002 fddf 	bl	800d05c <WM__SendMessageNoPara>
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f001 fb64 	bl	800bb6c <GUI_MEMDEV_Select>
 800a4a4:	4273      	negs	r3, r6
 800a4a6:	9305      	str	r3, [sp, #20]
 800a4a8:	46a1      	mov	r9, r4
 800a4aa:	2700      	movs	r7, #0
 800a4ac:	45b1      	cmp	r9, r6
 800a4ae:	da03      	bge.n	800a4b8 <GUI_MEMDEV_Draw+0xe8>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f003 fd4c 	bl	800df50 <GUI_MEMDEV_ReduceYSize>
 800a4b8:	b147      	cbz	r7, 800a4cc <GUI_MEMDEV_Draw+0xfc>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	4651      	mov	r1, sl
 800a4be:	eb07 0208 	add.w	r2, r7, r8
 800a4c2:	f7ff ff35 	bl	800a330 <GUI_MEMDEV_SetOrg>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f003 fd58 	bl	800df7c <GUI_MEMDEV_Clear>
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	9804      	ldr	r0, [sp, #16]
 800a4d0:	4798      	blx	r3
 800a4d2:	4b12      	ldr	r3, [pc, #72]	; (800a51c <GUI_MEMDEV_Draw+0x14c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	b10b      	cbz	r3, 800a4dc <GUI_MEMDEV_Draw+0x10c>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	4798      	blx	r3
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f001 fbbd 	bl	800bc5c <GUI_MEMDEV_CopyToLCD>
 800a4e2:	4437      	add	r7, r6
 800a4e4:	9b05      	ldr	r3, [sp, #20]
 800a4e6:	42a7      	cmp	r7, r4
 800a4e8:	4499      	add	r9, r3
 800a4ea:	dbdf      	blt.n	800a4ac <GUI_MEMDEV_Draw+0xdc>
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f001 fadf 	bl	800bab0 <GUI_MEMDEV_Delete>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f001 fb3a 	bl	800bb6c <GUI_MEMDEV_Select>
 800a4f8:	42a6      	cmp	r6, r4
 800a4fa:	d006      	beq.n	800a50a <GUI_MEMDEV_Draw+0x13a>
 800a4fc:	f8db 3000 	ldr.w	r3, [fp]
 800a500:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a502:	b110      	cbz	r0, 800a50a <GUI_MEMDEV_Draw+0x13a>
 800a504:	2133      	movs	r1, #51	; 0x33
 800a506:	f002 fda9 	bl	800d05c <WM__SendMessageNoPara>
 800a50a:	2000      	movs	r0, #0
 800a50c:	b009      	add	sp, #36	; 0x24
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	bf00      	nop
 800a514:	200001b0 	.word	0x200001b0
 800a518:	2001aee4 	.word	0x2001aee4
 800a51c:	20019488 	.word	0x20019488

0800a520 <_GetDevData>:
 800a520:	4802      	ldr	r0, [pc, #8]	; (800a52c <_GetDevData+0xc>)
 800a522:	2901      	cmp	r1, #1
 800a524:	bf18      	it	ne
 800a526:	2000      	movne	r0, #0
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	080121ac 	.word	0x080121ac

0800a530 <_GetDevFunc>:
 800a530:	4802      	ldr	r0, [pc, #8]	; (800a53c <_GetDevFunc+0xc>)
 800a532:	2916      	cmp	r1, #22
 800a534:	bf18      	it	ne
 800a536:	2000      	movne	r0, #0
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	0800db61 	.word	0x0800db61

0800a540 <_GetDevProp>:
 800a540:	2908      	cmp	r1, #8
 800a542:	bf0c      	ite	eq
 800a544:	2020      	moveq	r0, #32
 800a546:	2000      	movne	r0, #0
 800a548:	4770      	bx	lr

0800a54a <_SetOrg>:
 800a54a:	b508      	push	{r3, lr}
 800a54c:	6800      	ldr	r0, [r0, #0]
 800a54e:	68c3      	ldr	r3, [r0, #12]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	4798      	blx	r3
 800a554:	bd08      	pop	{r3, pc}

0800a556 <_GetRect>:
 800a556:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a558:	6880      	ldr	r0, [r0, #8]
 800a55a:	460c      	mov	r4, r1
 800a55c:	f7fd feca 	bl	80082f4 <GUI_ALLOC_LockH>
 800a560:	4603      	mov	r3, r0
 800a562:	a802      	add	r0, sp, #8
 800a564:	8899      	ldrh	r1, [r3, #4]
 800a566:	88da      	ldrh	r2, [r3, #6]
 800a568:	891d      	ldrh	r5, [r3, #8]
 800a56a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a56e:	895b      	ldrh	r3, [r3, #10]
 800a570:	8021      	strh	r1, [r4, #0]
 800a572:	8062      	strh	r2, [r4, #2]
 800a574:	4429      	add	r1, r5
 800a576:	441a      	add	r2, r3
 800a578:	3901      	subs	r1, #1
 800a57a:	3a01      	subs	r2, #1
 800a57c:	80a1      	strh	r1, [r4, #4]
 800a57e:	80e2      	strh	r2, [r4, #6]
 800a580:	f7fd fec6 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a584:	b003      	add	sp, #12
 800a586:	bd30      	pop	{r4, r5, pc}

0800a588 <_XY2PTR>:
 800a588:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <_XY2PTR+0x3c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a58e:	4605      	mov	r5, r0
 800a590:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a592:	460e      	mov	r6, r1
 800a594:	f7fd feae 	bl	80082f4 <GUI_ALLOC_LockH>
 800a598:	4603      	mov	r3, r0
 800a59a:	a802      	add	r0, sp, #8
 800a59c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a5a0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a5a4:	f103 0118 	add.w	r1, r3, #24
 800a5a8:	1b36      	subs	r6, r6, r4
 800a5aa:	68dc      	ldr	r4, [r3, #12]
 800a5ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a5b0:	fb04 1406 	mla	r4, r4, r6, r1
 800a5b4:	1aed      	subs	r5, r5, r3
 800a5b6:	f7fd feab 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a5ba:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a5be:	4620      	mov	r0, r4
 800a5c0:	b002      	add	sp, #8
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	200001b0 	.word	0x200001b0

0800a5c8 <_GetPixelIndex>:
 800a5c8:	b508      	push	{r3, lr}
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	f7ff ffdb 	bl	800a588 <_XY2PTR>
 800a5d2:	6800      	ldr	r0, [r0, #0]
 800a5d4:	bd08      	pop	{r3, pc}
	...

0800a5d8 <_XorPixel>:
 800a5d8:	4b15      	ldr	r3, [pc, #84]	; (800a630 <_XorPixel+0x58>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5de:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a5e0:	4615      	mov	r5, r2
 800a5e2:	460e      	mov	r6, r1
 800a5e4:	f7fd fe86 	bl	80082f4 <GUI_ALLOC_LockH>
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	9000      	str	r0, [sp, #0]
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff ffcb 	bl	800a588 <_XY2PTR>
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	4798      	blx	r3
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	4058      	eors	r0, r3
 800a602:	9b00      	ldr	r3, [sp, #0]
 800a604:	6020      	str	r0, [r4, #0]
 800a606:	6958      	ldr	r0, [r3, #20]
 800a608:	b160      	cbz	r0, 800a624 <_XorPixel+0x4c>
 800a60a:	f7fd fe73 	bl	80082f4 <GUI_ALLOC_LockH>
 800a60e:	ac02      	add	r4, sp, #8
 800a610:	6883      	ldr	r3, [r0, #8]
 800a612:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4631      	mov	r1, r6
 800a61a:	462a      	mov	r2, r5
 800a61c:	4798      	blx	r3
 800a61e:	4620      	mov	r0, r4
 800a620:	f7fd fe76 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a624:	4668      	mov	r0, sp
 800a626:	f7fd fe73 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a62a:	b002      	add	sp, #8
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	bf00      	nop
 800a630:	200001b0 	.word	0x200001b0

0800a634 <_SetPixelIndex>:
 800a634:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a636:	461c      	mov	r4, r3
 800a638:	4b10      	ldr	r3, [pc, #64]	; (800a67c <_SetPixelIndex+0x48>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a63e:	460e      	mov	r6, r1
 800a640:	4615      	mov	r5, r2
 800a642:	f7fd fe57 	bl	80082f4 <GUI_ALLOC_LockH>
 800a646:	4629      	mov	r1, r5
 800a648:	9000      	str	r0, [sp, #0]
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ff9c 	bl	800a588 <_XY2PTR>
 800a650:	9b00      	ldr	r3, [sp, #0]
 800a652:	6004      	str	r4, [r0, #0]
 800a654:	6958      	ldr	r0, [r3, #20]
 800a656:	b160      	cbz	r0, 800a672 <_SetPixelIndex+0x3e>
 800a658:	f7fd fe4c 	bl	80082f4 <GUI_ALLOC_LockH>
 800a65c:	ac02      	add	r4, sp, #8
 800a65e:	6883      	ldr	r3, [r0, #8]
 800a660:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4631      	mov	r1, r6
 800a668:	462a      	mov	r2, r5
 800a66a:	4798      	blx	r3
 800a66c:	4620      	mov	r0, r4
 800a66e:	f7fd fe4f 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a672:	4668      	mov	r0, sp
 800a674:	f7fd fe4c 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a678:	b002      	add	sp, #8
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	200001b0 	.word	0x200001b0

0800a680 <_DrawVLine>:
 800a680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a684:	4d2c      	ldr	r5, [pc, #176]	; (800a738 <_DrawVLine+0xb8>)
 800a686:	461e      	mov	r6, r3
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a68c:	460f      	mov	r7, r1
 800a68e:	4614      	mov	r4, r2
 800a690:	f7fd fe30 	bl	80082f4 <GUI_ALLOC_LockH>
 800a694:	9000      	str	r0, [sp, #0]
 800a696:	6940      	ldr	r0, [r0, #20]
 800a698:	46a9      	mov	r9, r5
 800a69a:	b108      	cbz	r0, 800a6a0 <_DrawVLine+0x20>
 800a69c:	f7fd fe2a 	bl	80082f4 <GUI_ALLOC_LockH>
 800a6a0:	9001      	str	r0, [sp, #4]
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f7ff ff6f 	bl	800a588 <_XY2PTR>
 800a6aa:	f8d9 2000 	ldr.w	r2, [r9]
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a6b2:	7c12      	ldrb	r2, [r2, #16]
 800a6b4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800a6b8:	f8d1 9000 	ldr.w	r9, [r1]
 800a6bc:	07d2      	lsls	r2, r2, #31
 800a6be:	4605      	mov	r5, r0
 800a6c0:	d51f      	bpl.n	800a702 <_DrawVLine+0x82>
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	4798      	blx	r3
 800a6ca:	4680      	mov	r8, r0
 800a6cc:	9801      	ldr	r0, [sp, #4]
 800a6ce:	b128      	cbz	r0, 800a6dc <_DrawVLine+0x5c>
 800a6d0:	6882      	ldr	r2, [r0, #8]
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f8d2 c000 	ldr.w	ip, [r2]
 800a6d8:	4622      	mov	r2, r4
 800a6da:	47e0      	blx	ip
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	ea83 0308 	eor.w	r3, r3, r8
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	9b00      	ldr	r3, [sp, #0]
 800a6e6:	3401      	adds	r4, #1
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	42b4      	cmp	r4, r6
 800a6ec:	441d      	add	r5, r3
 800a6ee:	dded      	ble.n	800a6cc <_DrawVLine+0x4c>
 800a6f0:	4668      	mov	r0, sp
 800a6f2:	f7fd fe0d 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a6f6:	9b01      	ldr	r3, [sp, #4]
 800a6f8:	b1d3      	cbz	r3, 800a730 <_DrawVLine+0xb0>
 800a6fa:	a801      	add	r0, sp, #4
 800a6fc:	f7fd fe08 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a700:	e016      	b.n	800a730 <_DrawVLine+0xb0>
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	b163      	cbz	r3, 800a720 <_DrawVLine+0xa0>
 800a706:	9801      	ldr	r0, [sp, #4]
 800a708:	6883      	ldr	r3, [r0, #8]
 800a70a:	4622      	mov	r2, r4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4639      	mov	r1, r7
 800a710:	3401      	adds	r4, #1
 800a712:	4798      	blx	r3
 800a714:	42b4      	cmp	r4, r6
 800a716:	f8c5 9000 	str.w	r9, [r5]
 800a71a:	4445      	add	r5, r8
 800a71c:	ddf3      	ble.n	800a706 <_DrawVLine+0x86>
 800a71e:	e7e7      	b.n	800a6f0 <_DrawVLine+0x70>
 800a720:	1b34      	subs	r4, r6, r4
 800a722:	3401      	adds	r4, #1
 800a724:	3c01      	subs	r4, #1
 800a726:	f8c5 9000 	str.w	r9, [r5]
 800a72a:	4445      	add	r5, r8
 800a72c:	d1fa      	bne.n	800a724 <_DrawVLine+0xa4>
 800a72e:	e7df      	b.n	800a6f0 <_DrawVLine+0x70>
 800a730:	b003      	add	sp, #12
 800a732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a736:	bf00      	nop
 800a738:	200001b0 	.word	0x200001b0

0800a73c <_FillRect>:
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a7f0 <_FillRect+0xb4>
 800a744:	4614      	mov	r4, r2
 800a746:	f8db 2000 	ldr.w	r2, [fp]
 800a74a:	b085      	sub	sp, #20
 800a74c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800a74e:	460f      	mov	r7, r1
 800a750:	461d      	mov	r5, r3
 800a752:	f7fd fdcf 	bl	80082f4 <GUI_ALLOC_LockH>
 800a756:	4621      	mov	r1, r4
 800a758:	9002      	str	r0, [sp, #8]
 800a75a:	4638      	mov	r0, r7
 800a75c:	f7ff ff14 	bl	800a588 <_XY2PTR>
 800a760:	9a02      	ldr	r2, [sp, #8]
 800a762:	f8db 3000 	ldr.w	r3, [fp]
 800a766:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800a76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76c:	4606      	mov	r6, r0
 800a76e:	6950      	ldr	r0, [r2, #20]
 800a770:	f8d3 a000 	ldr.w	sl, [r3]
 800a774:	1bed      	subs	r5, r5, r7
 800a776:	3501      	adds	r5, #1
 800a778:	b338      	cbz	r0, 800a7ca <_FillRect+0x8e>
 800a77a:	f7fd fdbb 	bl	80082f4 <GUI_ALLOC_LockH>
 800a77e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a780:	f10d 0810 	add.w	r8, sp, #16
 800a784:	1b13      	subs	r3, r2, r4
 800a786:	f848 0d04 	str.w	r0, [r8, #-4]!
 800a78a:	3301      	adds	r3, #1
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4639      	mov	r1, r7
 800a790:	4622      	mov	r2, r4
 800a792:	462b      	mov	r3, r5
 800a794:	f003 fbc6 	bl	800df24 <GUI_USAGE_AddRect>
 800a798:	4640      	mov	r0, r8
 800a79a:	f7fd fdb9 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a79e:	e014      	b.n	800a7ca <_FillRect+0x8e>
 800a7a0:	f8db 3000 	ldr.w	r3, [fp]
 800a7a4:	7c1b      	ldrb	r3, [r3, #16]
 800a7a6:	07db      	lsls	r3, r3, #31
 800a7a8:	d513      	bpl.n	800a7d2 <_FillRect+0x96>
 800a7aa:	9b02      	ldr	r3, [sp, #8]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	4798      	blx	r3
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	6811      	ldr	r1, [r2, #0]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	ea81 0100 	eor.w	r1, r1, r0
 800a7c0:	f842 1b04 	str.w	r1, [r2], #4
 800a7c4:	d1f8      	bne.n	800a7b8 <_FillRect+0x7c>
 800a7c6:	444e      	add	r6, r9
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	dde7      	ble.n	800a7a0 <_FillRect+0x64>
 800a7d0:	e008      	b.n	800a7e4 <_FillRect+0xa8>
 800a7d2:	2d00      	cmp	r5, #0
 800a7d4:	ddf7      	ble.n	800a7c6 <_FillRect+0x8a>
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	4632      	mov	r2, r6
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	f842 ab04 	str.w	sl, [r2], #4
 800a7e0:	d1fb      	bne.n	800a7da <_FillRect+0x9e>
 800a7e2:	e7f0      	b.n	800a7c6 <_FillRect+0x8a>
 800a7e4:	a802      	add	r0, sp, #8
 800a7e6:	f7fd fd93 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a7ea:	b005      	add	sp, #20
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	200001b0 	.word	0x200001b0

0800a7f4 <_DrawHLine>:
 800a7f4:	b507      	push	{r0, r1, r2, lr}
 800a7f6:	9200      	str	r2, [sp, #0]
 800a7f8:	f7ff ffa0 	bl	800a73c <_FillRect>
 800a7fc:	b003      	add	sp, #12
 800a7fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a804 <_DrawBitmap>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	4c9d      	ldr	r4, [pc, #628]	; (800aa80 <_DrawBitmap+0x27c>)
 800a80a:	469a      	mov	sl, r3
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	b091      	sub	sp, #68	; 0x44
 800a810:	4680      	mov	r8, r0
 800a812:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a814:	9207      	str	r2, [sp, #28]
 800a816:	460e      	mov	r6, r1
 800a818:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800a81c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800a81e:	2800      	cmp	r0, #0
 800a820:	f000 8387 	beq.w	800af32 <_DrawBitmap+0x72e>
 800a824:	f7fd fd66 	bl	80082f4 <GUI_ALLOC_LockH>
 800a828:	900e      	str	r0, [sp, #56]	; 0x38
 800a82a:	6940      	ldr	r0, [r0, #20]
 800a82c:	b108      	cbz	r0, 800a832 <_DrawBitmap+0x2e>
 800a82e:	f7fd fd61 	bl	80082f4 <GUI_ALLOC_LockH>
 800a832:	900f      	str	r0, [sp, #60]	; 0x3c
 800a834:	a810      	add	r0, sp, #64	; 0x40
 800a836:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	930a      	str	r3, [sp, #40]	; 0x28
 800a83e:	f7fd fd67 	bl	8008310 <GUI_ALLOC_UnlockH>
 800a842:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a844:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a846:	4437      	add	r7, r6
 800a848:	9704      	str	r7, [sp, #16]
 800a84a:	b150      	cbz	r0, 800a862 <_DrawBitmap+0x5e>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	7c1b      	ldrb	r3, [r3, #16]
 800a850:	079c      	lsls	r4, r3, #30
 800a852:	d406      	bmi.n	800a862 <_DrawBitmap+0x5e>
 800a854:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a856:	9700      	str	r7, [sp, #0]
 800a858:	9904      	ldr	r1, [sp, #16]
 800a85a:	9a07      	ldr	r2, [sp, #28]
 800a85c:	4653      	mov	r3, sl
 800a85e:	f003 fb61 	bl	800df24 <GUI_USAGE_AddRect>
 800a862:	9804      	ldr	r0, [sp, #16]
 800a864:	9907      	ldr	r1, [sp, #28]
 800a866:	f7ff fe8f 	bl	800a588 <_XY2PTR>
 800a86a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a86c:	2f17      	cmp	r7, #23
 800a86e:	4606      	mov	r6, r0
 800a870:	dd64      	ble.n	800a93c <_DrawBitmap+0x138>
 800a872:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800a876:	9706      	str	r7, [sp, #24]
 800a878:	f04f 0900 	mov.w	r9, #0
 800a87c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a87e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a880:	45b9      	cmp	r9, r7
 800a882:	da57      	bge.n	800a934 <_DrawBitmap+0x130>
 800a884:	b130      	cbz	r0, 800a894 <_DrawBitmap+0x90>
 800a886:	6883      	ldr	r3, [r0, #8]
 800a888:	9a07      	ldr	r2, [sp, #28]
 800a88a:	685c      	ldr	r4, [r3, #4]
 800a88c:	9904      	ldr	r1, [sp, #16]
 800a88e:	444a      	add	r2, r9
 800a890:	4653      	mov	r3, sl
 800a892:	47a0      	blx	r4
 800a894:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a898:	68d8      	ldr	r0, [r3, #12]
 800a89a:	b128      	cbz	r0, 800a8a8 <_DrawBitmap+0xa4>
 800a89c:	4630      	mov	r0, r6
 800a89e:	4659      	mov	r1, fp
 800a8a0:	9a06      	ldr	r2, [sp, #24]
 800a8a2:	f004 fd1c 	bl	800f2de <memcpy>
 800a8a6:	e03e      	b.n	800a926 <_DrawBitmap+0x122>
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	4798      	blx	r3
 800a8ac:	0e00      	lsrs	r0, r0, #24
 800a8ae:	9005      	str	r0, [sp, #20]
 800a8b0:	4635      	mov	r5, r6
 800a8b2:	4657      	mov	r7, sl
 800a8b4:	465c      	mov	r4, fp
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	4622      	mov	r2, r4
 800a8ba:	f04f 0c00 	mov.w	ip, #0
 800a8be:	f852 1b04 	ldr.w	r1, [r2], #4
 800a8c2:	9805      	ldr	r0, [sp, #20]
 800a8c4:	0e09      	lsrs	r1, r1, #24
 800a8c6:	4281      	cmp	r1, r0
 800a8c8:	9805      	ldr	r0, [sp, #20]
 800a8ca:	bf08      	it	eq
 800a8cc:	f10c 0c01 	addeq.w	ip, ip, #1
 800a8d0:	4281      	cmp	r1, r0
 800a8d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8d6:	d014      	beq.n	800a902 <_DrawBitmap+0xfe>
 800a8d8:	f1bc 0f00 	cmp.w	ip, #0
 800a8dc:	d014      	beq.n	800a908 <_DrawBitmap+0x104>
 800a8de:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	9303      	str	r3, [sp, #12]
 800a8ea:	f8cd c008 	str.w	ip, [sp, #8]
 800a8ee:	f004 fcf6 	bl	800f2de <memcpy>
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a8f8:	441d      	add	r5, r3
 800a8fa:	441c      	add	r4, r3
 800a8fc:	ebcc 0707 	rsb	r7, ip, r7
 800a900:	e00f      	b.n	800a922 <_DrawBitmap+0x11e>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1db      	bne.n	800a8be <_DrawBitmap+0xba>
 800a906:	e7e7      	b.n	800a8d8 <_DrawBitmap+0xd4>
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	0e02      	lsrs	r2, r0, #24
 800a90c:	2aff      	cmp	r2, #255	; 0xff
 800a90e:	d005      	beq.n	800a91c <_DrawBitmap+0x118>
 800a910:	43d2      	mvns	r2, r2
 800a912:	6829      	ldr	r1, [r5, #0]
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	f001 ff35 	bl	800c784 <GUI__MixColors>
 800a91a:	6028      	str	r0, [r5, #0]
 800a91c:	3504      	adds	r5, #4
 800a91e:	3404      	adds	r4, #4
 800a920:	3f01      	subs	r7, #1
 800a922:	2f00      	cmp	r7, #0
 800a924:	d1c7      	bne.n	800a8b6 <_DrawBitmap+0xb2>
 800a926:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a928:	44bb      	add	fp, r7
 800a92a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a92c:	f109 0901 	add.w	r9, r9, #1
 800a930:	443e      	add	r6, r7
 800a932:	e7a3      	b.n	800a87c <_DrawBitmap+0x78>
 800a934:	2800      	cmp	r0, #0
 800a936:	f040 82f9 	bne.w	800af2c <_DrawBitmap+0x728>
 800a93a:	e2fa      	b.n	800af32 <_DrawBitmap+0x72e>
 800a93c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a93e:	2f10      	cmp	r7, #16
 800a940:	d137      	bne.n	800a9b2 <_DrawBitmap+0x1ae>
 800a942:	1f06      	subs	r6, r0, #4
 800a944:	2500      	movs	r5, #0
 800a946:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a948:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a94a:	42bd      	cmp	r5, r7
 800a94c:	f280 80a0 	bge.w	800aa90 <_DrawBitmap+0x28c>
 800a950:	9f07      	ldr	r7, [sp, #28]
 800a952:	442f      	add	r7, r5
 800a954:	b13c      	cbz	r4, 800a966 <_DrawBitmap+0x162>
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	9904      	ldr	r1, [sp, #16]
 800a95a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a95e:	4620      	mov	r0, r4
 800a960:	463a      	mov	r2, r7
 800a962:	4653      	mov	r3, sl
 800a964:	47e0      	blx	ip
 800a966:	f1ab 0302 	sub.w	r3, fp, #2
 800a96a:	9306      	str	r3, [sp, #24]
 800a96c:	9605      	str	r6, [sp, #20]
 800a96e:	46d1      	mov	r9, sl
 800a970:	9904      	ldr	r1, [sp, #16]
 800a972:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a976:	9a06      	ldr	r2, [sp, #24]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800a97e:	9206      	str	r2, [sp, #24]
 800a980:	4451      	add	r1, sl
 800a982:	ebc9 0101 	rsb	r1, r9, r1
 800a986:	9103      	str	r1, [sp, #12]
 800a988:	4798      	blx	r3
 800a98a:	9b05      	ldr	r3, [sp, #20]
 800a98c:	9903      	ldr	r1, [sp, #12]
 800a98e:	f843 0f04 	str.w	r0, [r3, #4]!
 800a992:	9305      	str	r3, [sp, #20]
 800a994:	b124      	cbz	r4, 800a9a0 <_DrawBitmap+0x19c>
 800a996:	68a3      	ldr	r3, [r4, #8]
 800a998:	4620      	mov	r0, r4
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	463a      	mov	r2, r7
 800a99e:	4798      	blx	r3
 800a9a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a9a4:	d1e4      	bne.n	800a970 <_DrawBitmap+0x16c>
 800a9a6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a9a8:	44bb      	add	fp, r7
 800a9aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	443e      	add	r6, r7
 800a9b0:	e7c9      	b.n	800a946 <_DrawBitmap+0x142>
 800a9b2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a9b4:	2f08      	cmp	r7, #8
 800a9b6:	f100 0604 	add.w	r6, r0, #4
 800a9ba:	d16d      	bne.n	800aa98 <_DrawBitmap+0x294>
 800a9bc:	9f07      	ldr	r7, [sp, #28]
 800a9be:	9907      	ldr	r1, [sp, #28]
 800a9c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a9c4:	1a7b      	subs	r3, r7, r1
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	f1a6 0004 	sub.w	r0, r6, #4
 800a9cc:	da60      	bge.n	800aa90 <_DrawBitmap+0x28c>
 800a9ce:	4b2c      	ldr	r3, [pc, #176]	; (800aa80 <_DrawBitmap+0x27c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	7c1b      	ldrb	r3, [r3, #16]
 800a9d4:	b36d      	cbz	r5, 800aa32 <_DrawBitmap+0x22e>
 800a9d6:	f013 0303 	ands.w	r3, r3, #3
 800a9da:	d005      	beq.n	800a9e8 <_DrawBitmap+0x1e4>
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d151      	bne.n	800aa84 <_DrawBitmap+0x280>
 800a9e0:	46b1      	mov	r9, r6
 800a9e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a9e6:	e01c      	b.n	800aa22 <_DrawBitmap+0x21e>
 800a9e8:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800a9ec:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a9f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	4553      	cmp	r3, sl
 800a9f8:	d1f6      	bne.n	800a9e8 <_DrawBitmap+0x1e4>
 800a9fa:	e043      	b.n	800aa84 <_DrawBitmap+0x280>
 800a9fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800aa00:	f849 3c04 	str.w	r3, [r9, #-4]
 800aa04:	b12c      	cbz	r4, 800aa12 <_DrawBitmap+0x20e>
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4641      	mov	r1, r8
 800aa0e:	463a      	mov	r2, r7
 800aa10:	4798      	blx	r3
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	f108 0801 	add.w	r8, r8, #1
 800aa18:	4453      	add	r3, sl
 800aa1a:	4543      	cmp	r3, r8
 800aa1c:	f109 0904 	add.w	r9, r9, #4
 800aa20:	d030      	beq.n	800aa84 <_DrawBitmap+0x280>
 800aa22:	9804      	ldr	r0, [sp, #16]
 800aa24:	ebc0 030b 	rsb	r3, r0, fp
 800aa28:	f813 3008 	ldrb.w	r3, [r3, r8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0f0      	beq.n	800aa12 <_DrawBitmap+0x20e>
 800aa30:	e7e4      	b.n	800a9fc <_DrawBitmap+0x1f8>
 800aa32:	f013 0303 	ands.w	r3, r3, #3
 800aa36:	d005      	beq.n	800aa44 <_DrawBitmap+0x240>
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d123      	bne.n	800aa84 <_DrawBitmap+0x280>
 800aa3c:	46b1      	mov	r9, r6
 800aa3e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa42:	e015      	b.n	800aa70 <_DrawBitmap+0x26c>
 800aa44:	4659      	mov	r1, fp
 800aa46:	4652      	mov	r2, sl
 800aa48:	f004 fc49 	bl	800f2de <memcpy>
 800aa4c:	e01a      	b.n	800aa84 <_DrawBitmap+0x280>
 800aa4e:	f849 3c04 	str.w	r3, [r9, #-4]
 800aa52:	b12c      	cbz	r4, 800aa60 <_DrawBitmap+0x25c>
 800aa54:	68a3      	ldr	r3, [r4, #8]
 800aa56:	4620      	mov	r0, r4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4641      	mov	r1, r8
 800aa5c:	463a      	mov	r2, r7
 800aa5e:	4798      	blx	r3
 800aa60:	9b04      	ldr	r3, [sp, #16]
 800aa62:	f108 0801 	add.w	r8, r8, #1
 800aa66:	4453      	add	r3, sl
 800aa68:	4543      	cmp	r3, r8
 800aa6a:	f109 0904 	add.w	r9, r9, #4
 800aa6e:	d009      	beq.n	800aa84 <_DrawBitmap+0x280>
 800aa70:	9904      	ldr	r1, [sp, #16]
 800aa72:	ebc1 030b 	rsb	r3, r1, fp
 800aa76:	f813 3008 	ldrb.w	r3, [r3, r8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0f0      	beq.n	800aa60 <_DrawBitmap+0x25c>
 800aa7e:	e7e6      	b.n	800aa4e <_DrawBitmap+0x24a>
 800aa80:	200001b0 	.word	0x200001b0
 800aa84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa88:	4493      	add	fp, r2
 800aa8a:	3701      	adds	r7, #1
 800aa8c:	441e      	add	r6, r3
 800aa8e:	e796      	b.n	800a9be <_DrawBitmap+0x1ba>
 800aa90:	2c00      	cmp	r4, #0
 800aa92:	f040 824b 	bne.w	800af2c <_DrawBitmap+0x728>
 800aa96:	e24c      	b.n	800af32 <_DrawBitmap+0x72e>
 800aa98:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800aa9a:	4bb2      	ldr	r3, [pc, #712]	; (800ad64 <_DrawBitmap+0x560>)
 800aa9c:	9609      	str	r6, [sp, #36]	; 0x24
 800aa9e:	007f      	lsls	r7, r7, #1
 800aaa0:	970c      	str	r7, [sp, #48]	; 0x30
 800aaa2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800aaa4:	00bf      	lsls	r7, r7, #2
 800aaa6:	970d      	str	r7, [sp, #52]	; 0x34
 800aaa8:	9f07      	ldr	r7, [sp, #28]
 800aaaa:	9705      	str	r7, [sp, #20]
 800aaac:	2d00      	cmp	r5, #0
 800aaae:	bf08      	it	eq
 800aab0:	461d      	moveq	r5, r3
 800aab2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aab4:	9807      	ldr	r0, [sp, #28]
 800aab6:	1f3c      	subs	r4, r7, #4
 800aab8:	9f05      	ldr	r7, [sp, #20]
 800aaba:	1a3b      	subs	r3, r7, r0
 800aabc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800aabe:	42bb      	cmp	r3, r7
 800aac0:	f280 8232 	bge.w	800af28 <_DrawBitmap+0x724>
 800aac4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800aac6:	2f02      	cmp	r7, #2
 800aac8:	f000 80ad 	beq.w	800ac26 <_DrawBitmap+0x422>
 800aacc:	2f04      	cmp	r7, #4
 800aace:	f000 814f 	beq.w	800ad70 <_DrawBitmap+0x56c>
 800aad2:	2f01      	cmp	r7, #1
 800aad4:	f040 821e 	bne.w	800af14 <_DrawBitmap+0x710>
 800aad8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800ad6c <_DrawBitmap+0x568>
 800aadc:	f8d9 3000 	ldr.w	r3, [r9]
 800aae0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800aae2:	f7fd fc07 	bl	80082f4 <GUI_ALLOC_LockH>
 800aae6:	f89b 3000 	ldrb.w	r3, [fp]
 800aaea:	4a9f      	ldr	r2, [pc, #636]	; (800ad68 <_DrawBitmap+0x564>)
 800aaec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aaee:	5cd6      	ldrb	r6, [r2, r3]
 800aaf0:	f8d9 3000 	ldr.w	r3, [r9]
 800aaf4:	900e      	str	r0, [sp, #56]	; 0x38
 800aaf6:	7c1b      	ldrb	r3, [r3, #16]
 800aaf8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800aafc:	f003 0303 	and.w	r3, r3, #3
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	4657      	mov	r7, sl
 800ab04:	f1c1 0808 	rsb	r8, r1, #8
 800ab08:	fa46 f601 	asr.w	r6, r6, r1
 800ab0c:	d020      	beq.n	800ab50 <_DrawBitmap+0x34c>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d061      	beq.n	800abd6 <_DrawBitmap+0x3d2>
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d05f      	beq.n	800abd6 <_DrawBitmap+0x3d2>
 800ab16:	465a      	mov	r2, fp
 800ab18:	4547      	cmp	r7, r8
 800ab1a:	bf38      	it	cc
 800ab1c:	46b8      	movcc	r8, r7
 800ab1e:	ebc8 0707 	rsb	r7, r8, r7
 800ab22:	4643      	mov	r3, r8
 800ab24:	4621      	mov	r1, r4
 800ab26:	f006 0001 	and.w	r0, r6, #1
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800ab30:	f841 0b04 	str.w	r0, [r1], #4
 800ab34:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab38:	d1f5      	bne.n	800ab26 <_DrawBitmap+0x322>
 800ab3a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	d06d      	beq.n	800ac1e <_DrawBitmap+0x41a>
 800ab42:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ab46:	4988      	ldr	r1, [pc, #544]	; (800ad68 <_DrawBitmap+0x564>)
 800ab48:	f04f 0808 	mov.w	r8, #8
 800ab4c:	5cce      	ldrb	r6, [r1, r3]
 800ab4e:	e7e3      	b.n	800ab18 <_DrawBitmap+0x314>
 800ab50:	686b      	ldr	r3, [r5, #4]
 800ab52:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ab56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab58:	f8cd b020 	str.w	fp, [sp, #32]
 800ab5c:	4547      	cmp	r7, r8
 800ab5e:	bf38      	it	cc
 800ab60:	46b8      	movcc	r8, r7
 800ab62:	ebc8 0707 	rsb	r7, r8, r7
 800ab66:	f1bc 0f00 	cmp.w	ip, #0
 800ab6a:	d026      	beq.n	800abba <_DrawBitmap+0x3b6>
 800ab6c:	b91e      	cbnz	r6, 800ab76 <_DrawBitmap+0x372>
 800ab6e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ab72:	44c1      	add	r9, r8
 800ab74:	e025      	b.n	800abc2 <_DrawBitmap+0x3be>
 800ab76:	07f0      	lsls	r0, r6, #31
 800ab78:	d50c      	bpl.n	800ab94 <_DrawBitmap+0x390>
 800ab7a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800ab7e:	9a05      	ldr	r2, [sp, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f8cd c008 	str.w	ip, [sp, #8]
 800ab86:	4660      	mov	r0, ip
 800ab88:	4649      	mov	r1, r9
 800ab8a:	4798      	blx	r3
 800ab8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab8e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	f1b8 0801 	subs.w	r8, r8, #1
 800ab98:	f109 0901 	add.w	r9, r9, #1
 800ab9c:	f104 0404 	add.w	r4, r4, #4
 800aba0:	d00f      	beq.n	800abc2 <_DrawBitmap+0x3be>
 800aba2:	0876      	lsrs	r6, r6, #1
 800aba4:	e7e2      	b.n	800ab6c <_DrawBitmap+0x368>
 800aba6:	07f1      	lsls	r1, r6, #31
 800aba8:	bf44      	itt	mi
 800abaa:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800abac:	6023      	strmi	r3, [r4, #0]
 800abae:	f1b8 0801 	subs.w	r8, r8, #1
 800abb2:	f104 0404 	add.w	r4, r4, #4
 800abb6:	d004      	beq.n	800abc2 <_DrawBitmap+0x3be>
 800abb8:	0876      	lsrs	r6, r6, #1
 800abba:	2e00      	cmp	r6, #0
 800abbc:	d1f3      	bne.n	800aba6 <_DrawBitmap+0x3a2>
 800abbe:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800abc2:	b367      	cbz	r7, 800ac1e <_DrawBitmap+0x41a>
 800abc4:	9808      	ldr	r0, [sp, #32]
 800abc6:	4a68      	ldr	r2, [pc, #416]	; (800ad68 <_DrawBitmap+0x564>)
 800abc8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800abcc:	9008      	str	r0, [sp, #32]
 800abce:	5cd6      	ldrb	r6, [r2, r3]
 800abd0:	f04f 0808 	mov.w	r8, #8
 800abd4:	e7c2      	b.n	800ab5c <_DrawBitmap+0x358>
 800abd6:	6803      	ldr	r3, [r0, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4798      	blx	r3
 800abde:	4659      	mov	r1, fp
 800abe0:	4547      	cmp	r7, r8
 800abe2:	bf38      	it	cc
 800abe4:	46b8      	movcc	r8, r7
 800abe6:	ebc8 0707 	rsb	r7, r8, r7
 800abea:	1d23      	adds	r3, r4, #4
 800abec:	46c6      	mov	lr, r8
 800abee:	07f2      	lsls	r2, r6, #31
 800abf0:	d504      	bpl.n	800abfc <_DrawBitmap+0x3f8>
 800abf2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800abf6:	4042      	eors	r2, r0
 800abf8:	f843 2c04 	str.w	r2, [r3, #-4]
 800abfc:	f1be 0e01 	subs.w	lr, lr, #1
 800ac00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ac04:	f103 0304 	add.w	r3, r3, #4
 800ac08:	d1f1      	bne.n	800abee <_DrawBitmap+0x3ea>
 800ac0a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ac0e:	b137      	cbz	r7, 800ac1e <_DrawBitmap+0x41a>
 800ac10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac14:	4a54      	ldr	r2, [pc, #336]	; (800ad68 <_DrawBitmap+0x564>)
 800ac16:	f04f 0808 	mov.w	r8, #8
 800ac1a:	5cd6      	ldrb	r6, [r2, r3]
 800ac1c:	e7e0      	b.n	800abe0 <_DrawBitmap+0x3dc>
 800ac1e:	a80e      	add	r0, sp, #56	; 0x38
 800ac20:	f7fd fb76 	bl	8008310 <GUI_ALLOC_UnlockH>
 800ac24:	e176      	b.n	800af14 <_DrawBitmap+0x710>
 800ac26:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ac28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800ac2e:	f1c7 0604 	rsb	r6, r7, #4
 800ac32:	f89b 7000 	ldrb.w	r7, [fp]
 800ac36:	409f      	lsls	r7, r3
 800ac38:	4b4c      	ldr	r3, [pc, #304]	; (800ad6c <_DrawBitmap+0x568>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	7c1b      	ldrb	r3, [r3, #16]
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	b2f6      	uxtb	r6, r6
 800ac46:	b2ff      	uxtb	r7, r7
 800ac48:	d066      	beq.n	800ad18 <_DrawBitmap+0x514>
 800ac4a:	d308      	bcc.n	800ac5e <_DrawBitmap+0x45a>
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	f040 8161 	bne.w	800af14 <_DrawBitmap+0x710>
 800ac52:	9804      	ldr	r0, [sp, #16]
 800ac54:	f8cd b020 	str.w	fp, [sp, #32]
 800ac58:	46d0      	mov	r8, sl
 800ac5a:	9006      	str	r0, [sp, #24]
 800ac5c:	e03e      	b.n	800acdc <_DrawBitmap+0x4d8>
 800ac5e:	465a      	mov	r2, fp
 800ac60:	4653      	mov	r3, sl
 800ac62:	429e      	cmp	r6, r3
 800ac64:	bfc8      	it	gt
 800ac66:	b2de      	uxtbgt	r6, r3
 800ac68:	1b9b      	subs	r3, r3, r6
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800ac72:	3901      	subs	r1, #1
 800ac74:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800ac78:	f840 cb04 	str.w	ip, [r0], #4
 800ac7c:	00bf      	lsls	r7, r7, #2
 800ac7e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800ac82:	b2ff      	uxtb	r7, r7
 800ac84:	d1f3      	bne.n	800ac6e <_DrawBitmap+0x46a>
 800ac86:	3e01      	subs	r6, #1
 800ac88:	b2f6      	uxtb	r6, r6
 800ac8a:	3601      	adds	r6, #1
 800ac8c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 813f 	beq.w	800af14 <_DrawBitmap+0x710>
 800ac96:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800ac9a:	2604      	movs	r6, #4
 800ac9c:	e7e1      	b.n	800ac62 <_DrawBitmap+0x45e>
 800ac9e:	9906      	ldr	r1, [sp, #24]
 800aca0:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800aca4:	4449      	add	r1, r9
 800aca6:	d122      	bne.n	800acee <_DrawBitmap+0x4ea>
 800aca8:	f109 0901 	add.w	r9, r9, #1
 800acac:	fa5f f289 	uxtb.w	r2, r9
 800acb0:	00bf      	lsls	r7, r7, #2
 800acb2:	4296      	cmp	r6, r2
 800acb4:	b2ff      	uxtb	r7, r7
 800acb6:	d1f2      	bne.n	800ac9e <_DrawBitmap+0x49a>
 800acb8:	9f06      	ldr	r7, [sp, #24]
 800acba:	3e01      	subs	r6, #1
 800acbc:	b2f6      	uxtb	r6, r6
 800acbe:	1c7b      	adds	r3, r7, #1
 800acc0:	1c72      	adds	r2, r6, #1
 800acc2:	199e      	adds	r6, r3, r6
 800acc4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800acc8:	9606      	str	r6, [sp, #24]
 800acca:	f1b8 0f00 	cmp.w	r8, #0
 800acce:	f000 8121 	beq.w	800af14 <_DrawBitmap+0x710>
 800acd2:	9b08      	ldr	r3, [sp, #32]
 800acd4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800acd8:	9308      	str	r3, [sp, #32]
 800acda:	2604      	movs	r6, #4
 800acdc:	4546      	cmp	r6, r8
 800acde:	bfc8      	it	gt
 800ace0:	fa5f f688 	uxtbgt.w	r6, r8
 800ace4:	ebc6 0808 	rsb	r8, r6, r8
 800ace8:	f04f 0900 	mov.w	r9, #0
 800acec:	e7d7      	b.n	800ac9e <_DrawBitmap+0x49a>
 800acee:	09ba      	lsrs	r2, r7, #6
 800acf0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800acf4:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800acf8:	f1bc 0f00 	cmp.w	ip, #0
 800acfc:	d0d4      	beq.n	800aca8 <_DrawBitmap+0x4a4>
 800acfe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800ad02:	6812      	ldr	r2, [r2, #0]
 800ad04:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad06:	4660      	mov	r0, ip
 800ad08:	f8cd c008 	str.w	ip, [sp, #8]
 800ad0c:	9a05      	ldr	r2, [sp, #20]
 800ad0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad10:	4798      	blx	r3
 800ad12:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ad16:	e7c7      	b.n	800aca8 <_DrawBitmap+0x4a4>
 800ad18:	4658      	mov	r0, fp
 800ad1a:	4653      	mov	r3, sl
 800ad1c:	429e      	cmp	r6, r3
 800ad1e:	bfc8      	it	gt
 800ad20:	b2de      	uxtbgt	r6, r3
 800ad22:	1b9b      	subs	r3, r3, r6
 800ad24:	1d22      	adds	r2, r4, #4
 800ad26:	46b4      	mov	ip, r6
 800ad28:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800ad2c:	d005      	beq.n	800ad3a <_DrawBitmap+0x536>
 800ad2e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800ad32:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800ad36:	f842 1c04 	str.w	r1, [r2, #-4]
 800ad3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad3e:	00bf      	lsls	r7, r7, #2
 800ad40:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800ad44:	b2ff      	uxtb	r7, r7
 800ad46:	f102 0204 	add.w	r2, r2, #4
 800ad4a:	d1ed      	bne.n	800ad28 <_DrawBitmap+0x524>
 800ad4c:	3e01      	subs	r6, #1
 800ad4e:	b2f6      	uxtb	r6, r6
 800ad50:	3601      	adds	r6, #1
 800ad52:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 80dc 	beq.w	800af14 <_DrawBitmap+0x710>
 800ad5c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800ad60:	2604      	movs	r6, #4
 800ad62:	e7db      	b.n	800ad1c <_DrawBitmap+0x518>
 800ad64:	0801216c 	.word	0x0801216c
 800ad68:	08013e78 	.word	0x08013e78
 800ad6c:	200001b0 	.word	0x200001b0
 800ad70:	4a71      	ldr	r2, [pc, #452]	; (800af38 <_DrawBitmap+0x734>)
 800ad72:	f89b 3000 	ldrb.w	r3, [fp]
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad7a:	7c12      	ldrb	r2, [r2, #16]
 800ad7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ad7e:	f002 0203 	and.w	r2, r2, #3
 800ad82:	4083      	lsls	r3, r0
 800ad84:	2a01      	cmp	r2, #1
 800ad86:	b2de      	uxtb	r6, r3
 800ad88:	f000 809c 	beq.w	800aec4 <_DrawBitmap+0x6c0>
 800ad8c:	d302      	bcc.n	800ad94 <_DrawBitmap+0x590>
 800ad8e:	2a02      	cmp	r2, #2
 800ad90:	d035      	beq.n	800adfe <_DrawBitmap+0x5fa>
 800ad92:	e0bf      	b.n	800af14 <_DrawBitmap+0x710>
 800ad94:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ad96:	b15f      	cbz	r7, 800adb0 <_DrawBitmap+0x5ac>
 800ad98:	0936      	lsrs	r6, r6, #4
 800ad9a:	f10b 0201 	add.w	r2, fp, #1
 800ad9e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800ada8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800adaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800adae:	e001      	b.n	800adb4 <_DrawBitmap+0x5b0>
 800adb0:	4653      	mov	r3, sl
 800adb2:	465a      	mov	r2, fp
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	dd1a      	ble.n	800adee <_DrawBitmap+0x5ea>
 800adb8:	1058      	asrs	r0, r3, #1
 800adba:	f104 0108 	add.w	r1, r4, #8
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	eb02 0800 	add.w	r8, r2, r0
 800adc6:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800adca:	f006 060f 	and.w	r6, r6, #15
 800adce:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800add2:	f841 7c08 	str.w	r7, [r1, #-8]
 800add6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800adda:	f841 6c04 	str.w	r6, [r1, #-4]
 800adde:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800ade2:	4542      	cmp	r2, r8
 800ade4:	f101 0108 	add.w	r1, r1, #8
 800ade8:	d1ed      	bne.n	800adc6 <_DrawBitmap+0x5c2>
 800adea:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 8090 	beq.w	800af14 <_DrawBitmap+0x710>
 800adf4:	0936      	lsrs	r6, r6, #4
 800adf6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	e08a      	b.n	800af14 <_DrawBitmap+0x710>
 800adfe:	981e      	ldr	r0, [sp, #120]	; 0x78
 800ae00:	b1c0      	cbz	r0, 800ae34 <_DrawBitmap+0x630>
 800ae02:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800ae06:	d00a      	beq.n	800ae1e <_DrawBitmap+0x61a>
 800ae08:	0936      	lsrs	r6, r6, #4
 800ae0a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	b12f      	cbz	r7, 800ae1e <_DrawBitmap+0x61a>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	9904      	ldr	r1, [sp, #16]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	9a05      	ldr	r2, [sp, #20]
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	4798      	blx	r3
 800ae1e:	9904      	ldr	r1, [sp, #16]
 800ae20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ae22:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800ae26:	f101 0801 	add.w	r8, r1, #1
 800ae2a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ae2e:	f10b 0901 	add.w	r9, fp, #1
 800ae32:	e011      	b.n	800ae58 <_DrawBitmap+0x654>
 800ae34:	46d4      	mov	ip, sl
 800ae36:	46d9      	mov	r9, fp
 800ae38:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae3c:	e00c      	b.n	800ae58 <_DrawBitmap+0x654>
 800ae3e:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800ae42:	d10d      	bne.n	800ae60 <_DrawBitmap+0x65c>
 800ae44:	f016 060f 	ands.w	r6, r6, #15
 800ae48:	d11b      	bne.n	800ae82 <_DrawBitmap+0x67e>
 800ae4a:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800ae4e:	3408      	adds	r4, #8
 800ae50:	f108 0802 	add.w	r8, r8, #2
 800ae54:	f1ac 0c02 	sub.w	ip, ip, #2
 800ae58:	f1bc 0f01 	cmp.w	ip, #1
 800ae5c:	dcef      	bgt.n	800ae3e <_DrawBitmap+0x63a>
 800ae5e:	e021      	b.n	800aea4 <_DrawBitmap+0x6a0>
 800ae60:	0933      	lsrs	r3, r6, #4
 800ae62:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	2f00      	cmp	r7, #0
 800ae6a:	d0eb      	beq.n	800ae44 <_DrawBitmap+0x640>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	9a05      	ldr	r2, [sp, #20]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f8cd c008 	str.w	ip, [sp, #8]
 800ae76:	4638      	mov	r0, r7
 800ae78:	4641      	mov	r1, r8
 800ae7a:	4798      	blx	r3
 800ae7c:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ae80:	e7e0      	b.n	800ae44 <_DrawBitmap+0x640>
 800ae82:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800ae86:	6063      	str	r3, [r4, #4]
 800ae88:	2f00      	cmp	r7, #0
 800ae8a:	d0de      	beq.n	800ae4a <_DrawBitmap+0x646>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	9a05      	ldr	r2, [sp, #20]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f8cd c008 	str.w	ip, [sp, #8]
 800ae96:	4638      	mov	r0, r7
 800ae98:	f108 0101 	add.w	r1, r8, #1
 800ae9c:	4798      	blx	r3
 800ae9e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800aea2:	e7d2      	b.n	800ae4a <_DrawBitmap+0x646>
 800aea4:	f1bc 0f00 	cmp.w	ip, #0
 800aea8:	d034      	beq.n	800af14 <_DrawBitmap+0x710>
 800aeaa:	0936      	lsrs	r6, r6, #4
 800aeac:	d032      	beq.n	800af14 <_DrawBitmap+0x710>
 800aeae:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	b377      	cbz	r7, 800af14 <_DrawBitmap+0x710>
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	9a05      	ldr	r2, [sp, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4638      	mov	r0, r7
 800aebe:	4641      	mov	r1, r8
 800aec0:	4798      	blx	r3
 800aec2:	e027      	b.n	800af14 <_DrawBitmap+0x710>
 800aec4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800aec6:	f1c7 0302 	rsb	r3, r7, #2
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	465f      	mov	r7, fp
 800aece:	4652      	mov	r2, sl
 800aed0:	4293      	cmp	r3, r2
 800aed2:	bfc8      	it	gt
 800aed4:	b2d3      	uxtbgt	r3, r2
 800aed6:	1ad2      	subs	r2, r2, r3
 800aed8:	1d20      	adds	r0, r4, #4
 800aeda:	469c      	mov	ip, r3
 800aedc:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800aee0:	d005      	beq.n	800aeee <_DrawBitmap+0x6ea>
 800aee2:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800aee6:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800aeea:	f840 1c04 	str.w	r1, [r0, #-4]
 800aeee:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aef2:	0136      	lsls	r6, r6, #4
 800aef4:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800aef8:	b2f6      	uxtb	r6, r6
 800aefa:	f100 0004 	add.w	r0, r0, #4
 800aefe:	d1ed      	bne.n	800aedc <_DrawBitmap+0x6d8>
 800af00:	3b01      	subs	r3, #1
 800af02:	b2db      	uxtb	r3, r3
 800af04:	3301      	adds	r3, #1
 800af06:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800af0a:	b11a      	cbz	r2, 800af14 <_DrawBitmap+0x710>
 800af0c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800af10:	2302      	movs	r3, #2
 800af12:	e7dd      	b.n	800aed0 <_DrawBitmap+0x6cc>
 800af14:	9b05      	ldr	r3, [sp, #20]
 800af16:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800af18:	3301      	adds	r3, #1
 800af1a:	44bb      	add	fp, r7
 800af1c:	9305      	str	r3, [sp, #20]
 800af1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800af20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af22:	443b      	add	r3, r7
 800af24:	9309      	str	r3, [sp, #36]	; 0x24
 800af26:	e5c4      	b.n	800aab2 <_DrawBitmap+0x2ae>
 800af28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af2a:	b113      	cbz	r3, 800af32 <_DrawBitmap+0x72e>
 800af2c:	a80f      	add	r0, sp, #60	; 0x3c
 800af2e:	f7fd f9ef 	bl	8008310 <GUI_ALLOC_UnlockH>
 800af32:	b011      	add	sp, #68	; 0x44
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af38:	200001b0 	.word	0x200001b0

0800af3c <_GetDevData>:
 800af3c:	4802      	ldr	r0, [pc, #8]	; (800af48 <_GetDevData+0xc>)
 800af3e:	2901      	cmp	r1, #1
 800af40:	bf18      	it	ne
 800af42:	2000      	movne	r0, #0
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	08012220 	.word	0x08012220

0800af4c <_GetDevFunc>:
 800af4c:	4802      	ldr	r0, [pc, #8]	; (800af58 <_GetDevFunc+0xc>)
 800af4e:	2916      	cmp	r1, #22
 800af50:	bf18      	it	ne
 800af52:	2000      	movne	r0, #0
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	0800d43d 	.word	0x0800d43d

0800af5c <_SetOrg>:
 800af5c:	6800      	ldr	r0, [r0, #0]
 800af5e:	b508      	push	{r3, lr}
 800af60:	b110      	cbz	r0, 800af68 <_SetOrg+0xc>
 800af62:	68c3      	ldr	r3, [r0, #12]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	4798      	blx	r3
 800af68:	bd08      	pop	{r3, pc}

0800af6a <_GetDevProp>:
 800af6a:	6800      	ldr	r0, [r0, #0]
 800af6c:	b508      	push	{r3, lr}
 800af6e:	b118      	cbz	r0, 800af78 <_GetDevProp+0xe>
 800af70:	68c3      	ldr	r3, [r0, #12]
 800af72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af74:	4798      	blx	r3
 800af76:	bd08      	pop	{r3, pc}
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	bd08      	pop	{r3, pc}

0800af7e <_GetRect>:
 800af7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af80:	6880      	ldr	r0, [r0, #8]
 800af82:	460c      	mov	r4, r1
 800af84:	f7fd f9b6 	bl	80082f4 <GUI_ALLOC_LockH>
 800af88:	4603      	mov	r3, r0
 800af8a:	a802      	add	r0, sp, #8
 800af8c:	8899      	ldrh	r1, [r3, #4]
 800af8e:	88da      	ldrh	r2, [r3, #6]
 800af90:	891d      	ldrh	r5, [r3, #8]
 800af92:	f840 3d04 	str.w	r3, [r0, #-4]!
 800af96:	895b      	ldrh	r3, [r3, #10]
 800af98:	8021      	strh	r1, [r4, #0]
 800af9a:	8062      	strh	r2, [r4, #2]
 800af9c:	4429      	add	r1, r5
 800af9e:	441a      	add	r2, r3
 800afa0:	3901      	subs	r1, #1
 800afa2:	3a01      	subs	r2, #1
 800afa4:	80a1      	strh	r1, [r4, #4]
 800afa6:	80e2      	strh	r2, [r4, #6]
 800afa8:	f7fd f9b2 	bl	8008310 <GUI_ALLOC_UnlockH>
 800afac:	b003      	add	sp, #12
 800afae:	bd30      	pop	{r4, r5, pc}

0800afb0 <_XY2PTR>:
 800afb0:	4b0e      	ldr	r3, [pc, #56]	; (800afec <_XY2PTR+0x3c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afb6:	4605      	mov	r5, r0
 800afb8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800afba:	460e      	mov	r6, r1
 800afbc:	f7fd f99a 	bl	80082f4 <GUI_ALLOC_LockH>
 800afc0:	4603      	mov	r3, r0
 800afc2:	a802      	add	r0, sp, #8
 800afc4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800afc8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800afcc:	f103 0118 	add.w	r1, r3, #24
 800afd0:	1b36      	subs	r6, r6, r4
 800afd2:	68dc      	ldr	r4, [r3, #12]
 800afd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800afd8:	fb04 1406 	mla	r4, r4, r6, r1
 800afdc:	1aed      	subs	r5, r5, r3
 800afde:	f7fd f997 	bl	8008310 <GUI_ALLOC_UnlockH>
 800afe2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800afe6:	4620      	mov	r0, r4
 800afe8:	b002      	add	sp, #8
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	200001b0 	.word	0x200001b0

0800aff0 <_GetPixelIndex>:
 800aff0:	b508      	push	{r3, lr}
 800aff2:	4608      	mov	r0, r1
 800aff4:	4611      	mov	r1, r2
 800aff6:	f7ff ffdb 	bl	800afb0 <_XY2PTR>
 800affa:	8800      	ldrh	r0, [r0, #0]
 800affc:	bd08      	pop	{r3, pc}
	...

0800b000 <_XorPixel>:
 800b000:	4b14      	ldr	r3, [pc, #80]	; (800b054 <_XorPixel+0x54>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b006:	4607      	mov	r7, r0
 800b008:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b00a:	4615      	mov	r5, r2
 800b00c:	460e      	mov	r6, r1
 800b00e:	f7fd f971 	bl	80082f4 <GUI_ALLOC_LockH>
 800b012:	4629      	mov	r1, r5
 800b014:	9000      	str	r0, [sp, #0]
 800b016:	4630      	mov	r0, r6
 800b018:	f7ff ffca 	bl	800afb0 <_XY2PTR>
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	4604      	mov	r4, r0
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	4798      	blx	r3
 800b024:	8823      	ldrh	r3, [r4, #0]
 800b026:	4058      	eors	r0, r3
 800b028:	9b00      	ldr	r3, [sp, #0]
 800b02a:	8020      	strh	r0, [r4, #0]
 800b02c:	6958      	ldr	r0, [r3, #20]
 800b02e:	b160      	cbz	r0, 800b04a <_XorPixel+0x4a>
 800b030:	f7fd f960 	bl	80082f4 <GUI_ALLOC_LockH>
 800b034:	ac02      	add	r4, sp, #8
 800b036:	6883      	ldr	r3, [r0, #8]
 800b038:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4631      	mov	r1, r6
 800b040:	462a      	mov	r2, r5
 800b042:	4798      	blx	r3
 800b044:	4620      	mov	r0, r4
 800b046:	f7fd f963 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b04a:	4668      	mov	r0, sp
 800b04c:	f7fd f960 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b050:	b003      	add	sp, #12
 800b052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b054:	200001b0 	.word	0x200001b0

0800b058 <_SetPixelIndex>:
 800b058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b05a:	461c      	mov	r4, r3
 800b05c:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <_SetPixelIndex+0x48>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b062:	460e      	mov	r6, r1
 800b064:	4615      	mov	r5, r2
 800b066:	f7fd f945 	bl	80082f4 <GUI_ALLOC_LockH>
 800b06a:	4629      	mov	r1, r5
 800b06c:	9000      	str	r0, [sp, #0]
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ff9e 	bl	800afb0 <_XY2PTR>
 800b074:	9b00      	ldr	r3, [sp, #0]
 800b076:	8004      	strh	r4, [r0, #0]
 800b078:	6958      	ldr	r0, [r3, #20]
 800b07a:	b160      	cbz	r0, 800b096 <_SetPixelIndex+0x3e>
 800b07c:	f7fd f93a 	bl	80082f4 <GUI_ALLOC_LockH>
 800b080:	ac02      	add	r4, sp, #8
 800b082:	6883      	ldr	r3, [r0, #8]
 800b084:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4631      	mov	r1, r6
 800b08c:	462a      	mov	r2, r5
 800b08e:	4798      	blx	r3
 800b090:	4620      	mov	r0, r4
 800b092:	f7fd f93d 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b096:	4668      	mov	r0, sp
 800b098:	f7fd f93a 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b09c:	b002      	add	sp, #8
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	200001b0 	.word	0x200001b0

0800b0a4 <_DrawVLine>:
 800b0a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a8:	4d2c      	ldr	r5, [pc, #176]	; (800b15c <_DrawVLine+0xb8>)
 800b0aa:	461e      	mov	r6, r3
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	4681      	mov	r9, r0
 800b0b0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	f7fd f91d 	bl	80082f4 <GUI_ALLOC_LockH>
 800b0ba:	9000      	str	r0, [sp, #0]
 800b0bc:	6940      	ldr	r0, [r0, #20]
 800b0be:	46aa      	mov	sl, r5
 800b0c0:	b108      	cbz	r0, 800b0c6 <_DrawVLine+0x22>
 800b0c2:	f7fd f917 	bl	80082f4 <GUI_ALLOC_LockH>
 800b0c6:	9001      	str	r0, [sp, #4]
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	f7ff ff70 	bl	800afb0 <_XY2PTR>
 800b0d0:	9b00      	ldr	r3, [sp, #0]
 800b0d2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b0d6:	f8da 3000 	ldr.w	r3, [sl]
 800b0da:	7c1a      	ldrb	r2, [r3, #16]
 800b0dc:	07d2      	lsls	r2, r2, #31
 800b0de:	4605      	mov	r5, r0
 800b0e0:	d51f      	bpl.n	800b122 <_DrawVLine+0x7e>
 800b0e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	4798      	blx	r3
 800b0ea:	fa1f f880 	uxth.w	r8, r0
 800b0ee:	9801      	ldr	r0, [sp, #4]
 800b0f0:	b120      	cbz	r0, 800b0fc <_DrawVLine+0x58>
 800b0f2:	6883      	ldr	r3, [r0, #8]
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4798      	blx	r3
 800b0fc:	882b      	ldrh	r3, [r5, #0]
 800b0fe:	ea88 0303 	eor.w	r3, r8, r3
 800b102:	802b      	strh	r3, [r5, #0]
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	3401      	adds	r4, #1
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	42b4      	cmp	r4, r6
 800b10c:	441d      	add	r5, r3
 800b10e:	ddee      	ble.n	800b0ee <_DrawVLine+0x4a>
 800b110:	4668      	mov	r0, sp
 800b112:	f7fd f8fd 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	b1eb      	cbz	r3, 800b156 <_DrawVLine+0xb2>
 800b11a:	a801      	add	r0, sp, #4
 800b11c:	f7fd f8f8 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b120:	e019      	b.n	800b156 <_DrawVLine+0xb2>
 800b122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b124:	f8d3 9000 	ldr.w	r9, [r3]
 800b128:	9b01      	ldr	r3, [sp, #4]
 800b12a:	b163      	cbz	r3, 800b146 <_DrawVLine+0xa2>
 800b12c:	9801      	ldr	r0, [sp, #4]
 800b12e:	6883      	ldr	r3, [r0, #8]
 800b130:	4622      	mov	r2, r4
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4639      	mov	r1, r7
 800b136:	3401      	adds	r4, #1
 800b138:	4798      	blx	r3
 800b13a:	42b4      	cmp	r4, r6
 800b13c:	f8a5 9000 	strh.w	r9, [r5]
 800b140:	4445      	add	r5, r8
 800b142:	ddf3      	ble.n	800b12c <_DrawVLine+0x88>
 800b144:	e7e4      	b.n	800b110 <_DrawVLine+0x6c>
 800b146:	1b34      	subs	r4, r6, r4
 800b148:	3401      	adds	r4, #1
 800b14a:	3c01      	subs	r4, #1
 800b14c:	f8a5 9000 	strh.w	r9, [r5]
 800b150:	4445      	add	r5, r8
 800b152:	d1fa      	bne.n	800b14a <_DrawVLine+0xa6>
 800b154:	e7dc      	b.n	800b110 <_DrawVLine+0x6c>
 800b156:	b002      	add	sp, #8
 800b158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15c:	200001b0 	.word	0x200001b0

0800b160 <_FillRect>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	4f2a      	ldr	r7, [pc, #168]	; (800b210 <_FillRect+0xb0>)
 800b166:	4614      	mov	r4, r2
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	4698      	mov	r8, r3
 800b16c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800b16e:	b087      	sub	sp, #28
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	9302      	str	r3, [sp, #8]
 800b174:	4682      	mov	sl, r0
 800b176:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b178:	460e      	mov	r6, r1
 800b17a:	f7fd f8bb 	bl	80082f4 <GUI_ALLOC_LockH>
 800b17e:	4621      	mov	r1, r4
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff14 	bl	800afb0 <_XY2PTR>
 800b188:	9a04      	ldr	r2, [sp, #16]
 800b18a:	4605      	mov	r5, r0
 800b18c:	6950      	ldr	r0, [r2, #20]
 800b18e:	68d3      	ldr	r3, [r2, #12]
 800b190:	9303      	str	r3, [sp, #12]
 800b192:	ebc6 0908 	rsb	r9, r6, r8
 800b196:	f109 0801 	add.w	r8, r9, #1
 800b19a:	46bb      	mov	fp, r7
 800b19c:	b180      	cbz	r0, 800b1c0 <_FillRect+0x60>
 800b19e:	f7fd f8a9 	bl	80082f4 <GUI_ALLOC_LockH>
 800b1a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1a4:	af06      	add	r7, sp, #24
 800b1a6:	1b13      	subs	r3, r2, r4
 800b1a8:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4643      	mov	r3, r8
 800b1b6:	f002 feb5 	bl	800df24 <GUI_USAGE_AddRect>
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f7fd f8a8 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b1c0:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800b1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	dc1c      	bgt.n	800b204 <_FillRect+0xa4>
 800b1ca:	f8db 3000 	ldr.w	r3, [fp]
 800b1ce:	7c1b      	ldrb	r3, [r3, #16]
 800b1d0:	07db      	lsls	r3, r3, #31
 800b1d2:	d50d      	bpl.n	800b1f0 <_FillRect+0x90>
 800b1d4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4798      	blx	r3
 800b1dc:	19aa      	adds	r2, r5, r6
 800b1de:	b280      	uxth	r0, r0
 800b1e0:	1eab      	subs	r3, r5, #2
 800b1e2:	8859      	ldrh	r1, [r3, #2]
 800b1e4:	4041      	eors	r1, r0
 800b1e6:	f823 1f02 	strh.w	r1, [r3, #2]!
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d1f9      	bne.n	800b1e2 <_FillRect+0x82>
 800b1ee:	e005      	b.n	800b1fc <_FillRect+0x9c>
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	b299      	uxth	r1, r3
 800b1f6:	4642      	mov	r2, r8
 800b1f8:	f7fb fd94 	bl	8006d24 <GUI__memset16>
 800b1fc:	9a03      	ldr	r2, [sp, #12]
 800b1fe:	3401      	adds	r4, #1
 800b200:	4415      	add	r5, r2
 800b202:	e7df      	b.n	800b1c4 <_FillRect+0x64>
 800b204:	a804      	add	r0, sp, #16
 800b206:	f7fd f883 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b20a:	b007      	add	sp, #28
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	200001b0 	.word	0x200001b0

0800b214 <_DrawHLine>:
 800b214:	b507      	push	{r0, r1, r2, lr}
 800b216:	9200      	str	r2, [sp, #0]
 800b218:	f7ff ffa2 	bl	800b160 <_FillRect>
 800b21c:	b003      	add	sp, #12
 800b21e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b224 <_DrawBitmap>:
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	4c8a      	ldr	r4, [pc, #552]	; (800b454 <_DrawBitmap+0x230>)
 800b22a:	b093      	sub	sp, #76	; 0x4c
 800b22c:	469b      	mov	fp, r3
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	900d      	str	r0, [sp, #52]	; 0x34
 800b232:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b234:	9207      	str	r2, [sp, #28]
 800b236:	460d      	mov	r5, r1
 800b238:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800b23c:	f7fd f85a 	bl	80082f4 <GUI_ALLOC_LockH>
 800b240:	9010      	str	r0, [sp, #64]	; 0x40
 800b242:	6940      	ldr	r0, [r0, #20]
 800b244:	b108      	cbz	r0, 800b24a <_DrawBitmap+0x26>
 800b246:	f7fd f855 	bl	80082f4 <GUI_ALLOC_LockH>
 800b24a:	9011      	str	r0, [sp, #68]	; 0x44
 800b24c:	a812      	add	r0, sp, #72	; 0x48
 800b24e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	9308      	str	r3, [sp, #32]
 800b256:	f7fd f85b 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b25a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800b25c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b25e:	442e      	add	r6, r5
 800b260:	9604      	str	r6, [sp, #16]
 800b262:	b150      	cbz	r0, 800b27a <_DrawBitmap+0x56>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	7c1b      	ldrb	r3, [r3, #16]
 800b268:	0799      	lsls	r1, r3, #30
 800b26a:	d106      	bne.n	800b27a <_DrawBitmap+0x56>
 800b26c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b26e:	9700      	str	r7, [sp, #0]
 800b270:	4631      	mov	r1, r6
 800b272:	9a07      	ldr	r2, [sp, #28]
 800b274:	465b      	mov	r3, fp
 800b276:	f002 fe55 	bl	800df24 <GUI_USAGE_AddRect>
 800b27a:	9804      	ldr	r0, [sp, #16]
 800b27c:	9907      	ldr	r1, [sp, #28]
 800b27e:	f7ff fe97 	bl	800afb0 <_XY2PTR>
 800b282:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b284:	2e10      	cmp	r6, #16
 800b286:	4604      	mov	r4, r0
 800b288:	d139      	bne.n	800b2fe <_DrawBitmap+0xda>
 800b28a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b28c:	b11b      	cbz	r3, 800b296 <_DrawBitmap+0x72>
 800b28e:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800b292:	2500      	movs	r5, #0
 800b294:	e014      	b.n	800b2c0 <_DrawBitmap+0x9c>
 800b296:	4b70      	ldr	r3, [pc, #448]	; (800b458 <_DrawBitmap+0x234>)
 800b298:	681d      	ldr	r5, [r3, #0]
 800b29a:	2d00      	cmp	r5, #0
 800b29c:	d0f7      	beq.n	800b28e <_DrawBitmap+0x6a>
 800b29e:	9e08      	ldr	r6, [sp, #32]
 800b2a0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b2a2:	9600      	str	r6, [sp, #0]
 800b2a4:	9701      	str	r7, [sp, #4]
 800b2a6:	4651      	mov	r1, sl
 800b2a8:	465a      	mov	r2, fp
 800b2aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b2ac:	47a8      	blx	r5
 800b2ae:	e345      	b.n	800b93c <_DrawBitmap+0x718>
 800b2b0:	f1ba 0f00 	cmp.w	sl, #0
 800b2b4:	d10a      	bne.n	800b2cc <_DrawBitmap+0xa8>
 800b2b6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b2b8:	44ba      	add	sl, r7
 800b2ba:	9f08      	ldr	r7, [sp, #32]
 800b2bc:	3501      	adds	r5, #1
 800b2be:	443c      	add	r4, r7
 800b2c0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b2c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800b2c6:	42bd      	cmp	r5, r7
 800b2c8:	dbf2      	blt.n	800b2b0 <_DrawBitmap+0x8c>
 800b2ca:	e013      	b.n	800b2f4 <_DrawBitmap+0xd0>
 800b2cc:	2c00      	cmp	r4, #0
 800b2ce:	d0f2      	beq.n	800b2b6 <_DrawBitmap+0x92>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4651      	mov	r1, sl
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	f004 f802 	bl	800f2de <memcpy>
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	d0ea      	beq.n	800b2b6 <_DrawBitmap+0x92>
 800b2e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2e4:	9a07      	ldr	r2, [sp, #28]
 800b2e6:	685f      	ldr	r7, [r3, #4]
 800b2e8:	9904      	ldr	r1, [sp, #16]
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	442a      	add	r2, r5
 800b2ee:	465b      	mov	r3, fp
 800b2f0:	47b8      	blx	r7
 800b2f2:	e7e0      	b.n	800b2b6 <_DrawBitmap+0x92>
 800b2f4:	f1b8 0f00 	cmp.w	r8, #0
 800b2f8:	f040 831d 	bne.w	800b936 <_DrawBitmap+0x712>
 800b2fc:	e31e      	b.n	800b93c <_DrawBitmap+0x718>
 800b2fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b300:	2e17      	cmp	r6, #23
 800b302:	dd38      	ble.n	800b376 <_DrawBitmap+0x152>
 800b304:	2600      	movs	r6, #0
 800b306:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b308:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b30a:	42be      	cmp	r6, r7
 800b30c:	f280 809d 	bge.w	800b44a <_DrawBitmap+0x226>
 800b310:	9f07      	ldr	r7, [sp, #28]
 800b312:	4437      	add	r7, r6
 800b314:	f1ba 0f00 	cmp.w	sl, #0
 800b318:	d027      	beq.n	800b36a <_DrawBitmap+0x146>
 800b31a:	b334      	cbz	r4, 800b36a <_DrawBitmap+0x146>
 800b31c:	b13d      	cbz	r5, 800b32e <_DrawBitmap+0x10a>
 800b31e:	68ab      	ldr	r3, [r5, #8]
 800b320:	9904      	ldr	r1, [sp, #16]
 800b322:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b326:	4628      	mov	r0, r5
 800b328:	463a      	mov	r2, r7
 800b32a:	465b      	mov	r3, fp
 800b32c:	47e0      	blx	ip
 800b32e:	1ea3      	subs	r3, r4, #2
 800b330:	f1aa 0904 	sub.w	r9, sl, #4
 800b334:	9303      	str	r3, [sp, #12]
 800b336:	46d8      	mov	r8, fp
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b33c:	445b      	add	r3, fp
 800b33e:	ebc8 0103 	rsb	r1, r8, r3
 800b342:	6903      	ldr	r3, [r0, #16]
 800b344:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	9102      	str	r1, [sp, #8]
 800b34c:	4798      	blx	r3
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	9902      	ldr	r1, [sp, #8]
 800b352:	f823 0f02 	strh.w	r0, [r3, #2]!
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	b125      	cbz	r5, 800b364 <_DrawBitmap+0x140>
 800b35a:	68ab      	ldr	r3, [r5, #8]
 800b35c:	4628      	mov	r0, r5
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	463a      	mov	r2, r7
 800b362:	4798      	blx	r3
 800b364:	f1b8 0801 	subs.w	r8, r8, #1
 800b368:	d1e6      	bne.n	800b338 <_DrawBitmap+0x114>
 800b36a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b36c:	44ba      	add	sl, r7
 800b36e:	9f08      	ldr	r7, [sp, #32]
 800b370:	3601      	adds	r6, #1
 800b372:	443c      	add	r4, r7
 800b374:	e7c7      	b.n	800b306 <_DrawBitmap+0xe2>
 800b376:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b378:	2e08      	cmp	r6, #8
 800b37a:	f100 0402 	add.w	r4, r0, #2
 800b37e:	d16d      	bne.n	800b45c <_DrawBitmap+0x238>
 800b380:	9e07      	ldr	r6, [sp, #28]
 800b382:	9f07      	ldr	r7, [sp, #28]
 800b384:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b386:	1bf3      	subs	r3, r6, r7
 800b388:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b38a:	42bb      	cmp	r3, r7
 800b38c:	f1a4 0002 	sub.w	r0, r4, #2
 800b390:	da5b      	bge.n	800b44a <_DrawBitmap+0x226>
 800b392:	4b30      	ldr	r3, [pc, #192]	; (800b454 <_DrawBitmap+0x230>)
 800b394:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	7c1b      	ldrb	r3, [r3, #16]
 800b39a:	b367      	cbz	r7, 800b3f6 <_DrawBitmap+0x1d2>
 800b39c:	f013 0303 	ands.w	r3, r3, #3
 800b3a0:	d004      	beq.n	800b3ac <_DrawBitmap+0x188>
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d14b      	bne.n	800b43e <_DrawBitmap+0x21a>
 800b3a6:	46a0      	mov	r8, r4
 800b3a8:	9f04      	ldr	r7, [sp, #16]
 800b3aa:	e01d      	b.n	800b3e8 <_DrawBitmap+0x1c4>
 800b3ac:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800b3b0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b3b2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800b3b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	455b      	cmp	r3, fp
 800b3be:	d1f5      	bne.n	800b3ac <_DrawBitmap+0x188>
 800b3c0:	e03d      	b.n	800b43e <_DrawBitmap+0x21a>
 800b3c2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800b3c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3c8:	f828 3c02 	strh.w	r3, [r8, #-2]
 800b3cc:	b12d      	cbz	r5, 800b3da <_DrawBitmap+0x1b6>
 800b3ce:	68ab      	ldr	r3, [r5, #8]
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	4798      	blx	r3
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	3701      	adds	r7, #1
 800b3de:	445b      	add	r3, fp
 800b3e0:	42bb      	cmp	r3, r7
 800b3e2:	f108 0802 	add.w	r8, r8, #2
 800b3e6:	d02a      	beq.n	800b43e <_DrawBitmap+0x21a>
 800b3e8:	9804      	ldr	r0, [sp, #16]
 800b3ea:	ebc0 030a 	rsb	r3, r0, sl
 800b3ee:	5ddb      	ldrb	r3, [r3, r7]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0f2      	beq.n	800b3da <_DrawBitmap+0x1b6>
 800b3f4:	e7e5      	b.n	800b3c2 <_DrawBitmap+0x19e>
 800b3f6:	f013 0303 	ands.w	r3, r3, #3
 800b3fa:	d004      	beq.n	800b406 <_DrawBitmap+0x1e2>
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d11e      	bne.n	800b43e <_DrawBitmap+0x21a>
 800b400:	46a0      	mov	r8, r4
 800b402:	9f04      	ldr	r7, [sp, #16]
 800b404:	e014      	b.n	800b430 <_DrawBitmap+0x20c>
 800b406:	4651      	mov	r1, sl
 800b408:	465a      	mov	r2, fp
 800b40a:	f003 ff68 	bl	800f2de <memcpy>
 800b40e:	e016      	b.n	800b43e <_DrawBitmap+0x21a>
 800b410:	f828 3c02 	strh.w	r3, [r8, #-2]
 800b414:	b12d      	cbz	r5, 800b422 <_DrawBitmap+0x1fe>
 800b416:	68ab      	ldr	r3, [r5, #8]
 800b418:	4628      	mov	r0, r5
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4639      	mov	r1, r7
 800b41e:	4632      	mov	r2, r6
 800b420:	4798      	blx	r3
 800b422:	9b04      	ldr	r3, [sp, #16]
 800b424:	3701      	adds	r7, #1
 800b426:	445b      	add	r3, fp
 800b428:	42bb      	cmp	r3, r7
 800b42a:	f108 0802 	add.w	r8, r8, #2
 800b42e:	d006      	beq.n	800b43e <_DrawBitmap+0x21a>
 800b430:	9a04      	ldr	r2, [sp, #16]
 800b432:	ebc2 030a 	rsb	r3, r2, sl
 800b436:	5ddb      	ldrb	r3, [r3, r7]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d0f2      	beq.n	800b422 <_DrawBitmap+0x1fe>
 800b43c:	e7e8      	b.n	800b410 <_DrawBitmap+0x1ec>
 800b43e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b440:	44ba      	add	sl, r7
 800b442:	9f08      	ldr	r7, [sp, #32]
 800b444:	3601      	adds	r6, #1
 800b446:	443c      	add	r4, r7
 800b448:	e79b      	b.n	800b382 <_DrawBitmap+0x15e>
 800b44a:	2d00      	cmp	r5, #0
 800b44c:	f040 8273 	bne.w	800b936 <_DrawBitmap+0x712>
 800b450:	e274      	b.n	800b93c <_DrawBitmap+0x718>
 800b452:	bf00      	nop
 800b454:	200001b0 	.word	0x200001b0
 800b458:	2001948c 	.word	0x2001948c
 800b45c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800b45e:	4bab      	ldr	r3, [pc, #684]	; (800b70c <_DrawBitmap+0x4e8>)
 800b460:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800b462:	9409      	str	r4, [sp, #36]	; 0x24
 800b464:	2e00      	cmp	r6, #0
 800b466:	bf08      	it	eq
 800b468:	461e      	moveq	r6, r3
 800b46a:	9621      	str	r6, [sp, #132]	; 0x84
 800b46c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800b46e:	0076      	lsls	r6, r6, #1
 800b470:	960e      	str	r6, [sp, #56]	; 0x38
 800b472:	00bf      	lsls	r7, r7, #2
 800b474:	9e07      	ldr	r6, [sp, #28]
 800b476:	970f      	str	r7, [sp, #60]	; 0x3c
 800b478:	9605      	str	r6, [sp, #20]
 800b47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47c:	9e05      	ldr	r6, [sp, #20]
 800b47e:	9f07      	ldr	r7, [sp, #28]
 800b480:	1e9c      	subs	r4, r3, #2
 800b482:	1bf3      	subs	r3, r6, r7
 800b484:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b486:	42b3      	cmp	r3, r6
 800b488:	f280 8253 	bge.w	800b932 <_DrawBitmap+0x70e>
 800b48c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b48e:	2f02      	cmp	r7, #2
 800b490:	f000 80d9 	beq.w	800b646 <_DrawBitmap+0x422>
 800b494:	2f04      	cmp	r7, #4
 800b496:	f000 8178 	beq.w	800b78a <_DrawBitmap+0x566>
 800b49a:	2f01      	cmp	r7, #1
 800b49c:	f040 823f 	bne.w	800b91e <_DrawBitmap+0x6fa>
 800b4a0:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800b714 <_DrawBitmap+0x4f0>
 800b4a4:	f8d9 3000 	ldr.w	r3, [r9]
 800b4a8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b4aa:	f7fc ff23 	bl	80082f4 <GUI_ALLOC_LockH>
 800b4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b2:	4a97      	ldr	r2, [pc, #604]	; (800b710 <_DrawBitmap+0x4ec>)
 800b4b4:	9010      	str	r0, [sp, #64]	; 0x40
 800b4b6:	5cd5      	ldrb	r5, [r2, r3]
 800b4b8:	f8d9 3000 	ldr.w	r3, [r9]
 800b4bc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800b4be:	7c1b      	ldrb	r3, [r3, #16]
 800b4c0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	465e      	mov	r6, fp
 800b4ca:	f1c0 0808 	rsb	r8, r0, #8
 800b4ce:	fa45 f500 	asr.w	r5, r5, r0
 800b4d2:	d022      	beq.n	800b51a <_DrawBitmap+0x2f6>
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	d062      	beq.n	800b59e <_DrawBitmap+0x37a>
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d060      	beq.n	800b59e <_DrawBitmap+0x37a>
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4546      	cmp	r6, r8
 800b4e0:	bf38      	it	cc
 800b4e2:	46b0      	movcc	r8, r6
 800b4e4:	ebc8 0606 	rsb	r6, r8, r6
 800b4e8:	4643      	mov	r3, r8
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f005 0001 	and.w	r0, r5, #1
 800b4f0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800b4f8:	f821 0b02 	strh.w	r0, [r1], #2
 800b4fc:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800b500:	d1f4      	bne.n	800b4ec <_DrawBitmap+0x2c8>
 800b502:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800b506:	2e00      	cmp	r6, #0
 800b508:	f000 8099 	beq.w	800b63e <_DrawBitmap+0x41a>
 800b50c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b510:	497f      	ldr	r1, [pc, #508]	; (800b710 <_DrawBitmap+0x4ec>)
 800b512:	f04f 0808 	mov.w	r8, #8
 800b516:	5ccd      	ldrb	r5, [r1, r3]
 800b518:	e7e1      	b.n	800b4de <_DrawBitmap+0x2ba>
 800b51a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b51c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800b520:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800b524:	f8cd a018 	str.w	sl, [sp, #24]
 800b528:	4546      	cmp	r6, r8
 800b52a:	bf38      	it	cc
 800b52c:	46b0      	movcc	r8, r6
 800b52e:	ebc8 0606 	rsb	r6, r8, r6
 800b532:	b32f      	cbz	r7, 800b580 <_DrawBitmap+0x35c>
 800b534:	b91d      	cbnz	r5, 800b53e <_DrawBitmap+0x31a>
 800b536:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800b53a:	44c1      	add	r9, r8
 800b53c:	e024      	b.n	800b588 <_DrawBitmap+0x364>
 800b53e:	07ea      	lsls	r2, r5, #31
 800b540:	d50b      	bpl.n	800b55a <_DrawBitmap+0x336>
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	9a05      	ldr	r2, [sp, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f8cd c008 	str.w	ip, [sp, #8]
 800b54c:	4638      	mov	r0, r7
 800b54e:	4649      	mov	r1, r9
 800b550:	4798      	blx	r3
 800b552:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b556:	f8a4 c000 	strh.w	ip, [r4]
 800b55a:	f1b8 0801 	subs.w	r8, r8, #1
 800b55e:	f109 0901 	add.w	r9, r9, #1
 800b562:	f104 0402 	add.w	r4, r4, #2
 800b566:	d00f      	beq.n	800b588 <_DrawBitmap+0x364>
 800b568:	086d      	lsrs	r5, r5, #1
 800b56a:	e7e3      	b.n	800b534 <_DrawBitmap+0x310>
 800b56c:	07eb      	lsls	r3, r5, #31
 800b56e:	bf48      	it	mi
 800b570:	f8a4 c000 	strhmi.w	ip, [r4]
 800b574:	f1b8 0801 	subs.w	r8, r8, #1
 800b578:	f104 0402 	add.w	r4, r4, #2
 800b57c:	d004      	beq.n	800b588 <_DrawBitmap+0x364>
 800b57e:	086d      	lsrs	r5, r5, #1
 800b580:	2d00      	cmp	r5, #0
 800b582:	d1f3      	bne.n	800b56c <_DrawBitmap+0x348>
 800b584:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800b588:	2e00      	cmp	r6, #0
 800b58a:	d058      	beq.n	800b63e <_DrawBitmap+0x41a>
 800b58c:	9906      	ldr	r1, [sp, #24]
 800b58e:	4a60      	ldr	r2, [pc, #384]	; (800b710 <_DrawBitmap+0x4ec>)
 800b590:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b594:	9106      	str	r1, [sp, #24]
 800b596:	5cd5      	ldrb	r5, [r2, r3]
 800b598:	f04f 0808 	mov.w	r8, #8
 800b59c:	e7c4      	b.n	800b528 <_DrawBitmap+0x304>
 800b59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5a0:	6913      	ldr	r3, [r2, #16]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	4798      	blx	r3
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5aa:	b280      	uxth	r0, r0
 800b5ac:	900a      	str	r0, [sp, #40]	; 0x28
 800b5ae:	f10a 0901 	add.w	r9, sl, #1
 800b5b2:	4546      	cmp	r6, r8
 800b5b4:	bf38      	it	cc
 800b5b6:	46b0      	movcc	r8, r6
 800b5b8:	ebc8 0606 	rsb	r6, r8, r6
 800b5bc:	1ca3      	adds	r3, r4, #2
 800b5be:	b31f      	cbz	r7, 800b608 <_DrawBitmap+0x3e4>
 800b5c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b5c6:	9a06      	ldr	r2, [sp, #24]
 800b5c8:	4440      	add	r0, r8
 800b5ca:	900c      	str	r0, [sp, #48]	; 0x30
 800b5cc:	1a81      	subs	r1, r0, r2
 800b5ce:	07e8      	lsls	r0, r5, #31
 800b5d0:	d50d      	bpl.n	800b5ee <_DrawBitmap+0x3ca>
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f8d2 c000 	ldr.w	ip, [r2]
 800b5da:	9a05      	ldr	r2, [sp, #20]
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	47e0      	blx	ip
 800b5e0:	9b02      	ldr	r3, [sp, #8]
 800b5e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5e4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800b5e8:	4042      	eors	r2, r0
 800b5ea:	f823 2c02 	strh.w	r2, [r3, #-2]
 800b5ee:	9906      	ldr	r1, [sp, #24]
 800b5f0:	3901      	subs	r1, #1
 800b5f2:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800b5f6:	f103 0302 	add.w	r3, r3, #2
 800b5fa:	9106      	str	r1, [sp, #24]
 800b5fc:	d1e2      	bne.n	800b5c4 <_DrawBitmap+0x3a0>
 800b5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b600:	930b      	str	r3, [sp, #44]	; 0x2c
 800b602:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800b606:	e010      	b.n	800b62a <_DrawBitmap+0x406>
 800b608:	4642      	mov	r2, r8
 800b60a:	07e9      	lsls	r1, r5, #31
 800b60c:	d505      	bpl.n	800b61a <_DrawBitmap+0x3f6>
 800b60e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800b612:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b614:	4041      	eors	r1, r0
 800b616:	f823 1c02 	strh.w	r1, [r3, #-2]
 800b61a:	3a01      	subs	r2, #1
 800b61c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800b620:	f103 0302 	add.w	r3, r3, #2
 800b624:	d1f1      	bne.n	800b60a <_DrawBitmap+0x3e6>
 800b626:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800b62a:	b146      	cbz	r6, 800b63e <_DrawBitmap+0x41a>
 800b62c:	f899 3000 	ldrb.w	r3, [r9]
 800b630:	4a37      	ldr	r2, [pc, #220]	; (800b710 <_DrawBitmap+0x4ec>)
 800b632:	f109 0901 	add.w	r9, r9, #1
 800b636:	5cd5      	ldrb	r5, [r2, r3]
 800b638:	f04f 0808 	mov.w	r8, #8
 800b63c:	e7b9      	b.n	800b5b2 <_DrawBitmap+0x38e>
 800b63e:	a810      	add	r0, sp, #64	; 0x40
 800b640:	f7fc fe66 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b644:	e16b      	b.n	800b91e <_DrawBitmap+0x6fa>
 800b646:	4b33      	ldr	r3, [pc, #204]	; (800b714 <_DrawBitmap+0x4f0>)
 800b648:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b64e:	7c1b      	ldrb	r3, [r3, #16]
 800b650:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800b654:	f1c6 0504 	rsb	r5, r6, #4
 800b658:	f89a 6000 	ldrb.w	r6, [sl]
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	40be      	lsls	r6, r7
 800b662:	2b01      	cmp	r3, #1
 800b664:	b2ed      	uxtb	r5, r5
 800b666:	b2f6      	uxtb	r6, r6
 800b668:	d06a      	beq.n	800b740 <_DrawBitmap+0x51c>
 800b66a:	d308      	bcc.n	800b67e <_DrawBitmap+0x45a>
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	f040 8156 	bne.w	800b91e <_DrawBitmap+0x6fa>
 800b672:	f8cd a018 	str.w	sl, [sp, #24]
 800b676:	465f      	mov	r7, fp
 800b678:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b67c:	e03e      	b.n	800b6fc <_DrawBitmap+0x4d8>
 800b67e:	4652      	mov	r2, sl
 800b680:	465b      	mov	r3, fp
 800b682:	429d      	cmp	r5, r3
 800b684:	bfc8      	it	gt
 800b686:	b2dd      	uxtbgt	r5, r3
 800b688:	1b5b      	subs	r3, r3, r5
 800b68a:	4629      	mov	r1, r5
 800b68c:	4620      	mov	r0, r4
 800b68e:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800b692:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b694:	3901      	subs	r1, #1
 800b696:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800b69a:	f820 cb02 	strh.w	ip, [r0], #2
 800b69e:	00b6      	lsls	r6, r6, #2
 800b6a0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800b6a4:	b2f6      	uxtb	r6, r6
 800b6a6:	d1f2      	bne.n	800b68e <_DrawBitmap+0x46a>
 800b6a8:	3d01      	subs	r5, #1
 800b6aa:	b2ed      	uxtb	r5, r5
 800b6ac:	3501      	adds	r5, #1
 800b6ae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 8133 	beq.w	800b91e <_DrawBitmap+0x6fa>
 800b6b8:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800b6bc:	2504      	movs	r5, #4
 800b6be:	e7e0      	b.n	800b682 <_DrawBitmap+0x45e>
 800b6c0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800b6c4:	eb08 010c 	add.w	r1, r8, ip
 800b6c8:	d126      	bne.n	800b718 <_DrawBitmap+0x4f4>
 800b6ca:	f108 0801 	add.w	r8, r8, #1
 800b6ce:	fa5f f388 	uxtb.w	r3, r8
 800b6d2:	00b6      	lsls	r6, r6, #2
 800b6d4:	429d      	cmp	r5, r3
 800b6d6:	b2f6      	uxtb	r6, r6
 800b6d8:	d1f2      	bne.n	800b6c0 <_DrawBitmap+0x49c>
 800b6da:	3d01      	subs	r5, #1
 800b6dc:	b2ed      	uxtb	r5, r5
 800b6de:	1c6b      	adds	r3, r5, #1
 800b6e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b6e4:	f10c 0301 	add.w	r3, ip, #1
 800b6e8:	eb03 0c05 	add.w	ip, r3, r5
 800b6ec:	2f00      	cmp	r7, #0
 800b6ee:	f000 8116 	beq.w	800b91e <_DrawBitmap+0x6fa>
 800b6f2:	9b06      	ldr	r3, [sp, #24]
 800b6f4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800b6f8:	9306      	str	r3, [sp, #24]
 800b6fa:	2504      	movs	r5, #4
 800b6fc:	42bd      	cmp	r5, r7
 800b6fe:	bfc8      	it	gt
 800b700:	b2fd      	uxtbgt	r5, r7
 800b702:	1b7f      	subs	r7, r7, r5
 800b704:	f04f 0800 	mov.w	r8, #0
 800b708:	e7da      	b.n	800b6c0 <_DrawBitmap+0x49c>
 800b70a:	bf00      	nop
 800b70c:	080121e0 	.word	0x080121e0
 800b710:	08013e78 	.word	0x08013e78
 800b714:	200001b0 	.word	0x200001b0
 800b718:	09b3      	lsrs	r3, r6, #6
 800b71a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b71c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b720:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800b724:	f1b9 0f00 	cmp.w	r9, #0
 800b728:	d0cf      	beq.n	800b6ca <_DrawBitmap+0x4a6>
 800b72a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b72e:	9a05      	ldr	r2, [sp, #20]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f8cd c008 	str.w	ip, [sp, #8]
 800b736:	4648      	mov	r0, r9
 800b738:	4798      	blx	r3
 800b73a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b73e:	e7c4      	b.n	800b6ca <_DrawBitmap+0x4a6>
 800b740:	4651      	mov	r1, sl
 800b742:	465b      	mov	r3, fp
 800b744:	429d      	cmp	r5, r3
 800b746:	bfc8      	it	gt
 800b748:	b2dd      	uxtbgt	r5, r3
 800b74a:	1b5b      	subs	r3, r3, r5
 800b74c:	1ca2      	adds	r2, r4, #2
 800b74e:	4628      	mov	r0, r5
 800b750:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800b754:	d005      	beq.n	800b762 <_DrawBitmap+0x53e>
 800b756:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800b75a:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800b75e:	f822 7c02 	strh.w	r7, [r2, #-2]
 800b762:	3801      	subs	r0, #1
 800b764:	00b6      	lsls	r6, r6, #2
 800b766:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800b76a:	b2f6      	uxtb	r6, r6
 800b76c:	f102 0202 	add.w	r2, r2, #2
 800b770:	d1ee      	bne.n	800b750 <_DrawBitmap+0x52c>
 800b772:	3d01      	subs	r5, #1
 800b774:	b2ed      	uxtb	r5, r5
 800b776:	3501      	adds	r5, #1
 800b778:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 80ce 	beq.w	800b91e <_DrawBitmap+0x6fa>
 800b782:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800b786:	2504      	movs	r5, #4
 800b788:	e7dc      	b.n	800b744 <_DrawBitmap+0x520>
 800b78a:	4a6e      	ldr	r2, [pc, #440]	; (800b944 <_DrawBitmap+0x720>)
 800b78c:	f89a 3000 	ldrb.w	r3, [sl]
 800b790:	6812      	ldr	r2, [r2, #0]
 800b792:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b794:	7c12      	ldrb	r2, [r2, #16]
 800b796:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b798:	f002 0203 	and.w	r2, r2, #3
 800b79c:	40bb      	lsls	r3, r7
 800b79e:	2a01      	cmp	r2, #1
 800b7a0:	b2dd      	uxtb	r5, r3
 800b7a2:	f000 8095 	beq.w	800b8d0 <_DrawBitmap+0x6ac>
 800b7a6:	d302      	bcc.n	800b7ae <_DrawBitmap+0x58a>
 800b7a8:	2a02      	cmp	r2, #2
 800b7aa:	d036      	beq.n	800b81a <_DrawBitmap+0x5f6>
 800b7ac:	e0b7      	b.n	800b91e <_DrawBitmap+0x6fa>
 800b7ae:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800b7b0:	b166      	cbz	r6, 800b7cc <_DrawBitmap+0x5a8>
 800b7b2:	092d      	lsrs	r5, r5, #4
 800b7b4:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b7b6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b7ba:	8023      	strh	r3, [r4, #0]
 800b7bc:	f10a 0201 	add.w	r2, sl, #1
 800b7c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b7c2:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800b7c6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b7ca:	e001      	b.n	800b7d0 <_DrawBitmap+0x5ac>
 800b7cc:	465b      	mov	r3, fp
 800b7ce:	4652      	mov	r2, sl
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	dd19      	ble.n	800b808 <_DrawBitmap+0x5e4>
 800b7d4:	1058      	asrs	r0, r3, #1
 800b7d6:	1d21      	adds	r1, r4, #4
 800b7d8:	f003 0301 	and.w	r3, r3, #1
 800b7dc:	eb02 0c00 	add.w	ip, r2, r0
 800b7e0:	092f      	lsrs	r7, r5, #4
 800b7e2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800b7e4:	f005 050f 	and.w	r5, r5, #15
 800b7e8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800b7ec:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800b7f0:	f821 7c04 	strh.w	r7, [r1, #-4]
 800b7f4:	f821 5c02 	strh.w	r5, [r1, #-2]
 800b7f8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b7fc:	4562      	cmp	r2, ip
 800b7fe:	f101 0104 	add.w	r1, r1, #4
 800b802:	d1ed      	bne.n	800b7e0 <_DrawBitmap+0x5bc>
 800b804:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 8088 	beq.w	800b91e <_DrawBitmap+0x6fa>
 800b80e:	092d      	lsrs	r5, r5, #4
 800b810:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b812:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b816:	8023      	strh	r3, [r4, #0]
 800b818:	e081      	b.n	800b91e <_DrawBitmap+0x6fa>
 800b81a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800b81c:	b1c7      	cbz	r7, 800b850 <_DrawBitmap+0x62c>
 800b81e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800b822:	d00b      	beq.n	800b83c <_DrawBitmap+0x618>
 800b824:	092d      	lsrs	r5, r5, #4
 800b826:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b828:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b82c:	8023      	strh	r3, [r4, #0]
 800b82e:	b12e      	cbz	r6, 800b83c <_DrawBitmap+0x618>
 800b830:	68b3      	ldr	r3, [r6, #8]
 800b832:	9904      	ldr	r1, [sp, #16]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	9a05      	ldr	r2, [sp, #20]
 800b838:	4630      	mov	r0, r6
 800b83a:	4798      	blx	r3
 800b83c:	9804      	ldr	r0, [sp, #16]
 800b83e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b840:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800b844:	1c47      	adds	r7, r0, #1
 800b846:	f10b 39ff 	add.w	r9, fp, #4294967295
 800b84a:	f10a 0801 	add.w	r8, sl, #1
 800b84e:	e00f      	b.n	800b870 <_DrawBitmap+0x64c>
 800b850:	46d9      	mov	r9, fp
 800b852:	46d0      	mov	r8, sl
 800b854:	9f04      	ldr	r7, [sp, #16]
 800b856:	e00b      	b.n	800b870 <_DrawBitmap+0x64c>
 800b858:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800b85c:	d10c      	bne.n	800b878 <_DrawBitmap+0x654>
 800b85e:	f015 050f 	ands.w	r5, r5, #15
 800b862:	d117      	bne.n	800b894 <_DrawBitmap+0x670>
 800b864:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800b868:	3404      	adds	r4, #4
 800b86a:	3702      	adds	r7, #2
 800b86c:	f1a9 0902 	sub.w	r9, r9, #2
 800b870:	f1b9 0f01 	cmp.w	r9, #1
 800b874:	dcf0      	bgt.n	800b858 <_DrawBitmap+0x634>
 800b876:	e01a      	b.n	800b8ae <_DrawBitmap+0x68a>
 800b878:	092b      	lsrs	r3, r5, #4
 800b87a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800b87c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b880:	8023      	strh	r3, [r4, #0]
 800b882:	2e00      	cmp	r6, #0
 800b884:	d0eb      	beq.n	800b85e <_DrawBitmap+0x63a>
 800b886:	68b3      	ldr	r3, [r6, #8]
 800b888:	9a05      	ldr	r2, [sp, #20]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	4798      	blx	r3
 800b892:	e7e4      	b.n	800b85e <_DrawBitmap+0x63a>
 800b894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b896:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800b89a:	8063      	strh	r3, [r4, #2]
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	d0e1      	beq.n	800b864 <_DrawBitmap+0x640>
 800b8a0:	68b3      	ldr	r3, [r6, #8]
 800b8a2:	9a05      	ldr	r2, [sp, #20]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	1c79      	adds	r1, r7, #1
 800b8aa:	4798      	blx	r3
 800b8ac:	e7da      	b.n	800b864 <_DrawBitmap+0x640>
 800b8ae:	f1b9 0f00 	cmp.w	r9, #0
 800b8b2:	d034      	beq.n	800b91e <_DrawBitmap+0x6fa>
 800b8b4:	092d      	lsrs	r5, r5, #4
 800b8b6:	d032      	beq.n	800b91e <_DrawBitmap+0x6fa>
 800b8b8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b8ba:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800b8be:	8023      	strh	r3, [r4, #0]
 800b8c0:	b36e      	cbz	r6, 800b91e <_DrawBitmap+0x6fa>
 800b8c2:	68b3      	ldr	r3, [r6, #8]
 800b8c4:	9a05      	ldr	r2, [sp, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	4798      	blx	r3
 800b8ce:	e026      	b.n	800b91e <_DrawBitmap+0x6fa>
 800b8d0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800b8d2:	f1c6 0302 	rsb	r3, r6, #2
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	4650      	mov	r0, sl
 800b8da:	465a      	mov	r2, fp
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	bfc8      	it	gt
 800b8e0:	b2d3      	uxtbgt	r3, r2
 800b8e2:	1ad2      	subs	r2, r2, r3
 800b8e4:	1ca1      	adds	r1, r4, #2
 800b8e6:	461e      	mov	r6, r3
 800b8e8:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800b8ec:	d005      	beq.n	800b8fa <_DrawBitmap+0x6d6>
 800b8ee:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800b8f2:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800b8f6:	f821 7c02 	strh.w	r7, [r1, #-2]
 800b8fa:	3e01      	subs	r6, #1
 800b8fc:	012d      	lsls	r5, r5, #4
 800b8fe:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800b902:	b2ed      	uxtb	r5, r5
 800b904:	f101 0102 	add.w	r1, r1, #2
 800b908:	d1ee      	bne.n	800b8e8 <_DrawBitmap+0x6c4>
 800b90a:	3b01      	subs	r3, #1
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	3301      	adds	r3, #1
 800b910:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b914:	b11a      	cbz	r2, 800b91e <_DrawBitmap+0x6fa>
 800b916:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b91a:	2302      	movs	r3, #2
 800b91c:	e7de      	b.n	800b8dc <_DrawBitmap+0x6b8>
 800b91e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b920:	9b05      	ldr	r3, [sp, #20]
 800b922:	9e08      	ldr	r6, [sp, #32]
 800b924:	44ba      	add	sl, r7
 800b926:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b928:	3301      	adds	r3, #1
 800b92a:	4437      	add	r7, r6
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	9709      	str	r7, [sp, #36]	; 0x24
 800b930:	e5a3      	b.n	800b47a <_DrawBitmap+0x256>
 800b932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b934:	b113      	cbz	r3, 800b93c <_DrawBitmap+0x718>
 800b936:	a811      	add	r0, sp, #68	; 0x44
 800b938:	f7fc fcea 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b93c:	b013      	add	sp, #76	; 0x4c
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	bf00      	nop
 800b944:	200001b0 	.word	0x200001b0

0800b948 <GUI_MEMDEV__WriteToActiveAt>:
 800b948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b94c:	460e      	mov	r6, r1
 800b94e:	4690      	mov	r8, r2
 800b950:	4607      	mov	r7, r0
 800b952:	f7fc fccf 	bl	80082f4 <GUI_ALLOC_LockH>
 800b956:	6803      	ldr	r3, [r0, #0]
 800b958:	ac02      	add	r4, sp, #8
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	2000      	movs	r0, #0
 800b964:	2116      	movs	r1, #22
 800b966:	4798      	blx	r3
 800b968:	4605      	mov	r5, r0
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7fc fcd0 	bl	8008310 <GUI_ALLOC_UnlockH>
 800b970:	b11d      	cbz	r5, 800b97a <GUI_MEMDEV__WriteToActiveAt+0x32>
 800b972:	4638      	mov	r0, r7
 800b974:	4631      	mov	r1, r6
 800b976:	4642      	mov	r2, r8
 800b978:	47a8      	blx	r5
 800b97a:	b002      	add	sp, #8
 800b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b980 <GUI_MEMDEV__CreateFixed>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	4e3e      	ldr	r6, [pc, #248]	; (800ba80 <GUI_MEMDEV__CreateFixed+0x100>)
 800b986:	b087      	sub	sp, #28
 800b988:	461d      	mov	r5, r3
 800b98a:	6833      	ldr	r3, [r6, #0]
 800b98c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b98e:	7c5b      	ldrb	r3, [r3, #17]
 800b990:	4683      	mov	fp, r0
 800b992:	468a      	mov	sl, r1
 800b994:	4690      	mov	r8, r2
 800b996:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b998:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7fb ff62 	bl	8007864 <GUI_DEVICE_Create>
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d033      	beq.n	800ba0e <GUI_MEMDEV__CreateFixed+0x8e>
 800b9a6:	6903      	ldr	r3, [r0, #16]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	4798      	blx	r3
 800b9ac:	f000 fa5d 	bl	800be6a <LCD__GetBPPDevice>
 800b9b0:	fb08 f600 	mul.w	r6, r8, r0
 800b9b4:	9003      	str	r0, [sp, #12]
 800b9b6:	3607      	adds	r6, #7
 800b9b8:	f7fc fe58 	bl	800866c <GUI_ALLOC_RequestSize>
 800b9bc:	f017 0901 	ands.w	r9, r7, #1
 800b9c0:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800b9c4:	d104      	bne.n	800b9d0 <GUI_MEMDEV__CreateFixed+0x50>
 800b9c6:	2304      	movs	r3, #4
 800b9c8:	fb90 f0f3 	sdiv	r0, r0, r3
 800b9cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	dc09      	bgt.n	800b9e8 <GUI_MEMDEV__CreateFixed+0x68>
 800b9d4:	b11e      	cbz	r6, 800b9de <GUI_MEMDEV__CreateFixed+0x5e>
 800b9d6:	3818      	subs	r0, #24
 800b9d8:	fbb0 f0f6 	udiv	r0, r0, r6
 800b9dc:	e000      	b.n	800b9e0 <GUI_MEMDEV__CreateFixed+0x60>
 800b9de:	4630      	mov	r0, r6
 800b9e0:	426d      	negs	r5, r5
 800b9e2:	42a8      	cmp	r0, r5
 800b9e4:	bfb8      	it	lt
 800b9e6:	4605      	movlt	r5, r0
 800b9e8:	f1b9 0f00 	cmp.w	r9, #0
 800b9ec:	d109      	bne.n	800ba02 <GUI_MEMDEV__CreateFixed+0x82>
 800b9ee:	f8cd 9000 	str.w	r9, [sp]
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	4651      	mov	r1, sl
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	462b      	mov	r3, r5
 800b9fa:	f002 fa53 	bl	800dea4 <GUI_USAGE_BM_Create>
 800b9fe:	4607      	mov	r7, r0
 800ba00:	e000      	b.n	800ba04 <GUI_MEMDEV__CreateFixed+0x84>
 800ba02:	2700      	movs	r7, #0
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	dc04      	bgt.n	800ba12 <GUI_MEMDEV__CreateFixed+0x92>
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f7fb ff29 	bl	8007860 <GUI_DEVICE_Delete>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	e032      	b.n	800ba78 <GUI_MEMDEV__CreateFixed+0xf8>
 800ba12:	fb06 f005 	mul.w	r0, r6, r5
 800ba16:	3018      	adds	r0, #24
 800ba18:	f1b9 0f00 	cmp.w	r9, #0
 800ba1c:	d002      	beq.n	800ba24 <GUI_MEMDEV__CreateFixed+0xa4>
 800ba1e:	f7fc feb1 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800ba22:	e001      	b.n	800ba28 <GUI_MEMDEV__CreateFixed+0xa8>
 800ba24:	f001 fa8a 	bl	800cf3c <GUI_ALLOC_AllocZero>
 800ba28:	4681      	mov	r9, r0
 800ba2a:	b940      	cbnz	r0, 800ba3e <GUI_MEMDEV__CreateFixed+0xbe>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7fb ff17 	bl	8007860 <GUI_DEVICE_Delete>
 800ba32:	2f00      	cmp	r7, #0
 800ba34:	d0eb      	beq.n	800ba0e <GUI_MEMDEV__CreateFixed+0x8e>
 800ba36:	4638      	mov	r0, r7
 800ba38:	f7fc fc8a 	bl	8008350 <GUI_ALLOC_Free>
 800ba3c:	e01b      	b.n	800ba76 <GUI_MEMDEV__CreateFixed+0xf6>
 800ba3e:	f7fc fc59 	bl	80082f4 <GUI_ALLOC_LockH>
 800ba42:	4603      	mov	r3, r0
 800ba44:	a806      	add	r0, sp, #24
 800ba46:	9a03      	ldr	r2, [sp, #12]
 800ba48:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ba4c:	611a      	str	r2, [r3, #16]
 800ba4e:	601c      	str	r4, [r3, #0]
 800ba50:	f8a3 b004 	strh.w	fp, [r3, #4]
 800ba54:	f8a3 a006 	strh.w	sl, [r3, #6]
 800ba58:	f8a3 8008 	strh.w	r8, [r3, #8]
 800ba5c:	815d      	strh	r5, [r3, #10]
 800ba5e:	60de      	str	r6, [r3, #12]
 800ba60:	615f      	str	r7, [r3, #20]
 800ba62:	f7fc fc55 	bl	8008310 <GUI_ALLOC_UnlockH>
 800ba66:	4a06      	ldr	r2, [pc, #24]	; (800ba80 <GUI_MEMDEV__CreateFixed+0x100>)
 800ba68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba6a:	6123      	str	r3, [r4, #16]
 800ba6c:	6813      	ldr	r3, [r2, #0]
 800ba6e:	f8c4 9008 	str.w	r9, [r4, #8]
 800ba72:	7c5b      	ldrb	r3, [r3, #17]
 800ba74:	61a3      	str	r3, [r4, #24]
 800ba76:	4648      	mov	r0, r9
 800ba78:	b007      	add	sp, #28
 800ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7e:	bf00      	nop
 800ba80:	200001b0 	.word	0x200001b0

0800ba84 <GUI_MEMDEV_GetBitsPerPixel>:
 800ba84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba86:	4605      	mov	r5, r0
 800ba88:	b170      	cbz	r0, 800baa8 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800ba8a:	f7fc fc33 	bl	80082f4 <GUI_ALLOC_LockH>
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	ac02      	add	r4, sp, #8
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	4798      	blx	r3
 800ba9c:	f000 f9e5 	bl	800be6a <LCD__GetBPPDevice>
 800baa0:	4605      	mov	r5, r0
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7fc fc34 	bl	8008310 <GUI_ALLOC_UnlockH>
 800baa8:	4628      	mov	r0, r5
 800baaa:	b003      	add	sp, #12
 800baac:	bd30      	pop	{r4, r5, pc}
	...

0800bab0 <GUI_MEMDEV_Delete>:
 800bab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bab2:	4604      	mov	r4, r0
 800bab4:	b1d0      	cbz	r0, 800baec <GUI_MEMDEV_Delete+0x3c>
 800bab6:	4b0e      	ldr	r3, [pc, #56]	; (800baf0 <GUI_MEMDEV_Delete+0x40>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800babc:	4283      	cmp	r3, r0
 800babe:	d101      	bne.n	800bac4 <GUI_MEMDEV_Delete+0x14>
 800bac0:	f001 f964 	bl	800cd8c <GUI_SelectLCD>
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7fc fc15 	bl	80082f4 <GUI_ALLOC_LockH>
 800baca:	9001      	str	r0, [sp, #4]
 800bacc:	6940      	ldr	r0, [r0, #20]
 800bace:	b108      	cbz	r0, 800bad4 <GUI_MEMDEV_Delete+0x24>
 800bad0:	f002 fa14 	bl	800defc <GUI_USAGE_DecUseCnt>
 800bad4:	ad02      	add	r5, sp, #8
 800bad6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	f7fb fec0 	bl	8007860 <GUI_DEVICE_Delete>
 800bae0:	4628      	mov	r0, r5
 800bae2:	f7fc fc15 	bl	8008310 <GUI_ALLOC_UnlockH>
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7fc fc32 	bl	8008350 <GUI_ALLOC_Free>
 800baec:	b003      	add	sp, #12
 800baee:	bd30      	pop	{r4, r5, pc}
 800baf0:	200001b0 	.word	0x200001b0

0800baf4 <GUI_MEMDEV_CreateEx>:
 800baf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	469a      	mov	sl, r3
 800bafa:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <GUI_MEMDEV_CreateEx+0x6c>)
 800bafc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4607      	mov	r7, r0
 800bb02:	7c58      	ldrb	r0, [r3, #17]
 800bb04:	4b17      	ldr	r3, [pc, #92]	; (800bb64 <GUI_MEMDEV_CreateEx+0x70>)
 800bb06:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800bb0a:	4688      	mov	r8, r1
 800bb0c:	4691      	mov	r9, r2
 800bb0e:	68e3      	ldr	r3, [r4, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	d006      	beq.n	800bb24 <GUI_MEMDEV_CreateEx+0x30>
 800bb16:	6824      	ldr	r4, [r4, #0]
 800bb18:	2c00      	cmp	r4, #0
 800bb1a:	d1f8      	bne.n	800bb0e <GUI_MEMDEV_CreateEx+0x1a>
 800bb1c:	f7fb fe90 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800bb20:	4604      	mov	r4, r0
 800bb22:	b130      	cbz	r0, 800bb32 <GUI_MEMDEV_CreateEx+0x3e>
 800bb24:	68e3      	ldr	r3, [r4, #12]
 800bb26:	4620      	mov	r0, r4
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	4798      	blx	r3
 800bb2e:	4606      	mov	r6, r0
 800bb30:	b908      	cbnz	r0, 800bb36 <GUI_MEMDEV_CreateEx+0x42>
 800bb32:	2000      	movs	r0, #0
 800bb34:	e010      	b.n	800bb58 <GUI_MEMDEV_CreateEx+0x64>
 800bb36:	6924      	ldr	r4, [r4, #16]
 800bb38:	68a3      	ldr	r3, [r4, #8]
 800bb3a:	4798      	blx	r3
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	bf04      	itt	eq
 800bb40:	f045 0501 	orreq.w	r5, r5, #1
 800bb44:	4c08      	ldreq	r4, [pc, #32]	; (800bb68 <GUI_MEMDEV_CreateEx+0x74>)
 800bb46:	9402      	str	r4, [sp, #8]
 800bb48:	e88d 0060 	stmia.w	sp, {r5, r6}
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	4641      	mov	r1, r8
 800bb50:	464a      	mov	r2, r9
 800bb52:	4653      	mov	r3, sl
 800bb54:	f7ff ff14 	bl	800b980 <GUI_MEMDEV__CreateFixed>
 800bb58:	b004      	add	sp, #16
 800bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5e:	bf00      	nop
 800bb60:	200001b0 	.word	0x200001b0
 800bb64:	2001af14 	.word	0x2001af14
 800bb68:	080141f4 	.word	0x080141f4

0800bb6c <GUI_MEMDEV_Select>:
 800bb6c:	4b11      	ldr	r3, [pc, #68]	; (800bbb4 <GUI_MEMDEV_Select+0x48>)
 800bb6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	4604      	mov	r4, r0
 800bb74:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800bb76:	461f      	mov	r7, r3
 800bb78:	b910      	cbnz	r0, 800bb80 <GUI_MEMDEV_Select+0x14>
 800bb7a:	f001 f907 	bl	800cd8c <GUI_SelectLCD>
 800bb7e:	e016      	b.n	800bbae <GUI_MEMDEV_Select+0x42>
 800bb80:	b10e      	cbz	r6, 800bb86 <GUI_MEMDEV_Select+0x1a>
 800bb82:	f001 f903 	bl	800cd8c <GUI_SelectLCD>
 800bb86:	f7fe fa31 	bl	8009fec <WM_Deactivate>
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7fc fbb2 	bl	80082f4 <GUI_ALLOC_LockH>
 800bb90:	ad02      	add	r5, sp, #8
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bb98:	661c      	str	r4, [r3, #96]	; 0x60
 800bb9a:	6800      	ldr	r0, [r0, #0]
 800bb9c:	f7fb fe9e 	bl	80078dc <GUI_DEVICE_Link>
 800bba0:	4628      	mov	r0, r5
 800bba2:	f7fc fbb5 	bl	8008310 <GUI_ALLOC_UnlockH>
 800bba6:	f000 f85f 	bl	800bc68 <LCD_UpdateColorIndices>
 800bbaa:	f000 fc5d 	bl	800c468 <LCD_SetClipRectMax>
 800bbae:	4630      	mov	r0, r6
 800bbb0:	b003      	add	sp, #12
 800bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb4:	200001b0 	.word	0x200001b0

0800bbb8 <GUI_MEMDEV_CopyToLCDAt>:
 800bbb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	4615      	mov	r5, r2
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d041      	beq.n	800bc4c <GUI_MEMDEV_CopyToLCDAt+0x94>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f001 f87f 	bl	800cccc <GUI_SetDrawMode>
 800bbce:	4b21      	ldr	r3, [pc, #132]	; (800bc54 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800bbda:	f7fc fb8b 	bl	80082f4 <GUI_ALLOC_LockH>
 800bbde:	6803      	ldr	r3, [r0, #0]
 800bbe0:	9001      	str	r0, [sp, #4]
 800bbe2:	6998      	ldr	r0, [r3, #24]
 800bbe4:	f001 f8ba 	bl	800cd5c <GUI_SelectLayer>
 800bbe8:	4b1b      	ldr	r3, [pc, #108]	; (800bc58 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800bbea:	429c      	cmp	r4, r3
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	bf04      	itt	eq
 800bbf0:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800bbf4:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800bbf8:	891a      	ldrh	r2, [r3, #8]
 800bbfa:	895b      	ldrh	r3, [r3, #10]
 800bbfc:	f8ad 4008 	strh.w	r4, [sp, #8]
 800bc00:	3a01      	subs	r2, #1
 800bc02:	3b01      	subs	r3, #1
 800bc04:	4422      	add	r2, r4
 800bc06:	442b      	add	r3, r5
 800bc08:	4681      	mov	r9, r0
 800bc0a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800bc0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bc12:	f8ad 500a 	strh.w	r5, [sp, #10]
 800bc16:	f7fe f9e1 	bl	8009fdc <WM_Activate>
 800bc1a:	a801      	add	r0, sp, #4
 800bc1c:	f7fc fb78 	bl	8008310 <GUI_ALLOC_UnlockH>
 800bc20:	a802      	add	r0, sp, #8
 800bc22:	f7fe f807 	bl	8009c34 <WM__InitIVRSearch>
 800bc26:	b948      	cbnz	r0, 800bc3c <GUI_MEMDEV_CopyToLCDAt+0x84>
 800bc28:	4648      	mov	r0, r9
 800bc2a:	f001 f897 	bl	800cd5c <GUI_SelectLayer>
 800bc2e:	4640      	mov	r0, r8
 800bc30:	f7ff ff9c 	bl	800bb6c <GUI_MEMDEV_Select>
 800bc34:	4638      	mov	r0, r7
 800bc36:	f001 f849 	bl	800cccc <GUI_SetDrawMode>
 800bc3a:	e007      	b.n	800bc4c <GUI_MEMDEV_CopyToLCDAt+0x94>
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4621      	mov	r1, r4
 800bc40:	462a      	mov	r2, r5
 800bc42:	f001 fbfb 	bl	800d43c <GUI_MEMDEV__WriteToActiveOpaque>
 800bc46:	f7fd ff33 	bl	8009ab0 <WM__GetNextIVR>
 800bc4a:	e7ec      	b.n	800bc26 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800bc4c:	b005      	add	sp, #20
 800bc4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc52:	bf00      	nop
 800bc54:	200001b0 	.word	0x200001b0
 800bc58:	fffff001 	.word	0xfffff001

0800bc5c <GUI_MEMDEV_CopyToLCD>:
 800bc5c:	4901      	ldr	r1, [pc, #4]	; (800bc64 <GUI_MEMDEV_CopyToLCD+0x8>)
 800bc5e:	460a      	mov	r2, r1
 800bc60:	f7ff bfaa 	b.w	800bbb8 <GUI_MEMDEV_CopyToLCDAt>
 800bc64:	fffff001 	.word	0xfffff001

0800bc68 <LCD_UpdateColorIndices>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	4c07      	ldr	r4, [pc, #28]	; (800bc88 <LCD_UpdateColorIndices+0x20>)
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc70:	f000 fc54 	bl	800c51c <LCD_Color2Index>
 800bc74:	f000 fc72 	bl	800c55c <LCD_SetColorIndex>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bc7c:	f000 fc4e 	bl	800c51c <LCD_Color2Index>
 800bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc84:	f000 bc86 	b.w	800c594 <LCD_SetBkColorIndex>
 800bc88:	200001b0 	.word	0x200001b0

0800bc8c <LCD_SetClipRectEx>:
 800bc8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc8e:	4c09      	ldr	r4, [pc, #36]	; (800bcb4 <LCD_SetClipRectEx+0x28>)
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	7c5a      	ldrb	r2, [r3, #17]
 800bc94:	4b08      	ldr	r3, [pc, #32]	; (800bcb8 <LCD_SetClipRectEx+0x2c>)
 800bc96:	4605      	mov	r5, r0
 800bc98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc9c:	68c2      	ldr	r2, [r0, #12]
 800bc9e:	4669      	mov	r1, sp
 800bca0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bca2:	4790      	blx	r2
 800bca4:	6820      	ldr	r0, [r4, #0]
 800bca6:	4629      	mov	r1, r5
 800bca8:	466a      	mov	r2, sp
 800bcaa:	3008      	adds	r0, #8
 800bcac:	f000 fd1a 	bl	800c6e4 <GUI__IntersectRects>
 800bcb0:	b003      	add	sp, #12
 800bcb2:	bd30      	pop	{r4, r5, pc}
 800bcb4:	200001b0 	.word	0x200001b0
 800bcb8:	2001af14 	.word	0x2001af14

0800bcbc <_GetDevProp>:
 800bcbc:	2801      	cmp	r0, #1
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	dc08      	bgt.n	800bcd6 <_GetDevProp+0x1a>
 800bcc4:	f7fb fdbc 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800bcc8:	b120      	cbz	r0, 800bcd4 <_GetDevProp+0x18>
 800bcca:	68c3      	ldr	r3, [r0, #12]
 800bccc:	4621      	mov	r1, r4
 800bcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd0:	4798      	blx	r3
 800bcd2:	bd10      	pop	{r4, pc}
 800bcd4:	bd10      	pop	{r4, pc}
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	bd10      	pop	{r4, pc}

0800bcda <_GetMaxValue>:
 800bcda:	b538      	push	{r3, r4, r5, lr}
 800bcdc:	4604      	mov	r4, r0
 800bcde:	4621      	mov	r1, r4
 800bce0:	2001      	movs	r0, #1
 800bce2:	f7ff ffeb 	bl	800bcbc <_GetDevProp>
 800bce6:	4621      	mov	r1, r4
 800bce8:	4605      	mov	r5, r0
 800bcea:	2000      	movs	r0, #0
 800bcec:	f7ff ffe6 	bl	800bcbc <_GetDevProp>
 800bcf0:	42a8      	cmp	r0, r5
 800bcf2:	bfb8      	it	lt
 800bcf4:	4628      	movlt	r0, r5
 800bcf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}

0800bcfc <LCD_GetXSizeEx>:
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	f7ff bfdd 	b.w	800bcbc <_GetDevProp>

0800bd02 <LCD_GetYSizeEx>:
 800bd02:	2102      	movs	r1, #2
 800bd04:	f7ff bfda 	b.w	800bcbc <_GetDevProp>

0800bd08 <LCD_GetVXSizeEx>:
 800bd08:	2103      	movs	r1, #3
 800bd0a:	f7ff bfd7 	b.w	800bcbc <_GetDevProp>

0800bd0e <LCD_GetVYSizeEx>:
 800bd0e:	2104      	movs	r1, #4
 800bd10:	f7ff bfd4 	b.w	800bcbc <_GetDevProp>

0800bd14 <LCD_GetBitsPerPixelEx>:
 800bd14:	2108      	movs	r1, #8
 800bd16:	f7ff bfd1 	b.w	800bcbc <_GetDevProp>

0800bd1a <LCD_GetNumColorsEx>:
 800bd1a:	2109      	movs	r1, #9
 800bd1c:	f7ff bfce 	b.w	800bcbc <_GetDevProp>

0800bd20 <LCD_GetXSize>:
 800bd20:	4b02      	ldr	r3, [pc, #8]	; (800bd2c <LCD_GetXSize+0xc>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	7c58      	ldrb	r0, [r3, #17]
 800bd26:	f7ff bfe9 	b.w	800bcfc <LCD_GetXSizeEx>
 800bd2a:	bf00      	nop
 800bd2c:	200001b0 	.word	0x200001b0

0800bd30 <LCD_GetYSize>:
 800bd30:	4b02      	ldr	r3, [pc, #8]	; (800bd3c <LCD_GetYSize+0xc>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	7c58      	ldrb	r0, [r3, #17]
 800bd36:	f7ff bfe4 	b.w	800bd02 <LCD_GetYSizeEx>
 800bd3a:	bf00      	nop
 800bd3c:	200001b0 	.word	0x200001b0

0800bd40 <LCD_GetNumColors>:
 800bd40:	4b02      	ldr	r3, [pc, #8]	; (800bd4c <LCD_GetNumColors+0xc>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	7c58      	ldrb	r0, [r3, #17]
 800bd46:	f7ff bfe8 	b.w	800bd1a <LCD_GetNumColorsEx>
 800bd4a:	bf00      	nop
 800bd4c:	200001b0 	.word	0x200001b0

0800bd50 <GUI_GetBitsPerPixelEx>:
 800bd50:	b508      	push	{r3, lr}
 800bd52:	4b04      	ldr	r3, [pc, #16]	; (800bd64 <GUI_GetBitsPerPixelEx+0x14>)
 800bd54:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bd58:	68c3      	ldr	r3, [r0, #12]
 800bd5a:	2108      	movs	r1, #8
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	4798      	blx	r3
 800bd60:	bd08      	pop	{r3, pc}
 800bd62:	bf00      	nop
 800bd64:	2001af14 	.word	0x2001af14

0800bd68 <LCD_GetPaletteEx>:
 800bd68:	b508      	push	{r3, lr}
 800bd6a:	f7fb fd69 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800bd6e:	b120      	cbz	r0, 800bd7a <LCD_GetPaletteEx+0x12>
 800bd70:	68c3      	ldr	r3, [r0, #12]
 800bd72:	2102      	movs	r1, #2
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	4798      	blx	r3
 800bd78:	bd08      	pop	{r3, pc}
 800bd7a:	bd08      	pop	{r3, pc}

0800bd7c <LCD_GetPalette>:
 800bd7c:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <LCD_GetPalette+0xc>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	7c58      	ldrb	r0, [r3, #17]
 800bd82:	f7ff bff1 	b.w	800bd68 <LCD_GetPaletteEx>
 800bd86:	bf00      	nop
 800bd88:	200001b0 	.word	0x200001b0

0800bd8c <GUI_GetpfIndex2ColorEx>:
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <GUI_GetpfIndex2ColorEx+0xc>)
 800bd8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	6858      	ldr	r0, [r3, #4]
 800bd96:	4770      	bx	lr
 800bd98:	2001af14 	.word	0x2001af14

0800bd9c <GUI_GetpfColor2IndexEx>:
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <GUI_GetpfColor2IndexEx+0xc>)
 800bd9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	6818      	ldr	r0, [r3, #0]
 800bda6:	4770      	bx	lr
 800bda8:	2001af14 	.word	0x2001af14

0800bdac <LCD_GetXSizeMax>:
 800bdac:	2001      	movs	r0, #1
 800bdae:	f7ff bf94 	b.w	800bcda <_GetMaxValue>

0800bdb2 <LCD_GetYSizeMax>:
 800bdb2:	2002      	movs	r0, #2
 800bdb4:	f7ff bf91 	b.w	800bcda <_GetMaxValue>

0800bdb8 <LCD_GetVXSizeMax>:
 800bdb8:	2003      	movs	r0, #3
 800bdba:	f7ff bf8e 	b.w	800bcda <_GetMaxValue>
	...

0800bdc0 <LCD_SetDisplaySize>:
 800bdc0:	4b02      	ldr	r3, [pc, #8]	; (800bdcc <LCD_SetDisplaySize+0xc>)
 800bdc2:	6018      	str	r0, [r3, #0]
 800bdc4:	4b02      	ldr	r3, [pc, #8]	; (800bdd0 <LCD_SetDisplaySize+0x10>)
 800bdc6:	6019      	str	r1, [r3, #0]
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20019494 	.word	0x20019494
 800bdd0:	20019490 	.word	0x20019490

0800bdd4 <LCD_GetXSizeDisplay>:
 800bdd4:	4b01      	ldr	r3, [pc, #4]	; (800bddc <LCD_GetXSizeDisplay+0x8>)
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	20019494 	.word	0x20019494

0800bde0 <LCD_GetYSizeDisplay>:
 800bde0:	4b01      	ldr	r3, [pc, #4]	; (800bde8 <LCD_GetYSizeDisplay+0x8>)
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	20019490 	.word	0x20019490

0800bdec <LCD__GetBPP>:
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d03b      	beq.n	800be68 <LCD__GetBPP+0x7c>
 800bdf0:	f030 0301 	bics.w	r3, r0, #1
 800bdf4:	d029      	beq.n	800be4a <LCD__GetBPP+0x5e>
 800bdf6:	f030 0303 	bics.w	r3, r0, #3
 800bdfa:	d028      	beq.n	800be4e <LCD__GetBPP+0x62>
 800bdfc:	f030 0307 	bics.w	r3, r0, #7
 800be00:	d027      	beq.n	800be52 <LCD__GetBPP+0x66>
 800be02:	f030 030f 	bics.w	r3, r0, #15
 800be06:	d026      	beq.n	800be56 <LCD__GetBPP+0x6a>
 800be08:	f030 031f 	bics.w	r3, r0, #31
 800be0c:	d025      	beq.n	800be5a <LCD__GetBPP+0x6e>
 800be0e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800be12:	d024      	beq.n	800be5e <LCD__GetBPP+0x72>
 800be14:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800be18:	f023 0301 	bic.w	r3, r3, #1
 800be1c:	b30b      	cbz	r3, 800be62 <LCD__GetBPP+0x76>
 800be1e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800be22:	f023 030f 	bic.w	r3, r3, #15
 800be26:	b1e3      	cbz	r3, 800be62 <LCD__GetBPP+0x76>
 800be28:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800be2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be30:	b1bb      	cbz	r3, 800be62 <LCD__GetBPP+0x76>
 800be32:	0c03      	lsrs	r3, r0, #16
 800be34:	041b      	lsls	r3, r3, #16
 800be36:	b1a3      	cbz	r3, 800be62 <LCD__GetBPP+0x76>
 800be38:	0c83      	lsrs	r3, r0, #18
 800be3a:	049b      	lsls	r3, r3, #18
 800be3c:	b19b      	cbz	r3, 800be66 <LCD__GetBPP+0x7a>
 800be3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be42:	bf0c      	ite	eq
 800be44:	2018      	moveq	r0, #24
 800be46:	2020      	movne	r0, #32
 800be48:	4770      	bx	lr
 800be4a:	2001      	movs	r0, #1
 800be4c:	4770      	bx	lr
 800be4e:	2002      	movs	r0, #2
 800be50:	4770      	bx	lr
 800be52:	2003      	movs	r0, #3
 800be54:	4770      	bx	lr
 800be56:	2004      	movs	r0, #4
 800be58:	4770      	bx	lr
 800be5a:	2005      	movs	r0, #5
 800be5c:	4770      	bx	lr
 800be5e:	2008      	movs	r0, #8
 800be60:	4770      	bx	lr
 800be62:	2010      	movs	r0, #16
 800be64:	4770      	bx	lr
 800be66:	2012      	movs	r0, #18
 800be68:	4770      	bx	lr

0800be6a <LCD__GetBPPDevice>:
 800be6a:	b508      	push	{r3, lr}
 800be6c:	f7ff ffbe 	bl	800bdec <LCD__GetBPP>
 800be70:	2801      	cmp	r0, #1
 800be72:	d00f      	beq.n	800be94 <LCD__GetBPPDevice+0x2a>
 800be74:	1e83      	subs	r3, r0, #2
 800be76:	2b06      	cmp	r3, #6
 800be78:	d909      	bls.n	800be8e <LCD__GetBPPDevice+0x24>
 800be7a:	f1a0 0309 	sub.w	r3, r0, #9
 800be7e:	2b07      	cmp	r3, #7
 800be80:	d907      	bls.n	800be92 <LCD__GetBPPDevice+0x28>
 800be82:	3811      	subs	r0, #17
 800be84:	2810      	cmp	r0, #16
 800be86:	bf34      	ite	cc
 800be88:	2020      	movcc	r0, #32
 800be8a:	2000      	movcs	r0, #0
 800be8c:	bd08      	pop	{r3, pc}
 800be8e:	2008      	movs	r0, #8
 800be90:	bd08      	pop	{r3, pc}
 800be92:	2010      	movs	r0, #16
 800be94:	bd08      	pop	{r3, pc}
	...

0800be98 <_OnExit>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4c03      	ldr	r4, [pc, #12]	; (800bea8 <_OnExit+0x10>)
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	f7fc fa15 	bl	80082cc <GUI_ALLOC_FreeFixedBlock>
 800bea2:	2300      	movs	r3, #0
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	bd10      	pop	{r4, pc}
 800bea8:	2001b068 	.word	0x2001b068

0800beac <LCD_InitColors>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4d09      	ldr	r5, [pc, #36]	; (800bed4 <LCD_InitColors+0x28>)
 800beb0:	682c      	ldr	r4, [r5, #0]
 800beb2:	b95c      	cbnz	r4, 800becc <LCD_InitColors+0x20>
 800beb4:	4b08      	ldr	r3, [pc, #32]	; (800bed8 <LCD_InitColors+0x2c>)
 800beb6:	6818      	ldr	r0, [r3, #0]
 800beb8:	0080      	lsls	r0, r0, #2
 800beba:	f7fc fb67 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 800bebe:	6028      	str	r0, [r5, #0]
 800bec0:	b130      	cbz	r0, 800bed0 <LCD_InitColors+0x24>
 800bec2:	4806      	ldr	r0, [pc, #24]	; (800bedc <LCD_InitColors+0x30>)
 800bec4:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <LCD_InitColors+0x34>)
 800bec6:	6003      	str	r3, [r0, #0]
 800bec8:	f7fb fdf4 	bl	8007ab4 <GUI__RegisterExit>
 800becc:	2000      	movs	r0, #0
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	2001      	movs	r0, #1
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	2001b068 	.word	0x2001b068
 800bed8:	200001c4 	.word	0x200001c4
 800bedc:	20019498 	.word	0x20019498
 800bee0:	0800be99 	.word	0x0800be99

0800bee4 <LCD_InitLUT>:
 800bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee8:	f002 f9ac 	bl	800e244 <LCD_GetNumLayers>
 800beec:	2400      	movs	r4, #0
 800beee:	4680      	mov	r8, r0
 800bef0:	4544      	cmp	r4, r8
 800bef2:	da2c      	bge.n	800bf4e <LCD_InitLUT+0x6a>
 800bef4:	4620      	mov	r0, r4
 800bef6:	f7fb fca3 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800befa:	b330      	cbz	r0, 800bf4a <LCD_InitLUT+0x66>
 800befc:	4e15      	ldr	r6, [pc, #84]	; (800bf54 <LCD_InitLUT+0x70>)
 800befe:	6833      	ldr	r3, [r6, #0]
 800bf00:	4620      	mov	r0, r4
 800bf02:	f893 9011 	ldrb.w	r9, [r3, #17]
 800bf06:	745c      	strb	r4, [r3, #17]
 800bf08:	f7ff ff04 	bl	800bd14 <LCD_GetBitsPerPixelEx>
 800bf0c:	2808      	cmp	r0, #8
 800bf0e:	dd03      	ble.n	800bf18 <LCD_InitLUT+0x34>
 800bf10:	6833      	ldr	r3, [r6, #0]
 800bf12:	f883 9011 	strb.w	r9, [r3, #17]
 800bf16:	e018      	b.n	800bf4a <LCD_InitLUT+0x66>
 800bf18:	4b0f      	ldr	r3, [pc, #60]	; (800bf58 <LCD_InitLUT+0x74>)
 800bf1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	4b0e      	ldr	r3, [pc, #56]	; (800bf5c <LCD_InitLUT+0x78>)
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d0f4      	beq.n	800bf10 <LCD_InitLUT+0x2c>
 800bf26:	4620      	mov	r0, r4
 800bf28:	f7ff fef7 	bl	800bd1a <LCD_GetNumColorsEx>
 800bf2c:	2500      	movs	r5, #0
 800bf2e:	4682      	mov	sl, r0
 800bf30:	4555      	cmp	r5, sl
 800bf32:	daed      	bge.n	800bf10 <LCD_InitLUT+0x2c>
 800bf34:	b2ef      	uxtb	r7, r5
 800bf36:	4638      	mov	r0, r7
 800bf38:	f000 fb00 	bl	800c53c <LCD_Index2Color>
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4602      	mov	r2, r0
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7fa febf 	bl	8006cc4 <LCD_SetLUTEntryEx>
 800bf46:	3501      	adds	r5, #1
 800bf48:	e7f2      	b.n	800bf30 <LCD_InitLUT+0x4c>
 800bf4a:	3401      	adds	r4, #1
 800bf4c:	e7d0      	b.n	800bef0 <LCD_InitLUT+0xc>
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	bf00      	nop
 800bf54:	200001b0 	.word	0x200001b0
 800bf58:	2001af14 	.word	0x2001af14
 800bf5c:	0801420c 	.word	0x0801420c

0800bf60 <_SetDrawMode>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4b08      	ldr	r3, [pc, #32]	; (800bf84 <_SetDrawMode+0x24>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	7c1a      	ldrb	r2, [r3, #16]
 800bf68:	ea80 0102 	eor.w	r1, r0, r2
 800bf6c:	0749      	lsls	r1, r1, #29
 800bf6e:	d505      	bpl.n	800bf7c <_SetDrawMode+0x1c>
 800bf70:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bf72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bf74:	6826      	ldr	r6, [r4, #0]
 800bf76:	680d      	ldr	r5, [r1, #0]
 800bf78:	6025      	str	r5, [r4, #0]
 800bf7a:	600e      	str	r6, [r1, #0]
 800bf7c:	7418      	strb	r0, [r3, #16]
 800bf7e:	4610      	mov	r0, r2
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	bf00      	nop
 800bf84:	200001b0 	.word	0x200001b0

0800bf88 <LCD_SetDrawMode>:
 800bf88:	b508      	push	{r3, lr}
 800bf8a:	4b02      	ldr	r3, [pc, #8]	; (800bf94 <LCD_SetDrawMode+0xc>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	4798      	blx	r3
 800bf92:	bd08      	pop	{r3, pc}
 800bf94:	200001c8 	.word	0x200001c8

0800bf98 <LCD_DrawPixel>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4b14      	ldr	r3, [pc, #80]	; (800bfec <LCD_DrawPixel+0x54>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	460a      	mov	r2, r1
 800bfa0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800bfa4:	428a      	cmp	r2, r1
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	db1e      	blt.n	800bfe8 <LCD_DrawPixel+0x50>
 800bfaa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800bfae:	428a      	cmp	r2, r1
 800bfb0:	dc1a      	bgt.n	800bfe8 <LCD_DrawPixel+0x50>
 800bfb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800bfb6:	4288      	cmp	r0, r1
 800bfb8:	db16      	blt.n	800bfe8 <LCD_DrawPixel+0x50>
 800bfba:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800bfbe:	4288      	cmp	r0, r1
 800bfc0:	dc12      	bgt.n	800bfe8 <LCD_DrawPixel+0x50>
 800bfc2:	7c19      	ldrb	r1, [r3, #16]
 800bfc4:	7c58      	ldrb	r0, [r3, #17]
 800bfc6:	f011 0f01 	tst.w	r1, #1
 800bfca:	4909      	ldr	r1, [pc, #36]	; (800bff0 <LCD_DrawPixel+0x58>)
 800bfcc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800bfd0:	d004      	beq.n	800bfdc <LCD_DrawPixel+0x44>
 800bfd2:	68c3      	ldr	r3, [r0, #12]
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	4798      	blx	r3
 800bfda:	bd38      	pop	{r3, r4, r5, pc}
 800bfdc:	68c1      	ldr	r1, [r0, #12]
 800bfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe0:	698d      	ldr	r5, [r1, #24]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	47a8      	blx	r5
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	bf00      	nop
 800bfec:	200001b0 	.word	0x200001b0
 800bff0:	2001af14 	.word	0x2001af14

0800bff4 <LCD_DrawHLine>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <LCD_DrawHLine+0x44>)
 800bff8:	681c      	ldr	r4, [r3, #0]
 800bffa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800bffe:	4299      	cmp	r1, r3
 800c000:	460d      	mov	r5, r1
 800c002:	db17      	blt.n	800c034 <LCD_DrawHLine+0x40>
 800c004:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c008:	4299      	cmp	r1, r3
 800c00a:	dc13      	bgt.n	800c034 <LCD_DrawHLine+0x40>
 800c00c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c014:	4288      	cmp	r0, r1
 800c016:	bfa8      	it	ge
 800c018:	4601      	movge	r1, r0
 800c01a:	429a      	cmp	r2, r3
 800c01c:	bfb8      	it	lt
 800c01e:	4613      	movlt	r3, r2
 800c020:	428b      	cmp	r3, r1
 800c022:	db07      	blt.n	800c034 <LCD_DrawHLine+0x40>
 800c024:	7c60      	ldrb	r0, [r4, #17]
 800c026:	4a05      	ldr	r2, [pc, #20]	; (800c03c <LCD_DrawHLine+0x48>)
 800c028:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800c02c:	68c2      	ldr	r2, [r0, #12]
 800c02e:	6894      	ldr	r4, [r2, #8]
 800c030:	462a      	mov	r2, r5
 800c032:	47a0      	blx	r4
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	bf00      	nop
 800c038:	200001b0 	.word	0x200001b0
 800c03c:	2001af14 	.word	0x2001af14

0800c040 <LCD_FillRect>:
 800c040:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c042:	460e      	mov	r6, r1
 800c044:	4912      	ldr	r1, [pc, #72]	; (800c090 <LCD_FillRect+0x50>)
 800c046:	680c      	ldr	r4, [r1, #0]
 800c048:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800c04c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c050:	4288      	cmp	r0, r1
 800c052:	bfa8      	it	ge
 800c054:	4601      	movge	r1, r0
 800c056:	42aa      	cmp	r2, r5
 800c058:	bfb8      	it	lt
 800c05a:	4615      	movlt	r5, r2
 800c05c:	428d      	cmp	r5, r1
 800c05e:	db14      	blt.n	800c08a <LCD_FillRect+0x4a>
 800c060:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c064:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800c068:	4296      	cmp	r6, r2
 800c06a:	bfa8      	it	ge
 800c06c:	4632      	movge	r2, r6
 800c06e:	4283      	cmp	r3, r0
 800c070:	bfa8      	it	ge
 800c072:	4603      	movge	r3, r0
 800c074:	4293      	cmp	r3, r2
 800c076:	db08      	blt.n	800c08a <LCD_FillRect+0x4a>
 800c078:	7c64      	ldrb	r4, [r4, #17]
 800c07a:	4806      	ldr	r0, [pc, #24]	; (800c094 <LCD_FillRect+0x54>)
 800c07c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c080:	68c4      	ldr	r4, [r0, #12]
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	6924      	ldr	r4, [r4, #16]
 800c086:	462b      	mov	r3, r5
 800c088:	47a0      	blx	r4
 800c08a:	b002      	add	sp, #8
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	bf00      	nop
 800c090:	200001b0 	.word	0x200001b0
 800c094:	2001af14 	.word	0x2001af14

0800c098 <LCD__DrawBitmap_1bpp>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800c24c <LCD__DrawBitmap_1bpp+0x1b4>
 800c0a0:	b08f      	sub	sp, #60	; 0x3c
 800c0a2:	f8dc c000 	ldr.w	ip, [ip]
 800c0a6:	9009      	str	r0, [sp, #36]	; 0x24
 800c0a8:	460e      	mov	r6, r1
 800c0aa:	4615      	mov	r5, r2
 800c0ac:	469b      	mov	fp, r3
 800c0ae:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c0b0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c0b4:	f1bc 0f00 	cmp.w	ip, #0
 800c0b8:	d00d      	beq.n	800c0d6 <LCD__DrawBitmap_1bpp+0x3e>
 800c0ba:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c0bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c0be:	9500      	str	r5, [sp, #0]
 800c0c0:	9601      	str	r6, [sp, #4]
 800c0c2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c0c4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c0c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c0c8:	9702      	str	r7, [sp, #8]
 800c0ca:	9503      	str	r5, [sp, #12]
 800c0cc:	9404      	str	r4, [sp, #16]
 800c0ce:	9605      	str	r6, [sp, #20]
 800c0d0:	f8dc 4000 	ldr.w	r4, [ip]
 800c0d4:	e053      	b.n	800c17e <LCD__DrawBitmap_1bpp+0xe6>
 800c0d6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c0d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c0da:	ea47 0300 	orr.w	r3, r7, r0
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d14f      	bne.n	800c182 <LCD__DrawBitmap_1bpp+0xea>
 800c0e2:	4b58      	ldr	r3, [pc, #352]	; (800c244 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c0ea:	1a51      	subs	r1, r2, r1
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	dd08      	ble.n	800c102 <LCD__DrawBitmap_1bpp+0x6a>
 800c0f0:	ebc1 030b 	rsb	r3, r1, fp
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f340 80a2 	ble.w	800c23e <LCD__DrawBitmap_1bpp+0x1a6>
 800c0fa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c0fc:	fb07 4401 	mla	r4, r7, r1, r4
 800c100:	e001      	b.n	800c106 <LCD__DrawBitmap_1bpp+0x6e>
 800c102:	465b      	mov	r3, fp
 800c104:	4632      	mov	r2, r6
 800c106:	445e      	add	r6, fp
 800c108:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800c10c:	3e01      	subs	r6, #1
 800c10e:	1a76      	subs	r6, r6, r1
 800c110:	2e00      	cmp	r6, #0
 800c112:	dd03      	ble.n	800c11c <LCD__DrawBitmap_1bpp+0x84>
 800c114:	1b9b      	subs	r3, r3, r6
 800c116:	2b00      	cmp	r3, #0
 800c118:	f340 8091 	ble.w	800c23e <LCD__DrawBitmap_1bpp+0x1a6>
 800c11c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c11e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800c122:	4429      	add	r1, r5
 800c124:	3901      	subs	r1, #1
 800c126:	1b89      	subs	r1, r1, r6
 800c128:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c12a:	2900      	cmp	r1, #0
 800c12c:	bfc8      	it	gt
 800c12e:	ebc1 0505 	rsbgt	r5, r1, r5
 800c132:	ebc8 0106 	rsb	r1, r8, r6
 800c136:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800c13a:	42b1      	cmp	r1, r6
 800c13c:	da0c      	bge.n	800c158 <LCD__DrawBitmap_1bpp+0xc0>
 800c13e:	ebc1 0c06 	rsb	ip, r1, r6
 800c142:	eb08 070c 	add.w	r7, r8, ip
 800c146:	1b8e      	subs	r6, r1, r6
 800c148:	f02c 0c07 	bic.w	ip, ip, #7
 800c14c:	4435      	add	r5, r6
 800c14e:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800c152:	4461      	add	r1, ip
 800c154:	f007 0807 	and.w	r8, r7, #7
 800c158:	2d00      	cmp	r5, #0
 800c15a:	dd70      	ble.n	800c23e <LCD__DrawBitmap_1bpp+0x1a6>
 800c15c:	7c46      	ldrb	r6, [r0, #17]
 800c15e:	483a      	ldr	r0, [pc, #232]	; (800c248 <LCD__DrawBitmap_1bpp+0x1b0>)
 800c160:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c162:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800c166:	68c6      	ldr	r6, [r0, #12]
 800c168:	9701      	str	r7, [sp, #4]
 800c16a:	9403      	str	r4, [sp, #12]
 800c16c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c16e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	9702      	str	r7, [sp, #8]
 800c174:	f8cd 8010 	str.w	r8, [sp, #16]
 800c178:	9405      	str	r4, [sp, #20]
 800c17a:	6874      	ldr	r4, [r6, #4]
 800c17c:	462b      	mov	r3, r5
 800c17e:	47a0      	blx	r4
 800c180:	e05d      	b.n	800c23e <LCD__DrawBitmap_1bpp+0x1a6>
 800c182:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c184:	f1c7 0708 	rsb	r7, r7, #8
 800c188:	970c      	str	r7, [sp, #48]	; 0x30
 800c18a:	4667      	mov	r7, ip
 800c18c:	45dc      	cmp	ip, fp
 800c18e:	da56      	bge.n	800c23e <LCD__DrawBitmap_1bpp+0x1a6>
 800c190:	4b2c      	ldr	r3, [pc, #176]	; (800c244 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c192:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4430      	add	r0, r6
 800c198:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c19c:	900a      	str	r0, [sp, #40]	; 0x28
 800c19e:	1e41      	subs	r1, r0, #1
 800c1a0:	4291      	cmp	r1, r2
 800c1a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800c1a4:	db45      	blt.n	800c232 <LCD__DrawBitmap_1bpp+0x19a>
 800c1a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	dc41      	bgt.n	800c232 <LCD__DrawBitmap_1bpp+0x19a>
 800c1ae:	f04f 0800 	mov.w	r8, #0
 800c1b2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c1b6:	9408      	str	r4, [sp, #32]
 800c1b8:	46c2      	mov	sl, r8
 800c1ba:	45aa      	cmp	sl, r5
 800c1bc:	da39      	bge.n	800c232 <LCD__DrawBitmap_1bpp+0x19a>
 800c1be:	f1b8 0f00 	cmp.w	r8, #0
 800c1c2:	d105      	bne.n	800c1d0 <LCD__DrawBitmap_1bpp+0x138>
 800c1c4:	9a08      	ldr	r2, [sp, #32]
 800c1c6:	7817      	ldrb	r7, [r2, #0]
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	9208      	str	r2, [sp, #32]
 800c1cc:	f04f 0808 	mov.w	r8, #8
 800c1d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c1d4:	4a1b      	ldr	r2, [pc, #108]	; (800c244 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c1d6:	fa47 f300 	asr.w	r3, r7, r0
 800c1da:	ebc1 0808 	rsb	r8, r1, r8
 800c1de:	408f      	lsls	r7, r1
 800c1e0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c1e4:	b2ff      	uxtb	r7, r7
 800c1e6:	d103      	bne.n	800c1f0 <LCD__DrawBitmap_1bpp+0x158>
 800c1e8:	6810      	ldr	r0, [r2, #0]
 800c1ea:	7c00      	ldrb	r0, [r0, #16]
 800c1ec:	0780      	lsls	r0, r0, #30
 800c1ee:	d41b      	bmi.n	800c228 <LCD__DrawBitmap_1bpp+0x190>
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c1f4:	6810      	ldr	r0, [r2, #0]
 800c1f6:	900d      	str	r0, [sp, #52]	; 0x34
 800c1f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c1fa:	b110      	cbz	r0, 800c202 <LCD__DrawBitmap_1bpp+0x16a>
 800c1fc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c200:	e000      	b.n	800c204 <LCD__DrawBitmap_1bpp+0x16c>
 800c202:	b2db      	uxtb	r3, r3
 800c204:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	1e4a      	subs	r2, r1, #1
 800c20a:	444a      	add	r2, r9
 800c20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c20e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c212:	4648      	mov	r0, r9
 800c214:	4631      	mov	r1, r6
 800c216:	f7ff ff13 	bl	800c040 <LCD_FillRect>
 800c21a:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <LCD__DrawBitmap_1bpp+0x1ac>)
 800c21c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c22a:	f10a 0a01 	add.w	sl, sl, #1
 800c22e:	4499      	add	r9, r3
 800c230:	e7c3      	b.n	800c1ba <LCD__DrawBitmap_1bpp+0x122>
 800c232:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c234:	f10c 0c01 	add.w	ip, ip, #1
 800c238:	4434      	add	r4, r6
 800c23a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c23c:	e7a6      	b.n	800c18c <LCD__DrawBitmap_1bpp+0xf4>
 800c23e:	b00f      	add	sp, #60	; 0x3c
 800c240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c244:	200001b0 	.word	0x200001b0
 800c248:	2001af14 	.word	0x2001af14
 800c24c:	2001aee8 	.word	0x2001aee8

0800c250 <LCD_DrawBitmap>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800c464 <LCD_DrawBitmap+0x214>
 800c258:	b091      	sub	sp, #68	; 0x44
 800c25a:	f8dc 9000 	ldr.w	r9, [ip]
 800c25e:	9207      	str	r2, [sp, #28]
 800c260:	4605      	mov	r5, r0
 800c262:	4688      	mov	r8, r1
 800c264:	469b      	mov	fp, r3
 800c266:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c268:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c26a:	f1b9 0f00 	cmp.w	r9, #0
 800c26e:	d00c      	beq.n	800c28a <LCD_DrawBitmap+0x3a>
 800c270:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c272:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c274:	9500      	str	r5, [sp, #0]
 800c276:	9701      	str	r7, [sp, #4]
 800c278:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c27a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c27c:	9602      	str	r6, [sp, #8]
 800c27e:	9503      	str	r5, [sp, #12]
 800c280:	9404      	str	r4, [sp, #16]
 800c282:	9705      	str	r7, [sp, #20]
 800c284:	f8d9 4000 	ldr.w	r4, [r9]
 800c288:	e081      	b.n	800c38e <LCD_DrawBitmap+0x13e>
 800c28a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c28c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c28e:	ea47 0300 	orr.w	r3, r7, r0
 800c292:	2b01      	cmp	r3, #1
 800c294:	d17d      	bne.n	800c392 <LCD_DrawBitmap+0x142>
 800c296:	4b71      	ldr	r3, [pc, #452]	; (800c45c <LCD_DrawBitmap+0x20c>)
 800c298:	6818      	ldr	r0, [r3, #0]
 800c29a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c29e:	1a53      	subs	r3, r2, r1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	dd08      	ble.n	800c2b6 <LCD_DrawBitmap+0x66>
 800c2a4:	ebc3 010b 	rsb	r1, r3, fp
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	f340 80d4 	ble.w	800c456 <LCD_DrawBitmap+0x206>
 800c2ae:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c2b0:	fb07 4403 	mla	r4, r7, r3, r4
 800c2b4:	e001      	b.n	800c2ba <LCD_DrawBitmap+0x6a>
 800c2b6:	4659      	mov	r1, fp
 800c2b8:	4642      	mov	r2, r8
 800c2ba:	44d8      	add	r8, fp
 800c2bc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800c2c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2c4:	ebc3 0808 	rsb	r8, r3, r8
 800c2c8:	f1b8 0f00 	cmp.w	r8, #0
 800c2cc:	dd04      	ble.n	800c2d8 <LCD_DrawBitmap+0x88>
 800c2ce:	ebc8 0101 	rsb	r1, r8, r1
 800c2d2:	2900      	cmp	r1, #0
 800c2d4:	f340 80bf 	ble.w	800c456 <LCD_DrawBitmap+0x206>
 800c2d8:	9b07      	ldr	r3, [sp, #28]
 800c2da:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800c2de:	442b      	add	r3, r5
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	ebcc 0303 	rsb	r3, ip, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	dd02      	ble.n	800c2f0 <LCD_DrawBitmap+0xa0>
 800c2ea:	9f07      	ldr	r7, [sp, #28]
 800c2ec:	1aff      	subs	r7, r7, r3
 800c2ee:	9707      	str	r7, [sp, #28]
 800c2f0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800c2f4:	4565      	cmp	r5, ip
 800c2f6:	da33      	bge.n	800c360 <LCD_DrawBitmap+0x110>
 800c2f8:	9f07      	ldr	r7, [sp, #28]
 800c2fa:	ebc5 030c 	rsb	r3, r5, ip
 800c2fe:	1aff      	subs	r7, r7, r3
 800c300:	2e08      	cmp	r6, #8
 800c302:	9707      	str	r7, [sp, #28]
 800c304:	d027      	beq.n	800c356 <LCD_DrawBitmap+0x106>
 800c306:	dc0d      	bgt.n	800c324 <LCD_DrawBitmap+0xd4>
 800c308:	2e02      	cmp	r6, #2
 800c30a:	d014      	beq.n	800c336 <LCD_DrawBitmap+0xe6>
 800c30c:	2e04      	cmp	r6, #4
 800c30e:	d01a      	beq.n	800c346 <LCD_DrawBitmap+0xf6>
 800c310:	2e01      	cmp	r6, #1
 800c312:	d126      	bne.n	800c362 <LCD_DrawBitmap+0x112>
 800c314:	f023 0c07 	bic.w	ip, r3, #7
 800c318:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800c31c:	4465      	add	r5, ip
 800c31e:	f003 0307 	and.w	r3, r3, #7
 800c322:	e01e      	b.n	800c362 <LCD_DrawBitmap+0x112>
 800c324:	2e18      	cmp	r6, #24
 800c326:	d018      	beq.n	800c35a <LCD_DrawBitmap+0x10a>
 800c328:	2e20      	cmp	r6, #32
 800c32a:	d016      	beq.n	800c35a <LCD_DrawBitmap+0x10a>
 800c32c:	2e10      	cmp	r6, #16
 800c32e:	d118      	bne.n	800c362 <LCD_DrawBitmap+0x112>
 800c330:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c334:	e013      	b.n	800c35e <LCD_DrawBitmap+0x10e>
 800c336:	f023 0c03 	bic.w	ip, r3, #3
 800c33a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800c33e:	4465      	add	r5, ip
 800c340:	f003 0303 	and.w	r3, r3, #3
 800c344:	e00d      	b.n	800c362 <LCD_DrawBitmap+0x112>
 800c346:	f023 0c01 	bic.w	ip, r3, #1
 800c34a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800c34e:	4465      	add	r5, ip
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	e005      	b.n	800c362 <LCD_DrawBitmap+0x112>
 800c356:	441c      	add	r4, r3
 800c358:	e001      	b.n	800c35e <LCD_DrawBitmap+0x10e>
 800c35a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c35e:	4665      	mov	r5, ip
 800c360:	2300      	movs	r3, #0
 800c362:	9f07      	ldr	r7, [sp, #28]
 800c364:	2f00      	cmp	r7, #0
 800c366:	dd76      	ble.n	800c456 <LCD_DrawBitmap+0x206>
 800c368:	f890 e011 	ldrb.w	lr, [r0, #17]
 800c36c:	483c      	ldr	r0, [pc, #240]	; (800c460 <LCD_DrawBitmap+0x210>)
 800c36e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c370:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800c374:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c378:	9403      	str	r4, [sp, #12]
 800c37a:	e88d 0042 	stmia.w	sp, {r1, r6}
 800c37e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	9702      	str	r7, [sp, #8]
 800c384:	9405      	str	r4, [sp, #20]
 800c386:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c38a:	9b07      	ldr	r3, [sp, #28]
 800c38c:	4629      	mov	r1, r5
 800c38e:	47a0      	blx	r4
 800c390:	e061      	b.n	800c456 <LCD_DrawBitmap+0x206>
 800c392:	f1c6 0708 	rsb	r7, r6, #8
 800c396:	970e      	str	r7, [sp, #56]	; 0x38
 800c398:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800c39c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c39e:	455f      	cmp	r7, fp
 800c3a0:	da59      	bge.n	800c456 <LCD_DrawBitmap+0x206>
 800c3a2:	4b2e      	ldr	r3, [pc, #184]	; (800c45c <LCD_DrawBitmap+0x20c>)
 800c3a4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4447      	add	r7, r8
 800c3aa:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c3ae:	970c      	str	r7, [sp, #48]	; 0x30
 800c3b0:	3f01      	subs	r7, #1
 800c3b2:	4297      	cmp	r7, r2
 800c3b4:	970d      	str	r7, [sp, #52]	; 0x34
 800c3b6:	db46      	blt.n	800c446 <LCD_DrawBitmap+0x1f6>
 800c3b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c3bc:	4598      	cmp	r8, r3
 800c3be:	dc42      	bgt.n	800c446 <LCD_DrawBitmap+0x1f6>
 800c3c0:	f04f 0a00 	mov.w	sl, #0
 800c3c4:	940b      	str	r4, [sp, #44]	; 0x2c
 800c3c6:	46ac      	mov	ip, r5
 800c3c8:	4657      	mov	r7, sl
 800c3ca:	9807      	ldr	r0, [sp, #28]
 800c3cc:	4287      	cmp	r7, r0
 800c3ce:	da3a      	bge.n	800c446 <LCD_DrawBitmap+0x1f6>
 800c3d0:	f1ba 0f00 	cmp.w	sl, #0
 800c3d4:	d106      	bne.n	800c3e4 <LCD_DrawBitmap+0x194>
 800c3d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c3d8:	f890 9000 	ldrb.w	r9, [r0]
 800c3dc:	3001      	adds	r0, #1
 800c3de:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3e0:	f04f 0a08 	mov.w	sl, #8
 800c3e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c3e6:	4a1d      	ldr	r2, [pc, #116]	; (800c45c <LCD_DrawBitmap+0x20c>)
 800c3e8:	fa49 f301 	asr.w	r3, r9, r1
 800c3ec:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c3f0:	fa09 f906 	lsl.w	r9, r9, r6
 800c3f4:	fa5f f989 	uxtb.w	r9, r9
 800c3f8:	ebc6 0a0a 	rsb	sl, r6, sl
 800c3fc:	d103      	bne.n	800c406 <LCD_DrawBitmap+0x1b6>
 800c3fe:	6810      	ldr	r0, [r2, #0]
 800c400:	7c00      	ldrb	r0, [r0, #16]
 800c402:	0780      	lsls	r0, r0, #30
 800c404:	d41b      	bmi.n	800c43e <LCD_DrawBitmap+0x1ee>
 800c406:	6812      	ldr	r2, [r2, #0]
 800c408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c40a:	6810      	ldr	r0, [r2, #0]
 800c40c:	900f      	str	r0, [sp, #60]	; 0x3c
 800c40e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c410:	b110      	cbz	r0, 800c418 <LCD_DrawBitmap+0x1c8>
 800c412:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c416:	e000      	b.n	800c41a <LCD_DrawBitmap+0x1ca>
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	1e4a      	subs	r2, r1, #1
 800c420:	4462      	add	r2, ip
 800c422:	4660      	mov	r0, ip
 800c424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c426:	f8cd c020 	str.w	ip, [sp, #32]
 800c42a:	4641      	mov	r1, r8
 800c42c:	f7ff fe08 	bl	800c040 <LCD_FillRect>
 800c430:	4b0a      	ldr	r3, [pc, #40]	; (800c45c <LCD_DrawBitmap+0x20c>)
 800c432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c440:	3701      	adds	r7, #1
 800c442:	449c      	add	ip, r3
 800c444:	e7c1      	b.n	800c3ca <LCD_DrawBitmap+0x17a>
 800c446:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c448:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c44c:	3701      	adds	r7, #1
 800c44e:	970a      	str	r7, [sp, #40]	; 0x28
 800c450:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c452:	443c      	add	r4, r7
 800c454:	e7a2      	b.n	800c39c <LCD_DrawBitmap+0x14c>
 800c456:	b011      	add	sp, #68	; 0x44
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	200001b0 	.word	0x200001b0
 800c460:	2001af14 	.word	0x2001af14
 800c464:	2001aee8 	.word	0x2001aee8

0800c468 <LCD_SetClipRectMax>:
 800c468:	b508      	push	{r3, lr}
 800c46a:	4b05      	ldr	r3, [pc, #20]	; (800c480 <LCD_SetClipRectMax+0x18>)
 800c46c:	6819      	ldr	r1, [r3, #0]
 800c46e:	4b05      	ldr	r3, [pc, #20]	; (800c484 <LCD_SetClipRectMax+0x1c>)
 800c470:	7c4a      	ldrb	r2, [r1, #17]
 800c472:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c476:	68c3      	ldr	r3, [r0, #12]
 800c478:	3108      	adds	r1, #8
 800c47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47c:	4798      	blx	r3
 800c47e:	bd08      	pop	{r3, pc}
 800c480:	200001b0 	.word	0x200001b0
 800c484:	2001af14 	.word	0x2001af14

0800c488 <emWin_LCD_Init>:
 800c488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c48a:	f7ff ffed 	bl	800c468 <LCD_SetClipRectMax>
 800c48e:	f7ff fd0d 	bl	800beac <LCD_InitColors>
 800c492:	4604      	mov	r4, r0
 800c494:	2800      	cmp	r0, #0
 800c496:	d13d      	bne.n	800c514 <emWin_LCD_Init+0x8c>
 800c498:	4605      	mov	r5, r0
 800c49a:	4628      	mov	r0, r5
 800c49c:	f7fb f9d0 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800c4a0:	9001      	str	r0, [sp, #4]
 800c4a2:	b148      	cbz	r0, 800c4b8 <emWin_LCD_Init+0x30>
 800c4a4:	68c3      	ldr	r3, [r0, #12]
 800c4a6:	210c      	movs	r1, #12
 800c4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4aa:	a801      	add	r0, sp, #4
 800c4ac:	4798      	blx	r3
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	b370      	cbz	r0, 800c510 <emWin_LCD_Init+0x88>
 800c4b2:	9801      	ldr	r0, [sp, #4]
 800c4b4:	4798      	blx	r3
 800c4b6:	4304      	orrs	r4, r0
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	2d02      	cmp	r5, #2
 800c4bc:	d1ed      	bne.n	800c49a <emWin_LCD_Init+0x12>
 800c4be:	bb4c      	cbnz	r4, 800c514 <emWin_LCD_Init+0x8c>
 800c4c0:	f7ff fd10 	bl	800bee4 <LCD_InitLUT>
 800c4c4:	2401      	movs	r4, #1
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f7fb f9ba 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800c4cc:	9001      	str	r0, [sp, #4]
 800c4ce:	b1d0      	cbz	r0, 800c506 <emWin_LCD_Init+0x7e>
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fc43 	bl	800cd5c <GUI_SelectLayer>
 800c4d6:	2004      	movs	r0, #4
 800c4d8:	f7ff fd56 	bl	800bf88 <LCD_SetDrawMode>
 800c4dc:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	f7ff fdab 	bl	800c040 <LCD_FillRect>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	f7ff fd4c 	bl	800bf88 <LCD_SetDrawMode>
 800c4f0:	a802      	add	r0, sp, #8
 800c4f2:	210e      	movs	r1, #14
 800c4f4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fc:	4798      	blx	r3
 800c4fe:	4603      	mov	r3, r0
 800c500:	b108      	cbz	r0, 800c506 <emWin_LCD_Init+0x7e>
 800c502:	9801      	ldr	r0, [sp, #4]
 800c504:	4798      	blx	r3
 800c506:	f114 34ff 	adds.w	r4, r4, #4294967295
 800c50a:	d2dc      	bcs.n	800c4c6 <emWin_LCD_Init+0x3e>
 800c50c:	2000      	movs	r0, #0
 800c50e:	e002      	b.n	800c516 <emWin_LCD_Init+0x8e>
 800c510:	2001      	movs	r0, #1
 800c512:	e000      	b.n	800c516 <emWin_LCD_Init+0x8e>
 800c514:	4620      	mov	r0, r4
 800c516:	b003      	add	sp, #12
 800c518:	bd30      	pop	{r4, r5, pc}
	...

0800c51c <LCD_Color2Index>:
 800c51c:	b508      	push	{r3, lr}
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <LCD_Color2Index+0x18>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	7c5a      	ldrb	r2, [r3, #17]
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <LCD_Color2Index+0x1c>)
 800c526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4798      	blx	r3
 800c530:	bd08      	pop	{r3, pc}
 800c532:	bf00      	nop
 800c534:	200001b0 	.word	0x200001b0
 800c538:	2001af14 	.word	0x2001af14

0800c53c <LCD_Index2Color>:
 800c53c:	b508      	push	{r3, lr}
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <LCD_Index2Color+0x18>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	7c5a      	ldrb	r2, [r3, #17]
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <LCD_Index2Color+0x1c>)
 800c546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	4798      	blx	r3
 800c550:	bd08      	pop	{r3, pc}
 800c552:	bf00      	nop
 800c554:	200001b0 	.word	0x200001b0
 800c558:	2001af14 	.word	0x2001af14

0800c55c <LCD_SetColorIndex>:
 800c55c:	4b04      	ldr	r3, [pc, #16]	; (800c570 <LCD_SetColorIndex+0x14>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	7c1a      	ldrb	r2, [r3, #16]
 800c562:	0752      	lsls	r2, r2, #29
 800c564:	bf4c      	ite	mi
 800c566:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800c568:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800c56a:	6018      	str	r0, [r3, #0]
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	200001b0 	.word	0x200001b0

0800c574 <_SetColor>:
 800c574:	b508      	push	{r3, lr}
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <_SetColor+0x1c>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c57c:	4281      	cmp	r1, r0
 800c57e:	d006      	beq.n	800c58e <_SetColor+0x1a>
 800c580:	6318      	str	r0, [r3, #48]	; 0x30
 800c582:	f7ff ffcb 	bl	800c51c <LCD_Color2Index>
 800c586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c58a:	f7ff bfe7 	b.w	800c55c <LCD_SetColorIndex>
 800c58e:	bd08      	pop	{r3, pc}
 800c590:	200001b0 	.word	0x200001b0

0800c594 <LCD_SetBkColorIndex>:
 800c594:	4b04      	ldr	r3, [pc, #16]	; (800c5a8 <LCD_SetBkColorIndex+0x14>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	7c1a      	ldrb	r2, [r3, #16]
 800c59a:	0752      	lsls	r2, r2, #29
 800c59c:	bf4c      	ite	mi
 800c59e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800c5a0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800c5a2:	6018      	str	r0, [r3, #0]
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	200001b0 	.word	0x200001b0

0800c5ac <_SetBkColor>:
 800c5ac:	b508      	push	{r3, lr}
 800c5ae:	4b06      	ldr	r3, [pc, #24]	; (800c5c8 <_SetBkColor+0x1c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c5b4:	4281      	cmp	r1, r0
 800c5b6:	d006      	beq.n	800c5c6 <_SetBkColor+0x1a>
 800c5b8:	6358      	str	r0, [r3, #52]	; 0x34
 800c5ba:	f7ff ffaf 	bl	800c51c <LCD_Color2Index>
 800c5be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c5c2:	f7ff bfe7 	b.w	800c594 <LCD_SetBkColorIndex>
 800c5c6:	bd08      	pop	{r3, pc}
 800c5c8:	200001b0 	.word	0x200001b0

0800c5cc <LCD_SetBkColor>:
 800c5cc:	b508      	push	{r3, lr}
 800c5ce:	4b02      	ldr	r3, [pc, #8]	; (800c5d8 <LCD_SetBkColor+0xc>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	4798      	blx	r3
 800c5d6:	bd08      	pop	{r3, pc}
 800c5d8:	200001c8 	.word	0x200001c8

0800c5dc <LCD_SetColor>:
 800c5dc:	b508      	push	{r3, lr}
 800c5de:	4b02      	ldr	r3, [pc, #8]	; (800c5e8 <LCD_SetColor+0xc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4798      	blx	r3
 800c5e6:	bd08      	pop	{r3, pc}
 800c5e8:	200001c8 	.word	0x200001c8

0800c5ec <GUI__ManageCacheEx>:
 800c5ec:	2801      	cmp	r0, #1
 800c5ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	460d      	mov	r5, r1
 800c5f4:	dc65      	bgt.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c5f6:	4b34      	ldr	r3, [pc, #208]	; (800c6c8 <GUI__ManageCacheEx+0xdc>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <GUI__ManageCacheEx+0x12>
 800c5fc:	4798      	blx	r3
 800c5fe:	2d01      	cmp	r5, #1
 800c600:	d004      	beq.n	800c60c <GUI__ManageCacheEx+0x20>
 800c602:	2d02      	cmp	r5, #2
 800c604:	d021      	beq.n	800c64a <GUI__ManageCacheEx+0x5e>
 800c606:	2d00      	cmp	r5, #0
 800c608:	d15b      	bne.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c60a:	e035      	b.n	800c678 <GUI__ManageCacheEx+0x8c>
 800c60c:	4e2f      	ldr	r6, [pc, #188]	; (800c6cc <GUI__ManageCacheEx+0xe0>)
 800c60e:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800c612:	b9b7      	cbnz	r7, 800c642 <GUI__ManageCacheEx+0x56>
 800c614:	4620      	mov	r0, r4
 800c616:	f7fb f913 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800c61a:	9001      	str	r0, [sp, #4]
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d050      	beq.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c620:	68c3      	ldr	r3, [r0, #12]
 800c622:	210d      	movs	r1, #13
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	a801      	add	r0, sp, #4
 800c628:	4798      	blx	r3
 800c62a:	4603      	mov	r3, r0
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d048      	beq.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c630:	9801      	ldr	r0, [sp, #4]
 800c632:	4629      	mov	r1, r5
 800c634:	4798      	blx	r3
 800c636:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c63a:	3301      	adds	r3, #1
 800c63c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800c640:	e018      	b.n	800c674 <GUI__ManageCacheEx+0x88>
 800c642:	3701      	adds	r7, #1
 800c644:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800c648:	e03b      	b.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7fb f8f8 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800c650:	9001      	str	r0, [sp, #4]
 800c652:	2800      	cmp	r0, #0
 800c654:	d035      	beq.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c656:	68c3      	ldr	r3, [r0, #12]
 800c658:	210d      	movs	r1, #13
 800c65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65c:	a801      	add	r0, sp, #4
 800c65e:	4798      	blx	r3
 800c660:	4604      	mov	r4, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	d02d      	beq.n	800c6c2 <GUI__ManageCacheEx+0xd6>
 800c666:	4b1a      	ldr	r3, [pc, #104]	; (800c6d0 <GUI__ManageCacheEx+0xe4>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	b103      	cbz	r3, 800c66e <GUI__ManageCacheEx+0x82>
 800c66c:	4798      	blx	r3
 800c66e:	9801      	ldr	r0, [sp, #4]
 800c670:	2102      	movs	r1, #2
 800c672:	47a0      	blx	r4
 800c674:	2000      	movs	r0, #0
 800c676:	e025      	b.n	800c6c4 <GUI__ManageCacheEx+0xd8>
 800c678:	4d14      	ldr	r5, [pc, #80]	; (800c6cc <GUI__ManageCacheEx+0xe0>)
 800c67a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d001      	beq.n	800c686 <GUI__ManageCacheEx+0x9a>
 800c682:	2001      	movs	r0, #1
 800c684:	e015      	b.n	800c6b2 <GUI__ManageCacheEx+0xc6>
 800c686:	4620      	mov	r0, r4
 800c688:	f7fb f8da 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800c68c:	9001      	str	r0, [sp, #4]
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0f7      	beq.n	800c682 <GUI__ManageCacheEx+0x96>
 800c692:	68c3      	ldr	r3, [r0, #12]
 800c694:	210d      	movs	r1, #13
 800c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c698:	a801      	add	r0, sp, #4
 800c69a:	4798      	blx	r3
 800c69c:	4606      	mov	r6, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d0ef      	beq.n	800c682 <GUI__ManageCacheEx+0x96>
 800c6a2:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <GUI__ManageCacheEx+0xe4>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	b103      	cbz	r3, 800c6aa <GUI__ManageCacheEx+0xbe>
 800c6a8:	4798      	blx	r3
 800c6aa:	9801      	ldr	r0, [sp, #4]
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	47b0      	blx	r6
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bf18      	it	ne
 800c6ba:	3b01      	subne	r3, #1
 800c6bc:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800c6c0:	e000      	b.n	800c6c4 <GUI__ManageCacheEx+0xd8>
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	b003      	add	sp, #12
 800c6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c8:	200194ac 	.word	0x200194ac
 800c6cc:	200194a4 	.word	0x200194a4
 800c6d0:	200194a0 	.word	0x200194a0

0800c6d4 <GUI__ManageCache>:
 800c6d4:	4b02      	ldr	r3, [pc, #8]	; (800c6e0 <GUI__ManageCache+0xc>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4601      	mov	r1, r0
 800c6da:	7c58      	ldrb	r0, [r3, #17]
 800c6dc:	f7ff bf86 	b.w	800c5ec <GUI__ManageCacheEx>
 800c6e0:	200001b0 	.word	0x200001b0

0800c6e4 <GUI__IntersectRects>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c6ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c6ee:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c6f2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800c6f6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800c6fa:	429c      	cmp	r4, r3
 800c6fc:	bfb8      	it	lt
 800c6fe:	461c      	movlt	r4, r3
 800c700:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c704:	429d      	cmp	r5, r3
 800c706:	bfa8      	it	ge
 800c708:	462b      	movge	r3, r5
 800c70a:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800c70e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c712:	42ae      	cmp	r6, r5
 800c714:	bfb8      	it	lt
 800c716:	4635      	movlt	r5, r6
 800c718:	b2a4      	uxth	r4, r4
 800c71a:	b2ad      	uxth	r5, r5
 800c71c:	4291      	cmp	r1, r2
 800c71e:	bfb8      	it	lt
 800c720:	460a      	movlt	r2, r1
 800c722:	8004      	strh	r4, [r0, #0]
 800c724:	8085      	strh	r5, [r0, #4]
 800c726:	b224      	sxth	r4, r4
 800c728:	b22d      	sxth	r5, r5
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	b292      	uxth	r2, r2
 800c72e:	42a5      	cmp	r5, r4
 800c730:	8043      	strh	r3, [r0, #2]
 800c732:	80c2      	strh	r2, [r0, #6]
 800c734:	db06      	blt.n	800c744 <GUI__IntersectRects+0x60>
 800c736:	b210      	sxth	r0, r2
 800c738:	b21b      	sxth	r3, r3
 800c73a:	4298      	cmp	r0, r3
 800c73c:	bfb4      	ite	lt
 800c73e:	2000      	movlt	r0, #0
 800c740:	2001      	movge	r0, #1
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	2000      	movs	r0, #0
 800c746:	bd70      	pop	{r4, r5, r6, pc}

0800c748 <GUI__IntersectRect>:
 800c748:	880b      	ldrh	r3, [r1, #0]
 800c74a:	b510      	push	{r4, lr}
 800c74c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c750:	b21a      	sxth	r2, r3
 800c752:	4294      	cmp	r4, r2
 800c754:	bfb8      	it	lt
 800c756:	8003      	strhlt	r3, [r0, #0]
 800c758:	884b      	ldrh	r3, [r1, #2]
 800c75a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c75e:	b21a      	sxth	r2, r3
 800c760:	4294      	cmp	r4, r2
 800c762:	bfb8      	it	lt
 800c764:	8043      	strhlt	r3, [r0, #2]
 800c766:	888b      	ldrh	r3, [r1, #4]
 800c768:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c76c:	b21a      	sxth	r2, r3
 800c76e:	4294      	cmp	r4, r2
 800c770:	bfc8      	it	gt
 800c772:	8083      	strhgt	r3, [r0, #4]
 800c774:	88cb      	ldrh	r3, [r1, #6]
 800c776:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c77a:	b21a      	sxth	r2, r3
 800c77c:	4291      	cmp	r1, r2
 800c77e:	bfc8      	it	gt
 800c780:	80c3      	strhgt	r3, [r0, #6]
 800c782:	bd10      	pop	{r4, pc}

0800c784 <GUI__MixColors>:
 800c784:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800c788:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c78e:	d027      	beq.n	800c7e0 <GUI__MixColors+0x5c>
 800c790:	43d3      	mvns	r3, r2
 800c792:	b2db      	uxtb	r3, r3
 800c794:	b2cd      	uxtb	r5, r1
 800c796:	b2c6      	uxtb	r6, r0
 800c798:	435d      	muls	r5, r3
 800c79a:	fb02 5506 	mla	r5, r2, r6, r5
 800c79e:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800c7a2:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800c7a6:	435e      	muls	r6, r3
 800c7a8:	fb02 6604 	mla	r6, r2, r4, r6
 800c7ac:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800c7b0:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800c7b4:	435c      	muls	r4, r3
 800c7b6:	0e09      	lsrs	r1, r1, #24
 800c7b8:	0e00      	lsrs	r0, r0, #24
 800c7ba:	fb02 4407 	mla	r4, r2, r7, r4
 800c7be:	434b      	muls	r3, r1
 800c7c0:	0a36      	lsrs	r6, r6, #8
 800c7c2:	fb02 3200 	mla	r2, r2, r0, r3
 800c7c6:	0a24      	lsrs	r4, r4, #8
 800c7c8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800c7cc:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800c7d0:	4318      	orrs	r0, r3
 800c7d2:	0412      	lsls	r2, r2, #16
 800c7d4:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800c7d8:	4318      	orrs	r0, r3
 800c7da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c7de:	4310      	orrs	r0, r2
 800c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c7e4 <_OnExit>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	4c0a      	ldr	r4, [pc, #40]	; (800c810 <_OnExit+0x2c>)
 800c7e8:	4d0a      	ldr	r5, [pc, #40]	; (800c814 <_OnExit+0x30>)
 800c7ea:	6820      	ldr	r0, [r4, #0]
 800c7ec:	4e0a      	ldr	r6, [pc, #40]	; (800c818 <_OnExit+0x34>)
 800c7ee:	f7fb fd6d 	bl	80082cc <GUI_ALLOC_FreeFixedBlock>
 800c7f2:	6828      	ldr	r0, [r5, #0]
 800c7f4:	f7fb fd6a 	bl	80082cc <GUI_ALLOC_FreeFixedBlock>
 800c7f8:	6830      	ldr	r0, [r6, #0]
 800c7fa:	f7fb fd67 	bl	80082cc <GUI_ALLOC_FreeFixedBlock>
 800c7fe:	4a07      	ldr	r2, [pc, #28]	; (800c81c <_OnExit+0x38>)
 800c800:	2300      	movs	r3, #0
 800c802:	6013      	str	r3, [r2, #0]
 800c804:	4a06      	ldr	r2, [pc, #24]	; (800c820 <_OnExit+0x3c>)
 800c806:	6033      	str	r3, [r6, #0]
 800c808:	602b      	str	r3, [r5, #0]
 800c80a:	6023      	str	r3, [r4, #0]
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	200194b4 	.word	0x200194b4
 800c814:	200194b0 	.word	0x200194b0
 800c818:	200194b8 	.word	0x200194b8
 800c81c:	200194bc 	.word	0x200194bc
 800c820:	200194cc 	.word	0x200194cc

0800c824 <GUI__GetAlphaBuffer>:
 800c824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c828:	461c      	mov	r4, r3
 800c82a:	4b28      	ldr	r3, [pc, #160]	; (800c8cc <GUI__GetAlphaBuffer+0xa8>)
 800c82c:	4617      	mov	r7, r2
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4606      	mov	r6, r0
 800c832:	4688      	mov	r8, r1
 800c834:	b932      	cbnz	r2, 800c844 <GUI__GetAlphaBuffer+0x20>
 800c836:	2201      	movs	r2, #1
 800c838:	4825      	ldr	r0, [pc, #148]	; (800c8d0 <GUI__GetAlphaBuffer+0xac>)
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <GUI__GetAlphaBuffer+0xb0>)
 800c83e:	6003      	str	r3, [r0, #0]
 800c840:	f7fb f938 	bl	8007ab4 <GUI__RegisterExit>
 800c844:	4d24      	ldr	r5, [pc, #144]	; (800c8d8 <GUI__GetAlphaBuffer+0xb4>)
 800c846:	682b      	ldr	r3, [r5, #0]
 800c848:	b933      	cbnz	r3, 800c858 <GUI__GetAlphaBuffer+0x34>
 800c84a:	4b24      	ldr	r3, [pc, #144]	; (800c8dc <GUI__GetAlphaBuffer+0xb8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	602b      	str	r3, [r5, #0]
 800c850:	b913      	cbnz	r3, 800c858 <GUI__GetAlphaBuffer+0x34>
 800c852:	f7ff fab1 	bl	800bdb8 <LCD_GetVXSizeMax>
 800c856:	6028      	str	r0, [r5, #0]
 800c858:	b10c      	cbz	r4, 800c85e <GUI__GetAlphaBuffer+0x3a>
 800c85a:	682b      	ldr	r3, [r5, #0]
 800c85c:	6023      	str	r3, [r4, #0]
 800c85e:	b196      	cbz	r6, 800c886 <GUI__GetAlphaBuffer+0x62>
 800c860:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <GUI__GetAlphaBuffer+0xbc>)
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	4699      	mov	r9, r3
 800c866:	2400      	movs	r4, #0
 800c868:	b94a      	cbnz	r2, 800c87e <GUI__GetAlphaBuffer+0x5a>
 800c86a:	6828      	ldr	r0, [r5, #0]
 800c86c:	0080      	lsls	r0, r0, #2
 800c86e:	f7fb fe8d 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 800c872:	f1d0 0401 	rsbs	r4, r0, #1
 800c876:	f8c9 0000 	str.w	r0, [r9]
 800c87a:	bf38      	it	cc
 800c87c:	2400      	movcc	r4, #0
 800c87e:	f8d9 3000 	ldr.w	r3, [r9]
 800c882:	6033      	str	r3, [r6, #0]
 800c884:	e000      	b.n	800c888 <GUI__GetAlphaBuffer+0x64>
 800c886:	4634      	mov	r4, r6
 800c888:	f1b8 0f00 	cmp.w	r8, #0
 800c88c:	d00d      	beq.n	800c8aa <GUI__GetAlphaBuffer+0x86>
 800c88e:	4e15      	ldr	r6, [pc, #84]	; (800c8e4 <GUI__GetAlphaBuffer+0xc0>)
 800c890:	6833      	ldr	r3, [r6, #0]
 800c892:	b93b      	cbnz	r3, 800c8a4 <GUI__GetAlphaBuffer+0x80>
 800c894:	6828      	ldr	r0, [r5, #0]
 800c896:	0080      	lsls	r0, r0, #2
 800c898:	f7fb fe78 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	6030      	str	r0, [r6, #0]
 800c8a0:	bf08      	it	eq
 800c8a2:	2401      	moveq	r4, #1
 800c8a4:	6833      	ldr	r3, [r6, #0]
 800c8a6:	f8c8 3000 	str.w	r3, [r8]
 800c8aa:	b167      	cbz	r7, 800c8c6 <GUI__GetAlphaBuffer+0xa2>
 800c8ac:	4e0e      	ldr	r6, [pc, #56]	; (800c8e8 <GUI__GetAlphaBuffer+0xc4>)
 800c8ae:	6833      	ldr	r3, [r6, #0]
 800c8b0:	b93b      	cbnz	r3, 800c8c2 <GUI__GetAlphaBuffer+0x9e>
 800c8b2:	6828      	ldr	r0, [r5, #0]
 800c8b4:	0080      	lsls	r0, r0, #2
 800c8b6:	f7fb fe69 	bl	800858c <GUI_ALLOC_GetFixedBlock>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	6030      	str	r0, [r6, #0]
 800c8be:	bf08      	it	eq
 800c8c0:	2401      	moveq	r4, #1
 800c8c2:	6833      	ldr	r3, [r6, #0]
 800c8c4:	603b      	str	r3, [r7, #0]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8cc:	200194cc 	.word	0x200194cc
 800c8d0:	200194c4 	.word	0x200194c4
 800c8d4:	0800c7e5 	.word	0x0800c7e5
 800c8d8:	200194bc 	.word	0x200194bc
 800c8dc:	2001af1c 	.word	0x2001af1c
 800c8e0:	200194b4 	.word	0x200194b4
 800c8e4:	200194b0 	.word	0x200194b0
 800c8e8:	200194b8 	.word	0x200194b8

0800c8ec <GUI__DoAlphaBlending>:
 800c8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	b093      	sub	sp, #76	; 0x4c
 800c8f2:	2400      	movs	r4, #0
 800c8f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c8f6:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8f8:	910c      	str	r1, [sp, #48]	; 0x30
 800c8fa:	4690      	mov	r8, r2
 800c8fc:	461f      	mov	r7, r3
 800c8fe:	6034      	str	r4, [r6, #0]
 800c900:	a80f      	add	r0, sp, #60	; 0x3c
 800c902:	a910      	add	r1, sp, #64	; 0x40
 800c904:	4622      	mov	r2, r4
 800c906:	ab11      	add	r3, sp, #68	; 0x44
 800c908:	f7ff ff8c 	bl	800c824 <GUI__GetAlphaBuffer>
 800c90c:	4605      	mov	r5, r0
 800c90e:	2800      	cmp	r0, #0
 800c910:	f040 80c3 	bne.w	800ca9a <GUI__DoAlphaBlending+0x1ae>
 800c914:	4c63      	ldr	r4, [pc, #396]	; (800caa4 <GUI__DoAlphaBlending+0x1b8>)
 800c916:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	7c58      	ldrb	r0, [r3, #17]
 800c91c:	4b62      	ldr	r3, [pc, #392]	; (800caa8 <GUI__DoAlphaBlending+0x1bc>)
 800c91e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c922:	9307      	str	r3, [sp, #28]
 800c924:	4297      	cmp	r7, r2
 800c926:	bfa8      	it	ge
 800c928:	4617      	movge	r7, r2
 800c92a:	691a      	ldr	r2, [r3, #16]
 800c92c:	920d      	str	r2, [sp, #52]	; 0x34
 800c92e:	970a      	str	r7, [sp, #40]	; 0x28
 800c930:	f7ff fa0e 	bl	800bd50 <GUI_GetBitsPerPixelEx>
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	9008      	str	r0, [sp, #32]
 800c938:	7c58      	ldrb	r0, [r3, #17]
 800c93a:	f7ff fa27 	bl	800bd8c <GUI_GetpfIndex2ColorEx>
 800c93e:	4b5b      	ldr	r3, [pc, #364]	; (800caac <GUI__DoAlphaBlending+0x1c0>)
 800c940:	9004      	str	r0, [sp, #16]
 800c942:	4298      	cmp	r0, r3
 800c944:	d005      	beq.n	800c952 <GUI__DoAlphaBlending+0x66>
 800c946:	4b5a      	ldr	r3, [pc, #360]	; (800cab0 <GUI__DoAlphaBlending+0x1c4>)
 800c948:	1ac3      	subs	r3, r0, r3
 800c94a:	bf18      	it	ne
 800c94c:	2301      	movne	r3, #1
 800c94e:	9306      	str	r3, [sp, #24]
 800c950:	e000      	b.n	800c954 <GUI__DoAlphaBlending+0x68>
 800c952:	9506      	str	r5, [sp, #24]
 800c954:	2500      	movs	r5, #0
 800c956:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c958:	46ab      	mov	fp, r5
 800c95a:	4643      	mov	r3, r8
 800c95c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c95e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	4790      	blx	r2
 800c966:	0e03      	lsrs	r3, r0, #24
 800c968:	4681      	mov	r9, r0
 800c96a:	9309      	str	r3, [sp, #36]	; 0x24
 800c96c:	f000 8085 	beq.w	800ca7a <GUI__DoAlphaBlending+0x18e>
 800c970:	f1bb 0f00 	cmp.w	fp, #0
 800c974:	d13f      	bne.n	800c9f6 <GUI__DoAlphaBlending+0x10a>
 800c976:	4b4b      	ldr	r3, [pc, #300]	; (800caa4 <GUI__DoAlphaBlending+0x1b8>)
 800c978:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c97e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c982:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c986:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c988:	442f      	add	r7, r5
 800c98a:	42bb      	cmp	r3, r7
 800c98c:	bfc8      	it	gt
 800c98e:	ebc7 0b03 	rsbgt	fp, r7, r3
 800c992:	eb0b 0a05 	add.w	sl, fp, r5
 800c996:	bfc8      	it	gt
 800c998:	461f      	movgt	r7, r3
 800c99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c99c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c9a0:	4453      	add	r3, sl
 800c9a2:	4494      	add	ip, r2
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	9b07      	ldr	r3, [sp, #28]
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	f10c 32ff 	add.w	r2, ip, #4294967295
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	f8cd c00c 	str.w	ip, [sp, #12]
 800c9b6:	f001 fc15 	bl	800e1e4 <GUI_ReadRectEx>
 800c9ba:	9a08      	ldr	r2, [sp, #32]
 800c9bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c9be:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c9c2:	2a17      	cmp	r2, #23
 800c9c4:	dc06      	bgt.n	800c9d4 <GUI__DoAlphaBlending+0xe8>
 800c9c6:	4450      	add	r0, sl
 800c9c8:	ebcb 0104 	rsb	r1, fp, r4
 800c9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9ce:	f001 fc61 	bl	800e294 <GUI__ExpandPixelIndicesEx>
 800c9d2:	e001      	b.n	800c9d8 <GUI__DoAlphaBlending+0xec>
 800c9d4:	9b06      	ldr	r3, [sp, #24]
 800c9d6:	b913      	cbnz	r3, 800c9de <GUI__DoAlphaBlending+0xf2>
 800c9d8:	f04f 0b01 	mov.w	fp, #1
 800c9dc:	e00b      	b.n	800c9f6 <GUI__DoAlphaBlending+0x10a>
 800c9de:	ebc7 070c 	rsb	r7, r7, ip
 800c9e2:	4482      	add	sl, r0
 800c9e4:	f8da 0000 	ldr.w	r0, [sl]
 800c9e8:	9a04      	ldr	r2, [sp, #16]
 800c9ea:	4790      	blx	r2
 800c9ec:	3f01      	subs	r7, #1
 800c9ee:	f84a 0b04 	str.w	r0, [sl], #4
 800c9f2:	d1f7      	bne.n	800c9e4 <GUI__DoAlphaBlending+0xf8>
 800c9f4:	e7f0      	b.n	800c9d8 <GUI__DoAlphaBlending+0xec>
 800c9f6:	4b2f      	ldr	r3, [pc, #188]	; (800cab4 <GUI__DoAlphaBlending+0x1c8>)
 800c9f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c9fa:	f8d3 c000 	ldr.w	ip, [r3]
 800c9fe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ca00:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800ca04:	f1bc 0f00 	cmp.w	ip, #0
 800ca08:	d024      	beq.n	800ca54 <GUI__DoAlphaBlending+0x168>
 800ca0a:	eb07 020a 	add.w	r2, r7, sl
 800ca0e:	4451      	add	r1, sl
 800ca10:	9210      	str	r2, [sp, #64]	; 0x40
 800ca12:	4623      	mov	r3, r4
 800ca14:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca16:	4640      	mov	r0, r8
 800ca18:	47e0      	blx	ip
 800ca1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f858 1003 	ldr.w	r1, [r8, r3]
 800ca24:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800ca28:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800ca2c:	58e8      	ldr	r0, [r5, r3]
 800ca2e:	d101      	bne.n	800ca34 <GUI__DoAlphaBlending+0x148>
 800ca30:	50d0      	str	r0, [r2, r3]
 800ca32:	e005      	b.n	800ca40 <GUI__DoAlphaBlending+0x154>
 800ca34:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800ca38:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800ca3c:	bf08      	it	eq
 800ca3e:	50d1      	streq	r1, [r2, r3]
 800ca40:	3c01      	subs	r4, #1
 800ca42:	f103 0304 	add.w	r3, r3, #4
 800ca46:	d1eb      	bne.n	800ca20 <GUI__DoAlphaBlending+0x134>
 800ca48:	6833      	ldr	r3, [r6, #0]
 800ca4a:	9710      	str	r7, [sp, #64]	; 0x40
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	6033      	str	r3, [r6, #0]
 800ca52:	e020      	b.n	800ca96 <GUI__DoAlphaBlending+0x1aa>
 800ca54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca56:	2bff      	cmp	r3, #255	; 0xff
 800ca58:	d104      	bne.n	800ca64 <GUI__DoAlphaBlending+0x178>
 800ca5a:	f851 300a 	ldr.w	r3, [r1, sl]
 800ca5e:	f847 300a 	str.w	r3, [r7, sl]
 800ca62:	e011      	b.n	800ca88 <GUI__DoAlphaBlending+0x19c>
 800ca64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca66:	f851 100a 	ldr.w	r1, [r1, sl]
 800ca6a:	43da      	mvns	r2, r3
 800ca6c:	4648      	mov	r0, r9
 800ca6e:	b2d2      	uxtb	r2, r2
 800ca70:	f7ff fe88 	bl	800c784 <GUI__MixColors>
 800ca74:	f847 000a 	str.w	r0, [r7, sl]
 800ca78:	e002      	b.n	800ca80 <GUI__DoAlphaBlending+0x194>
 800ca7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca7c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ca80:	6833      	ldr	r3, [r6, #0]
 800ca82:	f043 0301 	orr.w	r3, r3, #1
 800ca86:	6033      	str	r3, [r6, #0]
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	f105 0501 	add.w	r5, r5, #1
 800ca8e:	d002      	beq.n	800ca96 <GUI__DoAlphaBlending+0x1aa>
 800ca90:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ca94:	e761      	b.n	800c95a <GUI__DoAlphaBlending+0x6e>
 800ca96:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca98:	e000      	b.n	800ca9c <GUI__DoAlphaBlending+0x1b0>
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	b013      	add	sp, #76	; 0x4c
 800ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa2:	bf00      	nop
 800caa4:	200001b0 	.word	0x200001b0
 800caa8:	2001af14 	.word	0x2001af14
 800caac:	0800cf69 	.word	0x0800cf69
 800cab0:	0800cf67 	.word	0x0800cf67
 800cab4:	200194c0 	.word	0x200194c0

0800cab8 <GUI__AllocAlphaBuffer>:
 800cab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caba:	b108      	cbz	r0, 800cac0 <GUI__AllocAlphaBuffer+0x8>
 800cabc:	aa03      	add	r2, sp, #12
 800cabe:	e000      	b.n	800cac2 <GUI__AllocAlphaBuffer+0xa>
 800cac0:	4602      	mov	r2, r0
 800cac2:	a801      	add	r0, sp, #4
 800cac4:	a902      	add	r1, sp, #8
 800cac6:	2300      	movs	r3, #0
 800cac8:	f7ff feac 	bl	800c824 <GUI__GetAlphaBuffer>
 800cacc:	b005      	add	sp, #20
 800cace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cad4 <GUI_SignalEvent>:
 800cad4:	b508      	push	{r3, lr}
 800cad6:	4b02      	ldr	r3, [pc, #8]	; (800cae0 <GUI_SignalEvent+0xc>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	b103      	cbz	r3, 800cade <GUI_SignalEvent+0xa>
 800cadc:	4798      	blx	r3
 800cade:	bd08      	pop	{r3, pc}
 800cae0:	200194d0 	.word	0x200194d0

0800cae4 <_GetCharCode>:
 800cae4:	7800      	ldrb	r0, [r0, #0]
 800cae6:	4770      	bx	lr

0800cae8 <_GetCharSize>:
 800cae8:	2001      	movs	r0, #1
 800caea:	4770      	bx	lr

0800caec <_CalcSizeOfChar>:
 800caec:	2001      	movs	r0, #1
 800caee:	4770      	bx	lr

0800caf0 <_Encode>:
 800caf0:	7001      	strb	r1, [r0, #0]
 800caf2:	2001      	movs	r0, #1
 800caf4:	4770      	bx	lr
	...

0800caf8 <GUI_UC__GetCharCodeInc>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	4e08      	ldr	r6, [pc, #32]	; (800cb1c <GUI_UC__GetCharCodeInc+0x24>)
 800cafc:	6804      	ldr	r4, [r0, #0]
 800cafe:	6833      	ldr	r3, [r6, #0]
 800cb00:	4605      	mov	r5, r0
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4620      	mov	r0, r4
 800cb06:	4798      	blx	r3
 800cb08:	6833      	ldr	r3, [r6, #0]
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4798      	blx	r3
 800cb12:	4420      	add	r0, r4
 800cb14:	6028      	str	r0, [r5, #0]
 800cb16:	4638      	mov	r0, r7
 800cb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	2001af0c 	.word	0x2001af0c

0800cb20 <GUI_UC__NumChars2NumBytes>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	4604      	mov	r4, r0
 800cb24:	460e      	mov	r6, r1
 800cb26:	2500      	movs	r5, #0
 800cb28:	b146      	cbz	r6, 800cb3c <GUI_UC__NumChars2NumBytes+0x1c>
 800cb2a:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <GUI_UC__NumChars2NumBytes+0x20>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4620      	mov	r0, r4
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	4798      	blx	r3
 800cb34:	3e01      	subs	r6, #1
 800cb36:	4404      	add	r4, r0
 800cb38:	4405      	add	r5, r0
 800cb3a:	e7f5      	b.n	800cb28 <GUI_UC__NumChars2NumBytes+0x8>
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	2001af0c 	.word	0x2001af0c

0800cb44 <_Unlink>:
 800cb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb46:	4605      	mov	r5, r0
 800cb48:	b1f0      	cbz	r0, 800cb88 <_Unlink+0x44>
 800cb4a:	f7fb fbd3 	bl	80082f4 <GUI_ALLOC_LockH>
 800cb4e:	4b0f      	ldr	r3, [pc, #60]	; (800cb8c <_Unlink+0x48>)
 800cb50:	9000      	str	r0, [sp, #0]
 800cb52:	681c      	ldr	r4, [r3, #0]
 800cb54:	42ac      	cmp	r4, r5
 800cb56:	d104      	bne.n	800cb62 <_Unlink+0x1e>
 800cb58:	6842      	ldr	r2, [r0, #4]
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	e011      	b.n	800cb82 <_Unlink+0x3e>
 800cb5e:	f7fb fbd7 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cb62:	b174      	cbz	r4, 800cb82 <_Unlink+0x3e>
 800cb64:	4620      	mov	r0, r4
 800cb66:	f7fb fbc5 	bl	80082f4 <GUI_ALLOC_LockH>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	a802      	add	r0, sp, #8
 800cb6e:	685c      	ldr	r4, [r3, #4]
 800cb70:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cb74:	42ac      	cmp	r4, r5
 800cb76:	d1f2      	bne.n	800cb5e <_Unlink+0x1a>
 800cb78:	9a00      	ldr	r2, [sp, #0]
 800cb7a:	6852      	ldr	r2, [r2, #4]
 800cb7c:	605a      	str	r2, [r3, #4]
 800cb7e:	f7fb fbc7 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cb82:	4668      	mov	r0, sp
 800cb84:	f7fb fbc4 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cb88:	b003      	add	sp, #12
 800cb8a:	bd30      	pop	{r4, r5, pc}
 800cb8c:	200194d8 	.word	0x200194d8

0800cb90 <GUI_TIMER__GetFirstTimer>:
 800cb90:	2300      	movs	r3, #0
 800cb92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb94:	6003      	str	r3, [r0, #0]
 800cb96:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <GUI_TIMER__GetFirstTimer+0x2c>)
 800cb98:	681c      	ldr	r4, [r3, #0]
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	b154      	cbz	r4, 800cbb4 <GUI_TIMER__GetFirstTimer+0x24>
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7fb fba8 	bl	80082f4 <GUI_ALLOC_LockH>
 800cba4:	ab02      	add	r3, sp, #8
 800cba6:	6902      	ldr	r2, [r0, #16]
 800cba8:	f843 0d04 	str.w	r0, [r3, #-4]!
 800cbac:	602a      	str	r2, [r5, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fb fbae 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	b003      	add	sp, #12
 800cbb8:	bd30      	pop	{r4, r5, pc}
 800cbba:	bf00      	nop
 800cbbc:	200194d4 	.word	0x200194d4

0800cbc0 <GUI_TIMER__GetNextTimerLin>:
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbc4:	600b      	str	r3, [r1, #0]
 800cbc6:	460e      	mov	r6, r1
 800cbc8:	4604      	mov	r4, r0
 800cbca:	b190      	cbz	r0, 800cbf2 <GUI_TIMER__GetNextTimerLin+0x32>
 800cbcc:	f7fb fb92 	bl	80082f4 <GUI_ALLOC_LockH>
 800cbd0:	ad02      	add	r5, sp, #8
 800cbd2:	6884      	ldr	r4, [r0, #8]
 800cbd4:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cbd8:	b144      	cbz	r4, 800cbec <GUI_TIMER__GetNextTimerLin+0x2c>
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f7fb fb98 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7fb fb87 	bl	80082f4 <GUI_ALLOC_LockH>
 800cbe6:	6903      	ldr	r3, [r0, #16]
 800cbe8:	9001      	str	r0, [sp, #4]
 800cbea:	6033      	str	r3, [r6, #0]
 800cbec:	4628      	mov	r0, r5
 800cbee:	f7fb fb8f 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	b002      	add	sp, #8
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}

0800cbf8 <GUI_TIMER_Delete>:
 800cbf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	b358      	cbz	r0, 800cc56 <GUI_TIMER_Delete+0x5e>
 800cbfe:	4d17      	ldr	r5, [pc, #92]	; (800cc5c <GUI_TIMER_Delete+0x64>)
 800cc00:	682e      	ldr	r6, [r5, #0]
 800cc02:	4286      	cmp	r6, r0
 800cc04:	d10b      	bne.n	800cc1e <GUI_TIMER_Delete+0x26>
 800cc06:	f7fb fb75 	bl	80082f4 <GUI_ALLOC_LockH>
 800cc0a:	ab02      	add	r3, sp, #8
 800cc0c:	6882      	ldr	r2, [r0, #8]
 800cc0e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800cc12:	602a      	str	r2, [r5, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	e016      	b.n	800cc46 <GUI_TIMER_Delete+0x4e>
 800cc18:	4668      	mov	r0, sp
 800cc1a:	f7fb fb79 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f7fb fb68 	bl	80082f4 <GUI_ALLOC_LockH>
 800cc24:	6886      	ldr	r6, [r0, #8]
 800cc26:	ad02      	add	r5, sp, #8
 800cc28:	42a6      	cmp	r6, r4
 800cc2a:	f845 0d08 	str.w	r0, [r5, #-8]!
 800cc2e:	d1f3      	bne.n	800cc18 <GUI_TIMER_Delete+0x20>
 800cc30:	4620      	mov	r0, r4
 800cc32:	f7fb fb5f 	bl	80082f4 <GUI_ALLOC_LockH>
 800cc36:	9b00      	ldr	r3, [sp, #0]
 800cc38:	6882      	ldr	r2, [r0, #8]
 800cc3a:	9001      	str	r0, [sp, #4]
 800cc3c:	609a      	str	r2, [r3, #8]
 800cc3e:	a801      	add	r0, sp, #4
 800cc40:	f7fb fb66 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cc44:	4668      	mov	r0, sp
 800cc46:	f7fb fb63 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f7ff ff7a 	bl	800cb44 <_Unlink>
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7fb fb7d 	bl	8008350 <GUI_ALLOC_Free>
 800cc56:	b002      	add	sp, #8
 800cc58:	bd70      	pop	{r4, r5, r6, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200194d4 	.word	0x200194d4

0800cc60 <GUI_TIMER_GetFlag>:
 800cc60:	b513      	push	{r0, r1, r4, lr}
 800cc62:	460c      	mov	r4, r1
 800cc64:	b168      	cbz	r0, 800cc82 <GUI_TIMER_GetFlag+0x22>
 800cc66:	f7fb fb45 	bl	80082f4 <GUI_ALLOC_LockH>
 800cc6a:	ab02      	add	r3, sp, #8
 800cc6c:	8982      	ldrh	r2, [r0, #12]
 800cc6e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800cc72:	4214      	tst	r4, r2
 800cc74:	4618      	mov	r0, r3
 800cc76:	bf0c      	ite	eq
 800cc78:	2400      	moveq	r4, #0
 800cc7a:	2401      	movne	r4, #1
 800cc7c:	f7fb fb48 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cc80:	e000      	b.n	800cc84 <GUI_TIMER_GetFlag+0x24>
 800cc82:	2401      	movs	r4, #1
 800cc84:	4620      	mov	r0, r4
 800cc86:	b002      	add	sp, #8
 800cc88:	bd10      	pop	{r4, pc}
	...

0800cc8c <GUI_TOUCH_GetLayer>:
 800cc8c:	4b01      	ldr	r3, [pc, #4]	; (800cc94 <GUI_TOUCH_GetLayer+0x8>)
 800cc8e:	7a58      	ldrb	r0, [r3, #9]
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	200194dc 	.word	0x200194dc

0800cc98 <GUI_SetOrg>:
 800cc98:	460a      	mov	r2, r1
 800cc9a:	4908      	ldr	r1, [pc, #32]	; (800ccbc <GUI_SetOrg+0x24>)
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	8008      	strh	r0, [r1, #0]
 800cca0:	4907      	ldr	r1, [pc, #28]	; (800ccc0 <GUI_SetOrg+0x28>)
 800cca2:	800a      	strh	r2, [r1, #0]
 800cca4:	4907      	ldr	r1, [pc, #28]	; (800ccc4 <GUI_SetOrg+0x2c>)
 800cca6:	6809      	ldr	r1, [r1, #0]
 800cca8:	4603      	mov	r3, r0
 800ccaa:	7c48      	ldrb	r0, [r1, #17]
 800ccac:	4906      	ldr	r1, [pc, #24]	; (800ccc8 <GUI_SetOrg+0x30>)
 800ccae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800ccb2:	68c1      	ldr	r1, [r0, #12]
 800ccb4:	6a0c      	ldr	r4, [r1, #32]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	47a0      	blx	r4
 800ccba:	bd10      	pop	{r4, pc}
 800ccbc:	2001aefc 	.word	0x2001aefc
 800ccc0:	2001aef0 	.word	0x2001aef0
 800ccc4:	200001b0 	.word	0x200001b0
 800ccc8:	2001af14 	.word	0x2001af14

0800cccc <GUI_SetDrawMode>:
 800cccc:	f7ff b95c 	b.w	800bf88 <LCD_SetDrawMode>

0800ccd0 <GL_SetDefault>:
 800ccd0:	b508      	push	{r3, lr}
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	f7fa fc54 	bl	8007580 <GUI_SetBkColor>
 800ccd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ccdc:	f7fa fc52 	bl	8007584 <GUI_SetColor>
 800cce0:	2001      	movs	r0, #1
 800cce2:	f000 f88f 	bl	800ce04 <GUI_SetPenSize>
 800cce6:	2000      	movs	r0, #0
 800cce8:	f001 fd2a 	bl	800e740 <GUI_SetTextAlign>
 800ccec:	2000      	movs	r0, #0
 800ccee:	f001 fd1d 	bl	800e72c <GUI_SetTextMode>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	f7ff ffea 	bl	800cccc <GUI_SetDrawMode>
 800ccf8:	4b04      	ldr	r3, [pc, #16]	; (800cd0c <GL_SetDefault+0x3c>)
 800ccfa:	6818      	ldr	r0, [r3, #0]
 800ccfc:	f7fa fc36 	bl	800756c <GUI_SetFont>
 800cd00:	2000      	movs	r0, #0
 800cd02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd06:	f001 bd25 	b.w	800e754 <GUI_SetLineStyle>
 800cd0a:	bf00      	nop
 800cd0c:	200001b4 	.word	0x200001b4

0800cd10 <GUI__AlphaPreserveTrans>:
 800cd10:	b510      	push	{r4, lr}
 800cd12:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <GUI__AlphaPreserveTrans+0x20>)
 800cd14:	781c      	ldrb	r4, [r3, #0]
 800cd16:	b120      	cbz	r0, 800cd22 <GUI__AlphaPreserveTrans+0x12>
 800cd18:	2201      	movs	r2, #1
 800cd1a:	701a      	strb	r2, [r3, #0]
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd20:	e002      	b.n	800cd28 <GUI__AlphaPreserveTrans+0x18>
 800cd22:	7018      	strb	r0, [r3, #0]
 800cd24:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cd28:	f001 faac 	bl	800e284 <LCD_AA_SetAndMask>
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	bd10      	pop	{r4, pc}
 800cd30:	2001af05 	.word	0x2001af05

0800cd34 <GUI_GetCursorLayer>:
 800cd34:	2801      	cmp	r0, #1
 800cd36:	bf9a      	itte	ls
 800cd38:	4b02      	ldrls	r3, [pc, #8]	; (800cd44 <GUI_GetCursorLayer+0x10>)
 800cd3a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800cd3e:	2000      	movhi	r0, #0
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	200194e8 	.word	0x200194e8

0800cd48 <GUI_GetLayerPosEx>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	460d      	mov	r5, r1
 800cd4c:	4614      	mov	r4, r2
 800cd4e:	f7f9 ffd1 	bl	8006cf4 <LCD_GetPosEx>
 800cd52:	b110      	cbz	r0, 800cd5a <GUI_GetLayerPosEx+0x12>
 800cd54:	2300      	movs	r3, #0
 800cd56:	602b      	str	r3, [r5, #0]
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}

0800cd5c <GUI_SelectLayer>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	4d08      	ldr	r5, [pc, #32]	; (800cd80 <GUI_SelectLayer+0x24>)
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	2801      	cmp	r0, #1
 800cd64:	4604      	mov	r4, r0
 800cd66:	7c5e      	ldrb	r6, [r3, #17]
 800cd68:	d808      	bhi.n	800cd7c <GUI_SelectLayer+0x20>
 800cd6a:	f7fa fd69 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800cd6e:	b128      	cbz	r0, 800cd7c <GUI_SelectLayer+0x20>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	745c      	strb	r4, [r3, #17]
 800cd74:	f000 f80a 	bl	800cd8c <GUI_SelectLCD>
 800cd78:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <GUI_SelectLayer+0x28>)
 800cd7a:	601c      	str	r4, [r3, #0]
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	200001b0 	.word	0x200001b0
 800cd84:	2001b03c 	.word	0x2001b03c

0800cd88 <GUI_SetLayerPosEx>:
 800cd88:	f7f9 bf84 	b.w	8006c94 <LCD_SetPosEx>

0800cd8c <GUI_SelectLCD>:
 800cd8c:	b508      	push	{r3, lr}
 800cd8e:	f001 f915 	bl	800dfbc <LCD_SelectLCD>
 800cd92:	f7fe ff69 	bl	800bc68 <LCD_UpdateColorIndices>
 800cd96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd9a:	f7fd b91f 	b.w	8009fdc <WM_Activate>
	...

0800cda0 <GUI_SaveContext_W>:
 800cda0:	b508      	push	{r3, lr}
 800cda2:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <GUI_SaveContext_W+0x10>)
 800cda4:	2270      	movs	r2, #112	; 0x70
 800cda6:	6819      	ldr	r1, [r3, #0]
 800cda8:	f002 fa99 	bl	800f2de <memcpy>
 800cdac:	bd08      	pop	{r3, pc}
 800cdae:	bf00      	nop
 800cdb0:	200001b0 	.word	0x200001b0

0800cdb4 <GUI_RestoreContext>:
 800cdb4:	b508      	push	{r3, lr}
 800cdb6:	4b03      	ldr	r3, [pc, #12]	; (800cdc4 <GUI_RestoreContext+0x10>)
 800cdb8:	4601      	mov	r1, r0
 800cdba:	2270      	movs	r2, #112	; 0x70
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f002 fa8e 	bl	800f2de <memcpy>
 800cdc2:	bd08      	pop	{r3, pc}
 800cdc4:	200001b0 	.word	0x200001b0

0800cdc8 <GUI_RectsIntersect>:
 800cdc8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cdcc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	dc14      	bgt.n	800cdfe <GUI_RectsIntersect+0x36>
 800cdd4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800cdd8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	dc0e      	bgt.n	800cdfe <GUI_RectsIntersect+0x36>
 800cde0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cde4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	dc08      	bgt.n	800cdfe <GUI_RectsIntersect+0x36>
 800cdec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cdf0:	f9b1 2000 	ldrsh.w	r2, [r1]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	bfcc      	ite	gt
 800cdf8:	2000      	movgt	r0, #0
 800cdfa:	2001      	movle	r0, #1
 800cdfc:	4770      	bx	lr
 800cdfe:	2000      	movs	r0, #0
 800ce00:	4770      	bx	lr
	...

0800ce04 <GUI_SetPenSize>:
 800ce04:	4b02      	ldr	r3, [pc, #8]	; (800ce10 <GUI_SetPenSize+0xc>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	7e1a      	ldrb	r2, [r3, #24]
 800ce0a:	7618      	strb	r0, [r3, #24]
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4770      	bx	lr
 800ce10:	200001b0 	.word	0x200001b0

0800ce14 <GUI_MoveRect>:
 800ce14:	b168      	cbz	r0, 800ce32 <GUI_MoveRect+0x1e>
 800ce16:	8803      	ldrh	r3, [r0, #0]
 800ce18:	b289      	uxth	r1, r1
 800ce1a:	440b      	add	r3, r1
 800ce1c:	8003      	strh	r3, [r0, #0]
 800ce1e:	8883      	ldrh	r3, [r0, #4]
 800ce20:	4419      	add	r1, r3
 800ce22:	8843      	ldrh	r3, [r0, #2]
 800ce24:	8081      	strh	r1, [r0, #4]
 800ce26:	b292      	uxth	r2, r2
 800ce28:	4413      	add	r3, r2
 800ce2a:	8043      	strh	r3, [r0, #2]
 800ce2c:	88c3      	ldrh	r3, [r0, #6]
 800ce2e:	441a      	add	r2, r3
 800ce30:	80c2      	strh	r2, [r0, #6]
 800ce32:	4770      	bx	lr

0800ce34 <GUI_MergeRect>:
 800ce34:	b510      	push	{r4, lr}
 800ce36:	b338      	cbz	r0, 800ce88 <GUI_MergeRect+0x54>
 800ce38:	b309      	cbz	r1, 800ce7e <GUI_MergeRect+0x4a>
 800ce3a:	b30a      	cbz	r2, 800ce80 <GUI_MergeRect+0x4c>
 800ce3c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ce40:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ce44:	429c      	cmp	r4, r3
 800ce46:	bfb8      	it	lt
 800ce48:	4623      	movlt	r3, r4
 800ce4a:	8003      	strh	r3, [r0, #0]
 800ce4c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800ce50:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800ce54:	429c      	cmp	r4, r3
 800ce56:	bfb8      	it	lt
 800ce58:	4623      	movlt	r3, r4
 800ce5a:	8043      	strh	r3, [r0, #2]
 800ce5c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800ce60:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ce64:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800ce68:	429c      	cmp	r4, r3
 800ce6a:	bfa8      	it	ge
 800ce6c:	4623      	movge	r3, r4
 800ce6e:	8083      	strh	r3, [r0, #4]
 800ce70:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800ce74:	4299      	cmp	r1, r3
 800ce76:	bfa8      	it	ge
 800ce78:	460b      	movge	r3, r1
 800ce7a:	80c3      	strh	r3, [r0, #6]
 800ce7c:	bd10      	pop	{r4, pc}
 800ce7e:	4611      	mov	r1, r2
 800ce80:	680b      	ldr	r3, [r1, #0]
 800ce82:	6003      	str	r3, [r0, #0]
 800ce84:	684b      	ldr	r3, [r1, #4]
 800ce86:	6043      	str	r3, [r0, #4]
 800ce88:	bd10      	pop	{r4, pc}
	...

0800ce8c <GUI_GotoXY>:
 800ce8c:	4b02      	ldr	r3, [pc, #8]	; (800ce98 <GUI_GotoXY+0xc>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	8458      	strh	r0, [r3, #34]	; 0x22
 800ce92:	8499      	strh	r1, [r3, #36]	; 0x24
 800ce94:	2000      	movs	r0, #0
 800ce96:	4770      	bx	lr
 800ce98:	200001b0 	.word	0x200001b0

0800ce9c <GUI_GetOrg>:
 800ce9c:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <GUI_GetOrg+0x14>)
 800ce9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cea2:	6003      	str	r3, [r0, #0]
 800cea4:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <GUI_GetOrg+0x18>)
 800cea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ceaa:	600b      	str	r3, [r1, #0]
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	2001aefc 	.word	0x2001aefc
 800ceb4:	2001aef0 	.word	0x2001aef0

0800ceb8 <GUI_GetBkColor>:
 800ceb8:	b508      	push	{r3, lr}
 800ceba:	f001 f9d3 	bl	800e264 <LCD_GetBkColorIndex>
 800cebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cec2:	f7ff bb3b 	b.w	800c53c <LCD_Index2Color>

0800cec6 <GUI_GetColor>:
 800cec6:	b508      	push	{r3, lr}
 800cec8:	f001 f9d4 	bl	800e274 <LCD_GetColorIndex>
 800cecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ced0:	f7ff bb34 	b.w	800c53c <LCD_Index2Color>

0800ced4 <GUI_CURSOR_SetPositionEx>:
 800ced4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced6:	4606      	mov	r6, r0
 800ced8:	4610      	mov	r0, r2
 800ceda:	460d      	mov	r5, r1
 800cedc:	4614      	mov	r4, r2
 800cede:	f7ff ff29 	bl	800cd34 <GUI_GetCursorLayer>
 800cee2:	4f15      	ldr	r7, [pc, #84]	; (800cf38 <GUI_CURSOR_SetPositionEx+0x64>)
 800cee4:	2314      	movs	r3, #20
 800cee6:	b148      	cbz	r0, 800cefc <GUI_CURSOR_SetPositionEx+0x28>
 800cee8:	435c      	muls	r4, r3
 800ceea:	593b      	ldr	r3, [r7, r4]
 800ceec:	6859      	ldr	r1, [r3, #4]
 800ceee:	689a      	ldr	r2, [r3, #8]
 800cef0:	1a71      	subs	r1, r6, r1
 800cef2:	1aaa      	subs	r2, r5, r2
 800cef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cef8:	f7ff bf46 	b.w	800cd88 <GUI_SetLayerPosEx>
 800cefc:	fb03 7304 	mla	r3, r3, r4, r7
 800cf00:	f103 0208 	add.w	r2, r3, #8
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	42b3      	cmp	r3, r6
 800cf08:	d102      	bne.n	800cf10 <GUI_CURSOR_SetPositionEx+0x3c>
 800cf0a:	6853      	ldr	r3, [r2, #4]
 800cf0c:	42ab      	cmp	r3, r5
 800cf0e:	d011      	beq.n	800cf34 <GUI_CURSOR_SetPositionEx+0x60>
 800cf10:	2314      	movs	r3, #20
 800cf12:	4363      	muls	r3, r4
 800cf14:	18fa      	adds	r2, r7, r3
 800cf16:	6910      	ldr	r0, [r2, #16]
 800cf18:	b138      	cbz	r0, 800cf2a <GUI_CURSOR_SetPositionEx+0x56>
 800cf1a:	4a07      	ldr	r2, [pc, #28]	; (800cf38 <GUI_CURSOR_SetPositionEx+0x64>)
 800cf1c:	58d3      	ldr	r3, [r2, r3]
 800cf1e:	6859      	ldr	r1, [r3, #4]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	1a71      	subs	r1, r6, r1
 800cf24:	1aaa      	subs	r2, r5, r2
 800cf26:	f001 fd73 	bl	800ea10 <GUI_SPRITE_SetPosition>
 800cf2a:	2314      	movs	r3, #20
 800cf2c:	fb03 7404 	mla	r4, r3, r4, r7
 800cf30:	60a6      	str	r6, [r4, #8]
 800cf32:	60e5      	str	r5, [r4, #12]
 800cf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf36:	bf00      	nop
 800cf38:	200194f0 	.word	0x200194f0

0800cf3c <GUI_ALLOC_AllocZero>:
 800cf3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf3e:	4605      	mov	r5, r0
 800cf40:	f7fb fc20 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800cf44:	4606      	mov	r6, r0
 800cf46:	b158      	cbz	r0, 800cf60 <GUI_ALLOC_AllocZero+0x24>
 800cf48:	f7fb f9d4 	bl	80082f4 <GUI_ALLOC_LockH>
 800cf4c:	ac02      	add	r4, sp, #8
 800cf4e:	2100      	movs	r1, #0
 800cf50:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cf54:	462a      	mov	r2, r5
 800cf56:	f7f9 ff13 	bl	8006d80 <GUI__memset>
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7fb f9d8 	bl	8008310 <GUI_ALLOC_UnlockH>
 800cf60:	4630      	mov	r0, r6
 800cf62:	b002      	add	sp, #8
 800cf64:	bd70      	pop	{r4, r5, r6, pc}

0800cf66 <LCD_Index2Color_888>:
 800cf66:	4770      	bx	lr

0800cf68 <LCD_Index2Color_8888>:
 800cf68:	4770      	bx	lr

0800cf6a <_Color2Index_8888>:
 800cf6a:	4770      	bx	lr

0800cf6c <_GetIndexMask_8888>:
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf70:	4770      	bx	lr

0800cf72 <_Color2IndexBulk>:
 800cf72:	b510      	push	{r4, lr}
 800cf74:	f850 4b04 	ldr.w	r4, [r0], #4
 800cf78:	600c      	str	r4, [r1, #0]
 800cf7a:	3a01      	subs	r2, #1
 800cf7c:	4419      	add	r1, r3
 800cf7e:	d1f9      	bne.n	800cf74 <_Color2IndexBulk+0x2>
 800cf80:	bd10      	pop	{r4, pc}

0800cf82 <_Index2ColorBulk>:
 800cf82:	b510      	push	{r4, lr}
 800cf84:	6804      	ldr	r4, [r0, #0]
 800cf86:	f841 4b04 	str.w	r4, [r1], #4
 800cf8a:	3a01      	subs	r2, #1
 800cf8c:	4418      	add	r0, r3
 800cf8e:	d1f9      	bne.n	800cf84 <_Index2ColorBulk+0x2>
 800cf90:	bd10      	pop	{r4, pc}

0800cf92 <_GetIndexMask_0>:
 800cf92:	b508      	push	{r3, lr}
 800cf94:	f7fe fed4 	bl	800bd40 <LCD_GetNumColors>
 800cf98:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800cf9c:	d010      	beq.n	800cfc0 <_GetIndexMask_0+0x2e>
 800cf9e:	287f      	cmp	r0, #127	; 0x7f
 800cfa0:	d810      	bhi.n	800cfc4 <_GetIndexMask_0+0x32>
 800cfa2:	283f      	cmp	r0, #63	; 0x3f
 800cfa4:	d810      	bhi.n	800cfc8 <_GetIndexMask_0+0x36>
 800cfa6:	281f      	cmp	r0, #31
 800cfa8:	d810      	bhi.n	800cfcc <_GetIndexMask_0+0x3a>
 800cfaa:	280f      	cmp	r0, #15
 800cfac:	d810      	bhi.n	800cfd0 <_GetIndexMask_0+0x3e>
 800cfae:	2807      	cmp	r0, #7
 800cfb0:	d810      	bhi.n	800cfd4 <_GetIndexMask_0+0x42>
 800cfb2:	2803      	cmp	r0, #3
 800cfb4:	d810      	bhi.n	800cfd8 <_GetIndexMask_0+0x46>
 800cfb6:	2801      	cmp	r0, #1
 800cfb8:	bf94      	ite	ls
 800cfba:	2000      	movls	r0, #0
 800cfbc:	2001      	movhi	r0, #1
 800cfbe:	e00c      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfc0:	2008      	movs	r0, #8
 800cfc2:	e00a      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfc4:	2007      	movs	r0, #7
 800cfc6:	e008      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfc8:	2006      	movs	r0, #6
 800cfca:	e006      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfcc:	2005      	movs	r0, #5
 800cfce:	e004      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfd0:	2004      	movs	r0, #4
 800cfd2:	e002      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfd4:	2003      	movs	r0, #3
 800cfd6:	e000      	b.n	800cfda <_GetIndexMask_0+0x48>
 800cfd8:	2002      	movs	r0, #2
 800cfda:	2301      	movs	r3, #1
 800cfdc:	fa03 f000 	lsl.w	r0, r3, r0
 800cfe0:	3801      	subs	r0, #1
 800cfe2:	bd08      	pop	{r3, pc}

0800cfe4 <_Index2Color_0>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	f7fe feaa 	bl	800bd40 <LCD_GetNumColors>
 800cfec:	4605      	mov	r5, r0
 800cfee:	f7fe fec5 	bl	800bd7c <LCD_GetPalette>
 800cff2:	42ac      	cmp	r4, r5
 800cff4:	d203      	bcs.n	800cffe <_Index2Color_0+0x1a>
 800cff6:	b118      	cbz	r0, 800d000 <_Index2Color_0+0x1c>
 800cff8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cffc:	bd38      	pop	{r3, r4, r5, pc}
 800cffe:	2000      	movs	r0, #0
 800d000:	bd38      	pop	{r3, r4, r5, pc}

0800d002 <_Color2Index_0>:
 800d002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d006:	4681      	mov	r9, r0
 800d008:	f7fe fe9a 	bl	800bd40 <LCD_GetNumColors>
 800d00c:	4680      	mov	r8, r0
 800d00e:	f7fe feb5 	bl	800bd7c <LCD_GetPalette>
 800d012:	4606      	mov	r6, r0
 800d014:	b1d8      	cbz	r0, 800d04e <_Color2Index_0+0x4c>
 800d016:	2300      	movs	r3, #0
 800d018:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800d01c:	4591      	cmp	r9, r2
 800d01e:	d01a      	beq.n	800d056 <_Color2Index_0+0x54>
 800d020:	3301      	adds	r3, #1
 800d022:	4543      	cmp	r3, r8
 800d024:	dbf8      	blt.n	800d018 <_Color2Index_0+0x16>
 800d026:	2500      	movs	r5, #0
 800d028:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800d02c:	462c      	mov	r4, r5
 800d02e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800d032:	4648      	mov	r0, r9
 800d034:	f001 ffbf 	bl	800efb6 <GUI_CalcColorDist>
 800d038:	42b8      	cmp	r0, r7
 800d03a:	bf38      	it	cc
 800d03c:	4625      	movcc	r5, r4
 800d03e:	f104 0401 	add.w	r4, r4, #1
 800d042:	bf28      	it	cs
 800d044:	4638      	movcs	r0, r7
 800d046:	4544      	cmp	r4, r8
 800d048:	da02      	bge.n	800d050 <_Color2Index_0+0x4e>
 800d04a:	4607      	mov	r7, r0
 800d04c:	e7ef      	b.n	800d02e <_Color2Index_0+0x2c>
 800d04e:	4605      	mov	r5, r0
 800d050:	4628      	mov	r0, r5
 800d052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d056:	4618      	mov	r0, r3
 800d058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d05c <WM__SendMessageNoPara>:
 800d05c:	b530      	push	{r4, r5, lr}
 800d05e:	b085      	sub	sp, #20
 800d060:	4604      	mov	r4, r0
 800d062:	2210      	movs	r2, #16
 800d064:	460d      	mov	r5, r1
 800d066:	4668      	mov	r0, sp
 800d068:	2100      	movs	r1, #0
 800d06a:	f002 f95c 	bl	800f326 <memset>
 800d06e:	4620      	mov	r0, r4
 800d070:	f7fb f936 	bl	80082e0 <GUI_ALLOC_h2p>
 800d074:	6903      	ldr	r3, [r0, #16]
 800d076:	b11b      	cbz	r3, 800d080 <WM__SendMessageNoPara+0x24>
 800d078:	9401      	str	r4, [sp, #4]
 800d07a:	9500      	str	r5, [sp, #0]
 800d07c:	4668      	mov	r0, sp
 800d07e:	4798      	blx	r3
 800d080:	b005      	add	sp, #20
 800d082:	bd30      	pop	{r4, r5, pc}

0800d084 <WM__SendMessageIfEnabled>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4604      	mov	r4, r0
 800d088:	460d      	mov	r5, r1
 800d08a:	f000 f827 	bl	800d0dc <WM__IsEnabled>
 800d08e:	b128      	cbz	r0, 800d09c <WM__SendMessageIfEnabled+0x18>
 800d090:	4620      	mov	r0, r4
 800d092:	4629      	mov	r1, r5
 800d094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d098:	f000 b802 	b.w	800d0a0 <WM__SendMessage>
 800d09c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d0a0 <WM__SendMessage>:
 800d0a0:	b570      	push	{r4, r5, r6, lr}
 800d0a2:	4c0d      	ldr	r4, [pc, #52]	; (800d0d8 <WM__SendMessage+0x38>)
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	2b13      	cmp	r3, #19
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	dc12      	bgt.n	800d0d4 <WM__SendMessage+0x34>
 800d0ae:	f7fb f917 	bl	80082e0 <GUI_ALLOC_h2p>
 800d0b2:	6903      	ldr	r3, [r0, #16]
 800d0b4:	606e      	str	r6, [r5, #4]
 800d0b6:	b143      	cbz	r3, 800d0ca <WM__SendMessage+0x2a>
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	3201      	adds	r2, #1
 800d0be:	6022      	str	r2, [r4, #0]
 800d0c0:	4798      	blx	r3
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	6023      	str	r3, [r4, #0]
 800d0c8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0d0:	f7fc bf96 	b.w	800a000 <WM_DefaultProc>
 800d0d4:	bd70      	pop	{r4, r5, r6, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20019518 	.word	0x20019518

0800d0dc <WM__IsEnabled>:
 800d0dc:	b508      	push	{r3, lr}
 800d0de:	f7fb f8ff 	bl	80082e0 <GUI_ALLOC_h2p>
 800d0e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d0e4:	f080 0010 	eor.w	r0, r0, #16
 800d0e8:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800d0ec:	bd08      	pop	{r3, pc}

0800d0ee <WM__IsAncestor>:
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	b908      	cbnz	r0, 800d0f8 <WM__IsAncestor+0xa>
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	bd10      	pop	{r4, pc}
 800d0f8:	2900      	cmp	r1, #0
 800d0fa:	d0fb      	beq.n	800d0f4 <WM__IsAncestor+0x6>
 800d0fc:	f7fb f8f0 	bl	80082e0 <GUI_ALLOC_h2p>
 800d100:	6980      	ldr	r0, [r0, #24]
 800d102:	42a0      	cmp	r0, r4
 800d104:	d002      	beq.n	800d10c <WM__IsAncestor+0x1e>
 800d106:	2800      	cmp	r0, #0
 800d108:	d1f8      	bne.n	800d0fc <WM__IsAncestor+0xe>
 800d10a:	e7f3      	b.n	800d0f4 <WM__IsAncestor+0x6>
 800d10c:	2001      	movs	r0, #1
 800d10e:	bd10      	pop	{r4, pc}

0800d110 <WM_DeleteTimer>:
 800d110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d112:	4605      	mov	r5, r0
 800d114:	b168      	cbz	r0, 800d132 <WM_DeleteTimer+0x22>
 800d116:	f7fb f8ed 	bl	80082f4 <GUI_ALLOC_LockH>
 800d11a:	ac02      	add	r4, sp, #8
 800d11c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d120:	6800      	ldr	r0, [r0, #0]
 800d122:	f7ff fd69 	bl	800cbf8 <GUI_TIMER_Delete>
 800d126:	4620      	mov	r0, r4
 800d128:	f7fb f8f2 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d12c:	4628      	mov	r0, r5
 800d12e:	f7fb f90f 	bl	8008350 <GUI_ALLOC_Free>
 800d132:	b003      	add	sp, #12
 800d134:	bd30      	pop	{r4, r5, pc}

0800d136 <WM__DeleteAssocTimer>:
 800d136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d138:	4605      	mov	r5, r0
 800d13a:	a801      	add	r0, sp, #4
 800d13c:	f7ff fd28 	bl	800cb90 <GUI_TIMER__GetFirstTimer>
 800d140:	4604      	mov	r4, r0
 800d142:	b1dc      	cbz	r4, 800d17c <WM__DeleteAssocTimer+0x46>
 800d144:	4620      	mov	r0, r4
 800d146:	2101      	movs	r1, #1
 800d148:	f7ff fd8a 	bl	800cc60 <GUI_TIMER_GetFlag>
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	b183      	cbz	r3, 800d172 <WM__DeleteAssocTimer+0x3c>
 800d150:	b178      	cbz	r0, 800d172 <WM__DeleteAssocTimer+0x3c>
 800d152:	4618      	mov	r0, r3
 800d154:	f7fb f8c4 	bl	80082e0 <GUI_ALLOC_h2p>
 800d158:	6843      	ldr	r3, [r0, #4]
 800d15a:	42ab      	cmp	r3, r5
 800d15c:	d109      	bne.n	800d172 <WM__DeleteAssocTimer+0x3c>
 800d15e:	4620      	mov	r0, r4
 800d160:	a901      	add	r1, sp, #4
 800d162:	9e01      	ldr	r6, [sp, #4]
 800d164:	f7ff fd2c 	bl	800cbc0 <GUI_TIMER__GetNextTimerLin>
 800d168:	4604      	mov	r4, r0
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff ffd0 	bl	800d110 <WM_DeleteTimer>
 800d170:	e7e7      	b.n	800d142 <WM__DeleteAssocTimer+0xc>
 800d172:	4620      	mov	r0, r4
 800d174:	a901      	add	r1, sp, #4
 800d176:	f7ff fd23 	bl	800cbc0 <GUI_TIMER__GetNextTimerLin>
 800d17a:	e7e1      	b.n	800d140 <WM__DeleteAssocTimer+0xa>
 800d17c:	b002      	add	sp, #8
 800d17e:	bd70      	pop	{r4, r5, r6, pc}

0800d180 <WM_SetSize>:
 800d180:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800d184:	460e      	mov	r6, r1
 800d186:	4690      	mov	r8, r2
 800d188:	4607      	mov	r7, r0
 800d18a:	b1d0      	cbz	r0, 800d1c2 <WM_SetSize+0x42>
 800d18c:	f7fb f8b2 	bl	80082f4 <GUI_ALLOC_LockH>
 800d190:	4603      	mov	r3, r0
 800d192:	a802      	add	r0, sp, #8
 800d194:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d198:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d19c:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800d1a0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d1a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d1a8:	1a8a      	subs	r2, r1, r2
 800d1aa:	1aed      	subs	r5, r5, r3
 800d1ac:	43d2      	mvns	r2, r2
 800d1ae:	43ed      	mvns	r5, r5
 800d1b0:	4416      	add	r6, r2
 800d1b2:	4445      	add	r5, r8
 800d1b4:	f7fb f8ac 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	462a      	mov	r2, r5
 800d1be:	f000 f813 	bl	800d1e8 <WM_ResizeWindow>
 800d1c2:	b003      	add	sp, #12
 800d1c4:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800d1c8 <WM_SendToParent>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	b141      	cbz	r1, 800d1e2 <WM_SendToParent+0x1a>
 800d1d0:	f7fb fe26 	bl	8008e20 <WM_GetParent>
 800d1d4:	b128      	cbz	r0, 800d1e2 <WM_SendToParent+0x1a>
 800d1d6:	60a5      	str	r5, [r4, #8]
 800d1d8:	4621      	mov	r1, r4
 800d1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1de:	f7ff bf5f 	b.w	800d0a0 <WM__SendMessage>
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}

0800d1e4 <WM_SendMessageNoPara>:
 800d1e4:	f7ff bf3a 	b.w	800d05c <WM__SendMessageNoPara>

0800d1e8 <WM_ResizeWindow>:
 800d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ec:	ea51 0302 	orrs.w	r3, r1, r2
 800d1f0:	b08a      	sub	sp, #40	; 0x28
 800d1f2:	4680      	mov	r8, r0
 800d1f4:	460e      	mov	r6, r1
 800d1f6:	4617      	mov	r7, r2
 800d1f8:	d06e      	beq.n	800d2d8 <WM_ResizeWindow+0xf0>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	d06c      	beq.n	800d2d8 <WM_ResizeWindow+0xf0>
 800d1fe:	f7fb f879 	bl	80082f4 <GUI_ALLOC_LockH>
 800d202:	4603      	mov	r3, r0
 800d204:	9003      	str	r0, [sp, #12]
 800d206:	c803      	ldmia	r0, {r0, r1}
 800d208:	ad04      	add	r5, sp, #16
 800d20a:	ac06      	add	r4, sp, #24
 800d20c:	e885 0003 	stmia.w	r5, {r0, r1}
 800d210:	e884 0003 	stmia.w	r4, {r0, r1}
 800d214:	b17e      	cbz	r6, 800d236 <WM_ResizeWindow+0x4e>
 800d216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d218:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800d21c:	2a80      	cmp	r2, #128	; 0x80
 800d21e:	d105      	bne.n	800d22c <WM_ResizeWindow+0x44>
 800d220:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800d224:	1b96      	subs	r6, r2, r6
 800d226:	f8ad 6018 	strh.w	r6, [sp, #24]
 800d22a:	e004      	b.n	800d236 <WM_ResizeWindow+0x4e>
 800d22c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d230:	4416      	add	r6, r2
 800d232:	f8ad 601c 	strh.w	r6, [sp, #28]
 800d236:	b187      	cbz	r7, 800d25a <WM_ResizeWindow+0x72>
 800d238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d23a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800d23e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d242:	d105      	bne.n	800d250 <WM_ResizeWindow+0x68>
 800d244:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d248:	1bd7      	subs	r7, r2, r7
 800d24a:	f8ad 701a 	strh.w	r7, [sp, #26]
 800d24e:	e004      	b.n	800d25a <WM_ResizeWindow+0x72>
 800d250:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d254:	4417      	add	r7, r2
 800d256:	f8ad 701e 	strh.w	r7, [sp, #30]
 800d25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25c:	03da      	lsls	r2, r3, #15
 800d25e:	d502      	bpl.n	800d266 <WM_ResizeWindow+0x7e>
 800d260:	4640      	mov	r0, r8
 800d262:	f7fc f941 	bl	80094e8 <WM__InvalidateDrawAndDescs>
 800d266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d26a:	9b03      	ldr	r3, [sp, #12]
 800d26c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d272:	079b      	lsls	r3, r3, #30
 800d274:	d50a      	bpl.n	800d28c <WM_ResizeWindow+0xa4>
 800d276:	a808      	add	r0, sp, #32
 800d278:	4629      	mov	r1, r5
 800d27a:	4622      	mov	r2, r4
 800d27c:	f7ff fdda 	bl	800ce34 <GUI_MergeRect>
 800d280:	9b03      	ldr	r3, [sp, #12]
 800d282:	a808      	add	r0, sp, #32
 800d284:	6999      	ldr	r1, [r3, #24]
 800d286:	6a1a      	ldr	r2, [r3, #32]
 800d288:	f7fc fa32 	bl	80096f0 <WM__InvalidateRectEx>
 800d28c:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800d290:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d294:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 800d298:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800d29c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 800d2a0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800d2a4:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800d2a8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800d2ac:	1ae3      	subs	r3, r4, r3
 800d2ae:	1a38      	subs	r0, r7, r0
 800d2b0:	ac0a      	add	r4, sp, #40	; 0x28
 800d2b2:	1aaa      	subs	r2, r5, r2
 800d2b4:	9000      	str	r0, [sp, #0]
 800d2b6:	1a71      	subs	r1, r6, r1
 800d2b8:	9803      	ldr	r0, [sp, #12]
 800d2ba:	f001 fea4 	bl	800f006 <WM__UpdateChildPositions>
 800d2be:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800d2c2:	f101 0008 	add.w	r0, r1, #8
 800d2c6:	f7ff fa3f 	bl	800c748 <GUI__IntersectRect>
 800d2ca:	4640      	mov	r0, r8
 800d2cc:	2105      	movs	r1, #5
 800d2ce:	f7fc fa27 	bl	8009720 <WM__SendMsgNoData>
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f7fb f81c 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d2d8:	b00a      	add	sp, #40	; 0x28
 800d2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2de <WM_NotifyParent>:
 800d2de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2e0:	2326      	movs	r3, #38	; 0x26
 800d2e2:	9103      	str	r1, [sp, #12]
 800d2e4:	4669      	mov	r1, sp
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	f7ff ff6e 	bl	800d1c8 <WM_SendToParent>
 800d2ec:	b005      	add	sp, #20
 800d2ee:	f85d fb04 	ldr.w	pc, [sp], #4

0800d2f2 <WM_GetWindowOrgX>:
 800d2f2:	b508      	push	{r3, lr}
 800d2f4:	b120      	cbz	r0, 800d300 <WM_GetWindowOrgX+0xe>
 800d2f6:	f7fa fff3 	bl	80082e0 <GUI_ALLOC_h2p>
 800d2fa:	f9b0 0000 	ldrsh.w	r0, [r0]
 800d2fe:	bd08      	pop	{r3, pc}
 800d300:	bd08      	pop	{r3, pc}

0800d302 <WM_GetFirstChild>:
 800d302:	b508      	push	{r3, lr}
 800d304:	4603      	mov	r3, r0
 800d306:	b110      	cbz	r0, 800d30e <WM_GetFirstChild+0xc>
 800d308:	f7fa ffea 	bl	80082e0 <GUI_ALLOC_h2p>
 800d30c:	69c3      	ldr	r3, [r0, #28]
 800d30e:	4618      	mov	r0, r3
 800d310:	bd08      	pop	{r3, pc}

0800d312 <WM__GetClientRectEx>:
 800d312:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d314:	460d      	mov	r5, r1
 800d316:	b158      	cbz	r0, 800d330 <WM__GetClientRectEx+0x1e>
 800d318:	b151      	cbz	r1, 800d330 <WM__GetClientRectEx+0x1e>
 800d31a:	f7fa ffeb 	bl	80082f4 <GUI_ALLOC_LockH>
 800d31e:	ac02      	add	r4, sp, #8
 800d320:	4629      	mov	r1, r5
 800d322:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d326:	f7fc fa06 	bl	8009736 <WM__GetClientRectWin>
 800d32a:	4620      	mov	r0, r4
 800d32c:	f7fa fff0 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d330:	b003      	add	sp, #12
 800d332:	bd30      	pop	{r4, r5, pc}

0800d334 <WM_BringToBottom>:
 800d334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d338:	4604      	mov	r4, r0
 800d33a:	b087      	sub	sp, #28
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d039      	beq.n	800d3b4 <WM_BringToBottom+0x80>
 800d340:	f7fa ffd8 	bl	80082f4 <GUI_ALLOC_LockH>
 800d344:	4603      	mov	r3, r0
 800d346:	9001      	str	r0, [sp, #4]
 800d348:	c803      	ldmia	r0, {r0, r1}
 800d34a:	ad04      	add	r5, sp, #16
 800d34c:	e885 0003 	stmia.w	r5, {r0, r1}
 800d350:	a801      	add	r0, sp, #4
 800d352:	6a1e      	ldr	r6, [r3, #32]
 800d354:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800d358:	f7fa ffda 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d35c:	4620      	mov	r0, r4
 800d35e:	f001 fecc 	bl	800f0fa <WM__GetPrevSibling>
 800d362:	4607      	mov	r7, r0
 800d364:	b330      	cbz	r0, 800d3b4 <WM_BringToBottom+0x80>
 800d366:	4620      	mov	r0, r4
 800d368:	f7fb fd5a 	bl	8008e20 <WM_GetParent>
 800d36c:	f019 0f02 	tst.w	r9, #2
 800d370:	4680      	mov	r8, r0
 800d372:	d004      	beq.n	800d37e <WM_BringToBottom+0x4a>
 800d374:	4628      	mov	r0, r5
 800d376:	4641      	mov	r1, r8
 800d378:	4632      	mov	r2, r6
 800d37a:	f7fc f9b9 	bl	80096f0 <WM__InvalidateRectEx>
 800d37e:	4620      	mov	r0, r4
 800d380:	f7fa ffb8 	bl	80082f4 <GUI_ALLOC_LockH>
 800d384:	9001      	str	r0, [sp, #4]
 800d386:	4640      	mov	r0, r8
 800d388:	f7fa ffb4 	bl	80082f4 <GUI_ALLOC_LockH>
 800d38c:	9003      	str	r0, [sp, #12]
 800d38e:	4638      	mov	r0, r7
 800d390:	f7fa ffb0 	bl	80082f4 <GUI_ALLOC_LockH>
 800d394:	9b03      	ldr	r3, [sp, #12]
 800d396:	9a01      	ldr	r2, [sp, #4]
 800d398:	69d9      	ldr	r1, [r3, #28]
 800d39a:	6206      	str	r6, [r0, #32]
 800d39c:	9002      	str	r0, [sp, #8]
 800d39e:	6211      	str	r1, [r2, #32]
 800d3a0:	a801      	add	r0, sp, #4
 800d3a2:	61dc      	str	r4, [r3, #28]
 800d3a4:	f7fa ffb4 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d3a8:	a803      	add	r0, sp, #12
 800d3aa:	f7fa ffb1 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d3ae:	a802      	add	r0, sp, #8
 800d3b0:	f7fa ffae 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d3b4:	b007      	add	sp, #28
 800d3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d3ba <_Convert16>:
 800d3ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3be:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d3c2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	460e      	mov	r6, r1
 800d3ca:	4690      	mov	r8, r2
 800d3cc:	461f      	mov	r7, r3
 800d3ce:	4614      	mov	r4, r2
 800d3d0:	4689      	mov	r9, r1
 800d3d2:	f835 0b02 	ldrh.w	r0, [r5], #2
 800d3d6:	47d8      	blx	fp
 800d3d8:	47d0      	blx	sl
 800d3da:	3c01      	subs	r4, #1
 800d3dc:	f849 0b04 	str.w	r0, [r9], #4
 800d3e0:	d1f7      	bne.n	800d3d2 <_Convert16+0x18>
 800d3e2:	2f1f      	cmp	r7, #31
 800d3e4:	d806      	bhi.n	800d3f4 <_Convert16+0x3a>
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4641      	mov	r1, r8
 800d3ea:	463a      	mov	r2, r7
 800d3ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	f001 b80b 	b.w	800e40a <GUI__CompactPixelIndices>
 800d3f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3f8 <_Convert8>:
 800d3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d400:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800d404:	4605      	mov	r5, r0
 800d406:	460e      	mov	r6, r1
 800d408:	4690      	mov	r8, r2
 800d40a:	461f      	mov	r7, r3
 800d40c:	4689      	mov	r9, r1
 800d40e:	4604      	mov	r4, r0
 800d410:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d414:	47d8      	blx	fp
 800d416:	47d0      	blx	sl
 800d418:	1b2b      	subs	r3, r5, r4
 800d41a:	4443      	add	r3, r8
 800d41c:	f849 0b04 	str.w	r0, [r9], #4
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1f5      	bne.n	800d410 <_Convert8+0x18>
 800d424:	2f1f      	cmp	r7, #31
 800d426:	d806      	bhi.n	800d436 <_Convert8+0x3e>
 800d428:	4630      	mov	r0, r6
 800d42a:	4641      	mov	r1, r8
 800d42c:	463a      	mov	r2, r7
 800d42e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d432:	f000 bfea 	b.w	800e40a <GUI__CompactPixelIndices>
 800d436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d43c <GUI_MEMDEV__WriteToActiveOpaque>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	b09d      	sub	sp, #116	; 0x74
 800d442:	4606      	mov	r6, r0
 800d444:	910f      	str	r1, [sp, #60]	; 0x3c
 800d446:	920d      	str	r2, [sp, #52]	; 0x34
 800d448:	2800      	cmp	r0, #0
 800d44a:	f000 8386 	beq.w	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d44e:	f7fa ff51 	bl	80082f4 <GUI_ALLOC_LockH>
 800d452:	ab1c      	add	r3, sp, #112	; 0x70
 800d454:	6944      	ldr	r4, [r0, #20]
 800d456:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fa ff58 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d460:	4630      	mov	r0, r6
 800d462:	f7fe fb0f 	bl	800ba84 <GUI_MEMDEV_GetBitsPerPixel>
 800d466:	2808      	cmp	r0, #8
 800d468:	4601      	mov	r1, r0
 800d46a:	dd02      	ble.n	800d472 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800d46c:	2c00      	cmp	r4, #0
 800d46e:	f000 81c3 	beq.w	800d7f8 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800d472:	2201      	movs	r2, #1
 800d474:	f04f 0800 	mov.w	r8, #0
 800d478:	4630      	mov	r0, r6
 800d47a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d47c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d47e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d482:	f7fa ff37 	bl	80082f4 <GUI_ALLOC_LockH>
 800d486:	6803      	ldr	r3, [r0, #0]
 800d488:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800da98 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	930e      	str	r3, [sp, #56]	; 0x38
 800d496:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800d49a:	f8da 3000 	ldr.w	r3, [sl]
 800d49e:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800d4a2:	6904      	ldr	r4, [r0, #16]
 800d4a4:	6945      	ldr	r5, [r0, #20]
 800d4a6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800d4aa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800d4ae:	7c58      	ldrb	r0, [r3, #17]
 800d4b0:	9112      	str	r1, [sp, #72]	; 0x48
 800d4b2:	f7fe fc4d 	bl	800bd50 <GUI_GetBitsPerPixelEx>
 800d4b6:	f8da 3000 	ldr.w	r3, [sl]
 800d4ba:	9010      	str	r0, [sp, #64]	; 0x40
 800d4bc:	7c58      	ldrb	r0, [r3, #17]
 800d4be:	f7fe fc65 	bl	800bd8c <GUI_GetpfIndex2ColorEx>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4658      	mov	r0, fp
 800d4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c8:	f7fa ff22 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d4cc:	2c08      	cmp	r4, #8
 800d4ce:	4651      	mov	r1, sl
 800d4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d4:	d904      	bls.n	800d4e0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800d4d6:	2c10      	cmp	r4, #16
 800d4d8:	bf8c      	ite	hi
 800d4da:	2204      	movhi	r2, #4
 800d4dc:	2202      	movls	r2, #2
 800d4de:	e005      	b.n	800d4ec <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800d4e0:	2c01      	cmp	r4, #1
 800d4e2:	d103      	bne.n	800d4ec <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800d4e4:	9411      	str	r4, [sp, #68]	; 0x44
 800d4e6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800d4ea:	e000      	b.n	800d4ee <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800d4ec:	9211      	str	r2, [sp, #68]	; 0x44
 800d4ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d4f0:	4298      	cmp	r0, r3
 800d4f2:	f000 80e2 	beq.w	800d6ba <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800d4f6:	680b      	ldr	r3, [r1, #0]
 800d4f8:	7c58      	ldrb	r0, [r3, #17]
 800d4fa:	f7fe fc4f 	bl	800bd9c <GUI_GetpfColor2IndexEx>
 800d4fe:	9013      	str	r0, [sp, #76]	; 0x4c
 800d500:	00b8      	lsls	r0, r7, #2
 800d502:	f7fb f93f 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800d506:	900c      	str	r0, [sp, #48]	; 0x30
 800d508:	2800      	cmp	r0, #0
 800d50a:	f000 8326 	beq.w	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d50e:	4630      	mov	r0, r6
 800d510:	f7fc ff4e 	bl	800a3b0 <GUI_MEMDEV_GetDataPtr>
 800d514:	4606      	mov	r6, r0
 800d516:	2d00      	cmp	r5, #0
 800d518:	f000 80be 	beq.w	800d698 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800d51c:	4628      	mov	r0, r5
 800d51e:	f7fa fee9 	bl	80082f4 <GUI_ALLOC_LockH>
 800d522:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800d526:	9018      	str	r0, [sp, #96]	; 0x60
 800d528:	f04f 0a00 	mov.w	sl, #0
 800d52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d52e:	4592      	cmp	sl, r2
 800d530:	f280 80ae 	bge.w	800d690 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800d534:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d536:	2300      	movs	r3, #0
 800d538:	9319      	str	r3, [sp, #100]	; 0x64
 800d53a:	6883      	ldr	r3, [r0, #8]
 800d53c:	a919      	add	r1, sp, #100	; 0x64
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	4652      	mov	r2, sl
 800d542:	4798      	blx	r3
 800d544:	42b8      	cmp	r0, r7
 800d546:	4605      	mov	r5, r0
 800d548:	d12f      	bne.n	800d5aa <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800d54a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d54c:	f7fa fed2 	bl	80082f4 <GUI_ALLOC_LockH>
 800d550:	2c08      	cmp	r4, #8
 800d552:	4601      	mov	r1, r0
 800d554:	9016      	str	r0, [sp, #88]	; 0x58
 800d556:	d909      	bls.n	800d56c <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800d558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d55a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d55c:	9200      	str	r2, [sp, #0]
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	4630      	mov	r0, r6
 800d562:	463a      	mov	r2, r7
 800d564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d566:	f7ff ff28 	bl	800d3ba <_Convert16>
 800d56a:	e008      	b.n	800d57e <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800d56c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d56e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d570:	9000      	str	r0, [sp, #0]
 800d572:	9201      	str	r2, [sp, #4]
 800d574:	4630      	mov	r0, r6
 800d576:	463a      	mov	r2, r7
 800d578:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d57a:	f7ff ff3d 	bl	800d3f8 <_Convert8>
 800d57e:	2301      	movs	r3, #1
 800d580:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d582:	9002      	str	r0, [sp, #8]
 800d584:	ad1c      	add	r5, sp, #112	; 0x70
 800d586:	2200      	movs	r2, #0
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	9203      	str	r2, [sp, #12]
 800d58e:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800d592:	9204      	str	r2, [sp, #16]
 800d594:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d596:	f8cd 8014 	str.w	r8, [sp, #20]
 800d59a:	4659      	mov	r1, fp
 800d59c:	463a      	mov	r2, r7
 800d59e:	f7fe fe57 	bl	800c250 <LCD_DrawBitmap>
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	f7fa feb4 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d5a8:	e060      	b.n	800d66c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800d5aa:	2c01      	cmp	r4, #1
 800d5ac:	d15c      	bne.n	800d668 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	d05c      	beq.n	800d66c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800d5b2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d5b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d5b6:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5ba:	2208      	movs	r2, #8
 800d5bc:	fb90 f2f2 	sdiv	r2, r0, r2
 800d5c0:	4432      	add	r2, r6
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	9204      	str	r2, [sp, #16]
 800d5c6:	f000 0207 	and.w	r2, r0, #7
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	4408      	add	r0, r1
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	9302      	str	r3, [sp, #8]
 800d5d2:	9206      	str	r2, [sp, #24]
 800d5d4:	4659      	mov	r1, fp
 800d5d6:	462a      	mov	r2, r5
 800d5d8:	f8cd 8014 	str.w	r8, [sp, #20]
 800d5dc:	f7fe fd5c 	bl	800c098 <LCD__DrawBitmap_1bpp>
 800d5e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d5e4:	441d      	add	r5, r3
 800d5e6:	6883      	ldr	r3, [r0, #8]
 800d5e8:	9519      	str	r5, [sp, #100]	; 0x64
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	a919      	add	r1, sp, #100	; 0x64
 800d5ee:	4652      	mov	r2, sl
 800d5f0:	4798      	blx	r3
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	e7db      	b.n	800d5ae <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800d5f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5f8:	f7fa fe7c 	bl	80082f4 <GUI_ALLOC_LockH>
 800d5fc:	2c08      	cmp	r4, #8
 800d5fe:	4601      	mov	r1, r0
 800d600:	9016      	str	r0, [sp, #88]	; 0x58
 800d602:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d604:	d938      	bls.n	800d678 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800d606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d608:	9200      	str	r2, [sp, #0]
 800d60a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d60c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	fb00 6002 	mla	r0, r0, r2, r6
 800d614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d616:	462a      	mov	r2, r5
 800d618:	f7ff fecf 	bl	800d3ba <_Convert16>
 800d61c:	2301      	movs	r3, #1
 800d61e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800d622:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	2200      	movs	r2, #0
 800d628:	9301      	str	r3, [sp, #4]
 800d62a:	9002      	str	r0, [sp, #8]
 800d62c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d62e:	9203      	str	r2, [sp, #12]
 800d630:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d632:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800d636:	9204      	str	r2, [sp, #16]
 800d638:	4408      	add	r0, r1
 800d63a:	462a      	mov	r2, r5
 800d63c:	4659      	mov	r1, fp
 800d63e:	f8cd 8014 	str.w	r8, [sp, #20]
 800d642:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800d646:	f7fe fe03 	bl	800c250 <LCD_DrawBitmap>
 800d64a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800d64e:	4660      	mov	r0, ip
 800d650:	f7fa fe5e 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d654:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d656:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d658:	441d      	add	r5, r3
 800d65a:	6883      	ldr	r3, [r0, #8]
 800d65c:	9519      	str	r5, [sp, #100]	; 0x64
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	a919      	add	r1, sp, #100	; 0x64
 800d662:	4652      	mov	r2, sl
 800d664:	4798      	blx	r3
 800d666:	4605      	mov	r5, r0
 800d668:	2d00      	cmp	r5, #0
 800d66a:	d1c4      	bne.n	800d5f6 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800d66c:	444e      	add	r6, r9
 800d66e:	f10a 0a01 	add.w	sl, sl, #1
 800d672:	f10b 0b01 	add.w	fp, fp, #1
 800d676:	e759      	b.n	800d52c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800d678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d67e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d680:	9201      	str	r2, [sp, #4]
 800d682:	fb00 6003 	mla	r0, r0, r3, r6
 800d686:	462a      	mov	r2, r5
 800d688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d68a:	f7ff feb5 	bl	800d3f8 <_Convert8>
 800d68e:	e7c5      	b.n	800d61c <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800d690:	a818      	add	r0, sp, #96	; 0x60
 800d692:	f7fa fe3d 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d696:	e00e      	b.n	800d6b6 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800d698:	2301      	movs	r3, #1
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	9004      	str	r0, [sp, #16]
 800d6a0:	9402      	str	r4, [sp, #8]
 800d6a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6a6:	f8cd 8014 	str.w	r8, [sp, #20]
 800d6aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d6ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d6ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6b0:	463a      	mov	r2, r7
 800d6b2:	f7fe fdcd 	bl	800c250 <LCD_DrawBitmap>
 800d6b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d6b8:	e24d      	b.n	800db56 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7fc fe78 	bl	800a3b0 <GUI_MEMDEV_GetDataPtr>
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	2d00      	cmp	r5, #0
 800d6c4:	f000 808a 	beq.w	800d7dc <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	f7fa fe13 	bl	80082f4 <GUI_ALLOC_LockH>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	9018      	str	r0, [sp, #96]	; 0x60
 800d6d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6d4:	429d      	cmp	r5, r3
 800d6d6:	da7d      	bge.n	800d7d4 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800d6d8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9319      	str	r3, [sp, #100]	; 0x64
 800d6de:	6883      	ldr	r3, [r0, #8]
 800d6e0:	a919      	add	r1, sp, #100	; 0x64
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	462a      	mov	r2, r5
 800d6e6:	4798      	blx	r3
 800d6e8:	42b8      	cmp	r0, r7
 800d6ea:	4682      	mov	sl, r0
 800d6ec:	d124      	bne.n	800d738 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800d6ee:	46aa      	mov	sl, r5
 800d6f0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d6f2:	6883      	ldr	r3, [r0, #8]
 800d6f4:	f10a 0b01 	add.w	fp, sl, #1
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	a919      	add	r1, sp, #100	; 0x64
 800d6fc:	465a      	mov	r2, fp
 800d6fe:	4798      	blx	r3
 800d700:	42b8      	cmp	r0, r7
 800d702:	d101      	bne.n	800d708 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800d704:	46da      	mov	sl, fp
 800d706:	e7f3      	b.n	800d6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800d708:	ebc5 0b0a 	rsb	fp, r5, sl
 800d70c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d70e:	9604      	str	r6, [sp, #16]
 800d710:	2301      	movs	r3, #1
 800d712:	f10b 0b01 	add.w	fp, fp, #1
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	4429      	add	r1, r5
 800d71c:	9402      	str	r4, [sp, #8]
 800d71e:	f8cd 900c 	str.w	r9, [sp, #12]
 800d722:	f8cd 8014 	str.w	r8, [sp, #20]
 800d726:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d728:	463a      	mov	r2, r7
 800d72a:	465b      	mov	r3, fp
 800d72c:	f7fe fd90 	bl	800c250 <LCD_DrawBitmap>
 800d730:	fb09 660b 	mla	r6, r9, fp, r6
 800d734:	4655      	mov	r5, sl
 800d736:	e04b      	b.n	800d7d0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800d738:	2c01      	cmp	r4, #1
 800d73a:	d127      	bne.n	800d78c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800d73c:	f1ba 0f00 	cmp.w	sl, #0
 800d740:	d022      	beq.n	800d788 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800d742:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d744:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d746:	f8cd 900c 	str.w	r9, [sp, #12]
 800d74a:	2208      	movs	r2, #8
 800d74c:	fb90 f2f2 	sdiv	r2, r0, r2
 800d750:	4432      	add	r2, r6
 800d752:	9204      	str	r2, [sp, #16]
 800d754:	f000 0207 	and.w	r2, r0, #7
 800d758:	4408      	add	r0, r1
 800d75a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d75c:	9206      	str	r2, [sp, #24]
 800d75e:	2301      	movs	r3, #1
 800d760:	4652      	mov	r2, sl
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	9302      	str	r3, [sp, #8]
 800d768:	4429      	add	r1, r5
 800d76a:	f8cd 8014 	str.w	r8, [sp, #20]
 800d76e:	f7fe fc93 	bl	800c098 <LCD__DrawBitmap_1bpp>
 800d772:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d774:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d776:	4453      	add	r3, sl
 800d778:	9319      	str	r3, [sp, #100]	; 0x64
 800d77a:	6883      	ldr	r3, [r0, #8]
 800d77c:	a919      	add	r1, sp, #100	; 0x64
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	462a      	mov	r2, r5
 800d782:	4798      	blx	r3
 800d784:	4682      	mov	sl, r0
 800d786:	e7d9      	b.n	800d73c <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800d788:	444e      	add	r6, r9
 800d78a:	e021      	b.n	800d7d0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800d78c:	f1ba 0f00 	cmp.w	sl, #0
 800d790:	d0fa      	beq.n	800d788 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800d792:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d794:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d796:	9402      	str	r4, [sp, #8]
 800d798:	fb00 6201 	mla	r2, r0, r1, r6
 800d79c:	9204      	str	r2, [sp, #16]
 800d79e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	4410      	add	r0, r2
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	4652      	mov	r2, sl
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	4429      	add	r1, r5
 800d7b2:	f8cd 8014 	str.w	r8, [sp, #20]
 800d7b6:	f7fe fd4b 	bl	800c250 <LCD_DrawBitmap>
 800d7ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d7bc:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d7be:	4453      	add	r3, sl
 800d7c0:	9319      	str	r3, [sp, #100]	; 0x64
 800d7c2:	6883      	ldr	r3, [r0, #8]
 800d7c4:	a919      	add	r1, sp, #100	; 0x64
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	4798      	blx	r3
 800d7cc:	4682      	mov	sl, r0
 800d7ce:	e7dd      	b.n	800d78c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800d7d0:	3501      	adds	r5, #1
 800d7d2:	e77e      	b.n	800d6d2 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800d7d4:	a818      	add	r0, sp, #96	; 0x60
 800d7d6:	f7fa fd9b 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d7da:	e1be      	b.n	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	9301      	str	r3, [sp, #4]
 800d7e2:	9004      	str	r0, [sp, #16]
 800d7e4:	9402      	str	r4, [sp, #8]
 800d7e6:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7ea:	f8cd 8014 	str.w	r8, [sp, #20]
 800d7ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d7f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7f4:	463a      	mov	r2, r7
 800d7f6:	e041      	b.n	800d87c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	910a      	str	r1, [sp, #40]	; 0x28
 800d7fc:	f7fa fd7a 	bl	80082f4 <GUI_ALLOC_LockH>
 800d800:	4682      	mov	sl, r0
 800d802:	a81c      	add	r0, sp, #112	; 0x70
 800d804:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800d808:	f840 ad10 	str.w	sl, [r0, #-16]!
 800d80c:	f8da 4000 	ldr.w	r4, [sl]
 800d810:	9210      	str	r2, [sp, #64]	; 0x40
 800d812:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d816:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800d81a:	4c9e      	ldr	r4, [pc, #632]	; (800da94 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800d81c:	b213      	sxth	r3, r2
 800d81e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800d822:	920b      	str	r2, [sp, #44]	; 0x2c
 800d824:	9309      	str	r3, [sp, #36]	; 0x24
 800d826:	f7fa fd73 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d82a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800d82e:	900e      	str	r0, [sp, #56]	; 0x38
 800d830:	4899      	ldr	r0, [pc, #612]	; (800da98 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800d832:	6800      	ldr	r0, [r0, #0]
 800d834:	7c40      	ldrb	r0, [r0, #17]
 800d836:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800d83a:	6925      	ldr	r5, [r4, #16]
 800d83c:	f8d5 8000 	ldr.w	r8, [r5]
 800d840:	f7fe fa86 	bl	800bd50 <GUI_GetBitsPerPixelEx>
 800d844:	2808      	cmp	r0, #8
 800d846:	fa0f fb87 	sxth.w	fp, r7
 800d84a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d850:	d904      	bls.n	800d85c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800d852:	2810      	cmp	r0, #16
 800d854:	bf8c      	ite	hi
 800d856:	2404      	movhi	r4, #4
 800d858:	2402      	movls	r4, #2
 800d85a:	e000      	b.n	800d85e <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800d85c:	2401      	movs	r4, #1
 800d85e:	45a9      	cmp	r9, r5
 800d860:	d10f      	bne.n	800d882 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800d862:	2001      	movs	r0, #1
 800d864:	9203      	str	r2, [sp, #12]
 800d866:	f10a 0218 	add.w	r2, sl, #24
 800d86a:	9000      	str	r0, [sp, #0]
 800d86c:	9001      	str	r0, [sp, #4]
 800d86e:	9102      	str	r1, [sp, #8]
 800d870:	9204      	str	r2, [sp, #16]
 800d872:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d874:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d876:	2200      	movs	r2, #0
 800d878:	9205      	str	r2, [sp, #20]
 800d87a:	465a      	mov	r2, fp
 800d87c:	f7fe fce8 	bl	800c250 <LCD_DrawBitmap>
 800d880:	e16b      	b.n	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d882:	2920      	cmp	r1, #32
 800d884:	f040 808e 	bne.w	800d9a4 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800d888:	fb0b f004 	mul.w	r0, fp, r4
 800d88c:	f7fa ff7a 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800d890:	900e      	str	r0, [sp, #56]	; 0x38
 800d892:	2800      	cmp	r0, #0
 800d894:	f000 8161 	beq.w	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d898:	f7fa fd2c 	bl	80082f4 <GUI_ALLOC_LockH>
 800d89c:	901a      	str	r0, [sp, #104]	; 0x68
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7fa fd28 	bl	80082f4 <GUI_ALLOC_LockH>
 800d8a4:	9018      	str	r0, [sp, #96]	; 0x60
 800d8a6:	692b      	ldr	r3, [r5, #16]
 800d8a8:	f100 0a18 	add.w	sl, r0, #24
 800d8ac:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800d8b0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d02f      	beq.n	800d918 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800d8b8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800d8bc:	2c02      	cmp	r4, #2
 800d8be:	d003      	beq.n	800d8c8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800d8c0:	2c04      	cmp	r4, #4
 800d8c2:	d001      	beq.n	800d8c8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800d8c4:	2c01      	cmp	r4, #1
 800d8c6:	d106      	bne.n	800d8d6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800d8c8:	4650      	mov	r0, sl
 800d8ca:	692f      	ldr	r7, [r5, #16]
 800d8cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d8ce:	465a      	mov	r2, fp
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	47b8      	blx	r7
 800d8d4:	44b2      	add	sl, r6
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	2200      	movs	r2, #0
 800d8da:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	9203      	str	r2, [sp, #12]
 800d8e2:	9104      	str	r1, [sp, #16]
 800d8e4:	9205      	str	r2, [sp, #20]
 800d8e6:	4641      	mov	r1, r8
 800d8e8:	465a      	mov	r2, fp
 800d8ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800d8ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d8f0:	f7fe fcae 	bl	800c250 <LCD_DrawBitmap>
 800d8f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d8f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8f8:	f108 0701 	add.w	r7, r8, #1
 800d8fc:	fa02 f381 	sxtah	r3, r2, r1
 800d900:	42bb      	cmp	r3, r7
 800d902:	d107      	bne.n	800d914 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800d904:	a818      	add	r0, sp, #96	; 0x60
 800d906:	f7fa fd03 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d90a:	a81a      	add	r0, sp, #104	; 0x68
 800d90c:	f7fa fd00 	bl	8008310 <GUI_ALLOC_UnlockH>
 800d910:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d912:	e120      	b.n	800db56 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800d914:	46b8      	mov	r8, r7
 800d916:	e7d1      	b.n	800d8bc <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800d918:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d91a:	2c02      	cmp	r4, #2
 800d91c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d91e:	d00e      	beq.n	800d93e <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800d920:	2c04      	cmp	r4, #4
 800d922:	d018      	beq.n	800d956 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800d924:	2c01      	cmp	r4, #1
 800d926:	d125      	bne.n	800d974 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800d928:	2300      	movs	r3, #0
 800d92a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800d92e:	9309      	str	r3, [sp, #36]	; 0x24
 800d930:	47c0      	blx	r8
 800d932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d934:	54f8      	strb	r0, [r7, r3]
 800d936:	3301      	adds	r3, #1
 800d938:	459b      	cmp	fp, r3
 800d93a:	d1f6      	bne.n	800d92a <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800d93c:	e019      	b.n	800d972 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800d93e:	2300      	movs	r3, #0
 800d940:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800d944:	9309      	str	r3, [sp, #36]	; 0x24
 800d946:	47c0      	blx	r8
 800d948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800d94e:	3301      	adds	r3, #1
 800d950:	459b      	cmp	fp, r3
 800d952:	d1f5      	bne.n	800d940 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800d954:	e00d      	b.n	800d972 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800d956:	465a      	mov	r2, fp
 800d958:	2300      	movs	r3, #0
 800d95a:	f85a 0003 	ldr.w	r0, [sl, r3]
 800d95e:	920b      	str	r2, [sp, #44]	; 0x2c
 800d960:	9309      	str	r3, [sp, #36]	; 0x24
 800d962:	47c0      	blx	r8
 800d964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d968:	3a01      	subs	r2, #1
 800d96a:	50f8      	str	r0, [r7, r3]
 800d96c:	f103 0304 	add.w	r3, r3, #4
 800d970:	d1f3      	bne.n	800d95a <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800d972:	44b2      	add	sl, r6
 800d974:	2301      	movs	r3, #1
 800d976:	2200      	movs	r2, #0
 800d978:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	9203      	str	r2, [sp, #12]
 800d980:	9104      	str	r1, [sp, #16]
 800d982:	9205      	str	r2, [sp, #20]
 800d984:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d986:	f8cd 9008 	str.w	r9, [sp, #8]
 800d98a:	4629      	mov	r1, r5
 800d98c:	465a      	mov	r2, fp
 800d98e:	f7fe fc5f 	bl	800c250 <LCD_DrawBitmap>
 800d992:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d994:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d996:	1c6f      	adds	r7, r5, #1
 800d998:	fa01 f380 	sxtah	r3, r1, r0
 800d99c:	42bb      	cmp	r3, r7
 800d99e:	d0b1      	beq.n	800d904 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800d9a0:	463d      	mov	r5, r7
 800d9a2:	e7ba      	b.n	800d91a <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800d9a4:	2910      	cmp	r1, #16
 800d9a6:	f040 80d8 	bne.w	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d9aa:	fa0f fa87 	sxth.w	sl, r7
 800d9ae:	fb0a f004 	mul.w	r0, sl, r4
 800d9b2:	f7fa fee7 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800d9b6:	9012      	str	r0, [sp, #72]	; 0x48
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	f000 80ce 	beq.w	800db5a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800d9be:	f7fa fc99 	bl	80082f4 <GUI_ALLOC_LockH>
 800d9c2:	901a      	str	r0, [sp, #104]	; 0x68
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7fa fc95 	bl	80082f4 <GUI_ALLOC_LockH>
 800d9ca:	9018      	str	r0, [sp, #96]	; 0x60
 800d9cc:	692b      	ldr	r3, [r5, #16]
 800d9ce:	f100 0618 	add.w	r6, r0, #24
 800d9d2:	b113      	cbz	r3, 800d9da <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800d9d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d9d8:	b92b      	cbnz	r3, 800d9e6 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800d9da:	00e2      	lsls	r2, r4, #3
 800d9dc:	b23f      	sxth	r7, r7
 800d9de:	9211      	str	r2, [sp, #68]	; 0x44
 800d9e0:	007f      	lsls	r7, r7, #1
 800d9e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d9e4:	e088      	b.n	800daf8 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800d9e6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800d9ea:	0080      	lsls	r0, r0, #2
 800d9ec:	f7fa feca 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800d9f0:	9011      	str	r0, [sp, #68]	; 0x44
 800d9f2:	b118      	cbz	r0, 800d9fc <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800d9f4:	f7fa fc7e 	bl	80082f4 <GUI_ALLOC_LockH>
 800d9f8:	9019      	str	r0, [sp, #100]	; 0x64
 800d9fa:	e001      	b.n	800da00 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800d9fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9fe:	9319      	str	r3, [sp, #100]	; 0x64
 800da00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 80a0 	beq.w	800db48 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800da08:	b23f      	sxth	r7, r7
 800da0a:	007f      	lsls	r7, r7, #1
 800da0c:	970e      	str	r7, [sp, #56]	; 0x38
 800da0e:	00e7      	lsls	r7, r4, #3
 800da10:	9713      	str	r7, [sp, #76]	; 0x4c
 800da12:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800da14:	970c      	str	r7, [sp, #48]	; 0x30
 800da16:	2c02      	cmp	r4, #2
 800da18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800da1c:	d004      	beq.n	800da28 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800da1e:	2c04      	cmp	r4, #4
 800da20:	d007      	beq.n	800da32 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800da22:	2c01      	cmp	r4, #1
 800da24:	d114      	bne.n	800da50 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800da26:	e004      	b.n	800da32 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800da28:	4630      	mov	r0, r6
 800da2a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800da2c:	4652      	mov	r2, sl
 800da2e:	4623      	mov	r3, r4
 800da30:	e003      	b.n	800da3a <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800da32:	9919      	ldr	r1, [sp, #100]	; 0x64
 800da34:	4630      	mov	r0, r6
 800da36:	4652      	mov	r2, sl
 800da38:	2302      	movs	r3, #2
 800da3a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800da3e:	47b8      	blx	r7
 800da40:	692f      	ldr	r7, [r5, #16]
 800da42:	9819      	ldr	r0, [sp, #100]	; 0x64
 800da44:	4641      	mov	r1, r8
 800da46:	4652      	mov	r2, sl
 800da48:	4623      	mov	r3, r4
 800da4a:	47b8      	blx	r7
 800da4c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800da4e:	443e      	add	r6, r7
 800da50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800da52:	991a      	ldr	r1, [sp, #104]	; 0x68
 800da54:	9104      	str	r1, [sp, #16]
 800da56:	2301      	movs	r3, #1
 800da58:	2200      	movs	r2, #0
 800da5a:	f107 0801 	add.w	r8, r7, #1
 800da5e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	9702      	str	r7, [sp, #8]
 800da66:	9203      	str	r2, [sp, #12]
 800da68:	9205      	str	r2, [sp, #20]
 800da6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800da6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da6e:	465a      	mov	r2, fp
 800da70:	f7fe fbee 	bl	800c250 <LCD_DrawBitmap>
 800da74:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800da76:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da78:	fa00 f387 	sxtah	r3, r0, r7
 800da7c:	4543      	cmp	r3, r8
 800da7e:	d002      	beq.n	800da86 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800da80:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800da84:	e7c7      	b.n	800da16 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800da86:	a819      	add	r0, sp, #100	; 0x64
 800da88:	f7fa fc42 	bl	8008310 <GUI_ALLOC_UnlockH>
 800da8c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800da8e:	f7fa fc5f 	bl	8008350 <GUI_ALLOC_Free>
 800da92:	e059      	b.n	800db48 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800da94:	2001af14 	.word	0x2001af14
 800da98:	200001b0 	.word	0x200001b0
 800da9c:	2c04      	cmp	r4, #4
 800da9e:	d041      	beq.n	800db24 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800daa0:	2c01      	cmp	r4, #1
 800daa2:	d111      	bne.n	800dac8 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800daa4:	464a      	mov	r2, r9
 800daa6:	4631      	mov	r1, r6
 800daa8:	f831 0b02 	ldrh.w	r0, [r1], #2
 800daac:	910a      	str	r1, [sp, #40]	; 0x28
 800daae:	920b      	str	r2, [sp, #44]	; 0x2c
 800dab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dab2:	4798      	blx	r3
 800dab4:	47c0      	blx	r8
 800dab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dab8:	f802 0b01 	strb.w	r0, [r2], #1
 800dabc:	eb09 000a 	add.w	r0, r9, sl
 800dac0:	4282      	cmp	r2, r0
 800dac2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dac4:	d1f0      	bne.n	800daa8 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800dac6:	443e      	add	r6, r7
 800dac8:	2301      	movs	r3, #1
 800daca:	9811      	ldr	r0, [sp, #68]	; 0x44
 800dacc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	2200      	movs	r2, #0
 800dad2:	9301      	str	r3, [sp, #4]
 800dad4:	9002      	str	r0, [sp, #8]
 800dad6:	9203      	str	r2, [sp, #12]
 800dad8:	9104      	str	r1, [sp, #16]
 800dada:	9205      	str	r2, [sp, #20]
 800dadc:	4629      	mov	r1, r5
 800dade:	465a      	mov	r2, fp
 800dae0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dae2:	f7fe fbb5 	bl	800c250 <LCD_DrawBitmap>
 800dae6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daea:	f105 0901 	add.w	r9, r5, #1
 800daee:	fa02 f381 	sxtah	r3, r2, r1
 800daf2:	454b      	cmp	r3, r9
 800daf4:	d028      	beq.n	800db48 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800daf6:	464d      	mov	r5, r9
 800daf8:	2c02      	cmp	r4, #2
 800dafa:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800dafe:	d1cd      	bne.n	800da9c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800db00:	464b      	mov	r3, r9
 800db02:	4631      	mov	r1, r6
 800db04:	46d9      	mov	r9, fp
 800db06:	f831 0b02 	ldrh.w	r0, [r1], #2
 800db0a:	910a      	str	r1, [sp, #40]	; 0x28
 800db0c:	9309      	str	r3, [sp, #36]	; 0x24
 800db0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db10:	4790      	blx	r2
 800db12:	47c0      	blx	r8
 800db14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db18:	f823 0b02 	strh.w	r0, [r3], #2
 800db1c:	f1b9 0901 	subs.w	r9, r9, #1
 800db20:	d1f1      	bne.n	800db06 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800db22:	e7d0      	b.n	800dac6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800db24:	464b      	mov	r3, r9
 800db26:	4631      	mov	r1, r6
 800db28:	46d9      	mov	r9, fp
 800db2a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800db2e:	910a      	str	r1, [sp, #40]	; 0x28
 800db30:	9309      	str	r3, [sp, #36]	; 0x24
 800db32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db34:	4790      	blx	r2
 800db36:	47c0      	blx	r8
 800db38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db3c:	f843 0b04 	str.w	r0, [r3], #4
 800db40:	f1b9 0901 	subs.w	r9, r9, #1
 800db44:	d1f1      	bne.n	800db2a <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800db46:	e7be      	b.n	800dac6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800db48:	a818      	add	r0, sp, #96	; 0x60
 800db4a:	f7fa fbe1 	bl	8008310 <GUI_ALLOC_UnlockH>
 800db4e:	a81a      	add	r0, sp, #104	; 0x68
 800db50:	f7fa fbde 	bl	8008310 <GUI_ALLOC_UnlockH>
 800db54:	9812      	ldr	r0, [sp, #72]	; 0x48
 800db56:	f7fa fbfb 	bl	8008350 <GUI_ALLOC_Free>
 800db5a:	b01d      	add	sp, #116	; 0x74
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db60 <GUI_MEMDEV__WriteToActiveAlpha>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	b091      	sub	sp, #68	; 0x44
 800db66:	460e      	mov	r6, r1
 800db68:	4614      	mov	r4, r2
 800db6a:	900d      	str	r0, [sp, #52]	; 0x34
 800db6c:	f7fa fbc2 	bl	80082f4 <GUI_ALLOC_LockH>
 800db70:	4602      	mov	r2, r0
 800db72:	a810      	add	r0, sp, #64	; 0x40
 800db74:	6813      	ldr	r3, [r2, #0]
 800db76:	4d5b      	ldr	r5, [pc, #364]	; (800dce4 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	f840 2d08 	str.w	r2, [r0, #-8]!
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 800db84:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800db88:	9309      	str	r3, [sp, #36]	; 0x24
 800db8a:	f7fa fbc1 	bl	8008310 <GUI_ALLOC_UnlockH>
 800db8e:	682b      	ldr	r3, [r5, #0]
 800db90:	4f55      	ldr	r7, [pc, #340]	; (800dce8 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800db92:	7c5b      	ldrb	r3, [r3, #17]
 800db94:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800db98:	68c3      	ldr	r3, [r0, #12]
 800db9a:	2108      	movs	r1, #8
 800db9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db9e:	4798      	blx	r3
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	7c5b      	ldrb	r3, [r3, #17]
 800dba4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800dba8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800dbac:	2817      	cmp	r0, #23
 800dbae:	bf88      	it	hi
 800dbb0:	2020      	movhi	r0, #32
 800dbb2:	9008      	str	r0, [sp, #32]
 800dbb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbb8:	f8d8 2000 	ldr.w	r2, [r8]
 800dbbc:	910a      	str	r1, [sp, #40]	; 0x28
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbc2:	f7fe ff79 	bl	800cab8 <GUI__AllocAlphaBuffer>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f040 8089 	bne.w	800dcde <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800dbcc:	682a      	ldr	r2, [r5, #0]
 800dbce:	fa0f f78b 	sxth.w	r7, fp
 800dbd2:	19f5      	adds	r5, r6, r7
 800dbd4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800dbd8:	3d01      	subs	r5, #1
 800dbda:	1aed      	subs	r5, r5, r3
 800dbdc:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800dbe0:	2d00      	cmp	r5, #0
 800dbe2:	bfcc      	ite	gt
 800dbe4:	ebc5 0507 	rsbgt	r5, r5, r7
 800dbe8:	463d      	movle	r5, r7
 800dbea:	42b3      	cmp	r3, r6
 800dbec:	bfc3      	ittte	gt
 800dbee:	ebc6 0103 	rsbgt	r1, r6, r3
 800dbf2:	ebc1 0505 	rsbgt	r5, r1, r5
 800dbf6:	461e      	movgt	r6, r3
 800dbf8:	2100      	movle	r1, #0
 800dbfa:	2d00      	cmp	r5, #0
 800dbfc:	dd6f      	ble.n	800dcde <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800dbfe:	fa0f f389 	sxth.w	r3, r9
 800dc02:	18e0      	adds	r0, r4, r3
 800dc04:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800dc08:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800dc0c:	3801      	subs	r0, #1
 800dc0e:	ebcc 0000 	rsb	r0, ip, r0
 800dc12:	2800      	cmp	r0, #0
 800dc14:	bfc8      	it	gt
 800dc16:	ebc0 0303 	rsbgt	r3, r0, r3
 800dc1a:	4294      	cmp	r4, r2
 800dc1c:	bfbd      	ittte	lt
 800dc1e:	ebc4 0a02 	rsblt	sl, r4, r2
 800dc22:	ebca 0303 	rsblt	r3, sl, r3
 800dc26:	4614      	movlt	r4, r2
 800dc28:	f04f 0a00 	movge.w	sl, #0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	dd56      	ble.n	800dcde <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800dc30:	fb07 1a0a 	mla	sl, r7, sl, r1
 800dc34:	18e3      	adds	r3, r4, r3
 800dc36:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800dc3a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc3e:	f7fc fbb7 	bl	800a3b0 <GUI_MEMDEV_GetDataPtr>
 800dc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	ab0f      	add	r3, sp, #60	; 0x3c
 800dc48:	eb00 020a 	add.w	r2, r0, sl
 800dc4c:	9301      	str	r3, [sp, #4]
 800dc4e:	4630      	mov	r0, r6
 800dc50:	4621      	mov	r1, r4
 800dc52:	462b      	mov	r3, r5
 800dc54:	f7fe fe4a 	bl	800c8ec <GUI__DoAlphaBlending>
 800dc58:	4681      	mov	r9, r0
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d03f      	beq.n	800dcde <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800dc5e:	4b23      	ldr	r3, [pc, #140]	; (800dcec <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800dc60:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc62:	4299      	cmp	r1, r3
 800dc64:	d01e      	beq.n	800dca4 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800dc66:	4629      	mov	r1, r5
 800dc68:	9a08      	ldr	r2, [sp, #32]
 800dc6a:	4643      	mov	r3, r8
 800dc6c:	f000 fd57 	bl	800e71e <GUI__CompactPixelIndicesEx>
 800dc70:	b9c0      	cbnz	r0, 800dca4 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800dc72:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800dc76:	f1bc 0f00 	cmp.w	ip, #0
 800dc7a:	d006      	beq.n	800dc8a <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	4649      	mov	r1, r9
 800dc80:	fa0f f28b 	sxth.w	r2, fp
 800dc84:	2304      	movs	r3, #4
 800dc86:	47e0      	blx	ip
 800dc88:	e00c      	b.n	800dca4 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800dc8a:	464a      	mov	r2, r9
 800dc8c:	463b      	mov	r3, r7
 800dc8e:	6810      	ldr	r0, [r2, #0]
 800dc90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc92:	9206      	str	r2, [sp, #24]
 800dc94:	9307      	str	r3, [sp, #28]
 800dc96:	4788      	blx	r1
 800dc98:	9b07      	ldr	r3, [sp, #28]
 800dc9a:	9a06      	ldr	r2, [sp, #24]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	f842 0b04 	str.w	r0, [r2], #4
 800dca2:	d1f4      	bne.n	800dc8e <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800dca4:	9a08      	ldr	r2, [sp, #32]
 800dca6:	9202      	str	r2, [sp, #8]
 800dca8:	2301      	movs	r3, #1
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f104 0c01 	add.w	ip, r4, #1
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	9301      	str	r3, [sp, #4]
 800dcb4:	9203      	str	r2, [sp, #12]
 800dcb6:	9205      	str	r2, [sp, #20]
 800dcb8:	f8cd 9010 	str.w	r9, [sp, #16]
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	462a      	mov	r2, r5
 800dcc2:	f8cd c01c 	str.w	ip, [sp, #28]
 800dcc6:	f7fe fac3 	bl	800c250 <LCD_DrawBitmap>
 800dcca:	2304      	movs	r3, #4
 800dccc:	fb1b aa03 	smlabb	sl, fp, r3, sl
 800dcd0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800dcd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcd6:	459c      	cmp	ip, r3
 800dcd8:	d001      	beq.n	800dcde <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800dcda:	4664      	mov	r4, ip
 800dcdc:	e7ae      	b.n	800dc3c <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800dcde:	b011      	add	sp, #68	; 0x44
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	200001b0 	.word	0x200001b0
 800dce8:	2001af14 	.word	0x2001af14
 800dcec:	0800cf69 	.word	0x0800cf69

0800dcf0 <GUI_MEMDEV_WriteAt>:
 800dcf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	4615      	mov	r5, r2
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	b330      	cbz	r0, 800dd48 <GUI_MEMDEV_WriteAt+0x58>
 800dcfa:	f7fa fafb 	bl	80082f4 <GUI_ALLOC_LockH>
 800dcfe:	4a13      	ldr	r2, [pc, #76]	; (800dd4c <GUI_MEMDEV_WriteAt+0x5c>)
 800dd00:	8943      	ldrh	r3, [r0, #10]
 800dd02:	9001      	str	r0, [sp, #4]
 800dd04:	4294      	cmp	r4, r2
 800dd06:	8902      	ldrh	r2, [r0, #8]
 800dd08:	bf04      	itt	eq
 800dd0a:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800dd0e:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800dd12:	f8ad 4008 	strh.w	r4, [sp, #8]
 800dd16:	3a01      	subs	r2, #1
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	4422      	add	r2, r4
 800dd1c:	442b      	add	r3, r5
 800dd1e:	a801      	add	r0, sp, #4
 800dd20:	f8ad 200c 	strh.w	r2, [sp, #12]
 800dd24:	f8ad 500a 	strh.w	r5, [sp, #10]
 800dd28:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dd2c:	f7fa faf0 	bl	8008310 <GUI_ALLOC_UnlockH>
 800dd30:	a802      	add	r0, sp, #8
 800dd32:	f7fb ff7f 	bl	8009c34 <WM__InitIVRSearch>
 800dd36:	b138      	cbz	r0, 800dd48 <GUI_MEMDEV_WriteAt+0x58>
 800dd38:	4630      	mov	r0, r6
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	462a      	mov	r2, r5
 800dd3e:	f7fd fe03 	bl	800b948 <GUI_MEMDEV__WriteToActiveAt>
 800dd42:	f7fb feb5 	bl	8009ab0 <WM__GetNextIVR>
 800dd46:	e7f6      	b.n	800dd36 <GUI_MEMDEV_WriteAt+0x46>
 800dd48:	b004      	add	sp, #16
 800dd4a:	bd70      	pop	{r4, r5, r6, pc}
 800dd4c:	fffff001 	.word	0xfffff001

0800dd50 <GUI_MEMDEV_Write>:
 800dd50:	4901      	ldr	r1, [pc, #4]	; (800dd58 <GUI_MEMDEV_Write+0x8>)
 800dd52:	460a      	mov	r2, r1
 800dd54:	f7ff bfcc 	b.w	800dcf0 <GUI_MEMDEV_WriteAt>
 800dd58:	fffff001 	.word	0xfffff001

0800dd5c <GUI_USAGE_BM_AddPixel>:
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	b510      	push	{r4, lr}
 800dd60:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800dd64:	1b09      	subs	r1, r1, r4
 800dd66:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800dd6a:	6900      	ldr	r0, [r0, #16]
 800dd6c:	1b12      	subs	r2, r2, r4
 800dd6e:	fb00 3302 	mla	r3, r0, r2, r3
 800dd72:	10c8      	asrs	r0, r1, #3
 800dd74:	2280      	movs	r2, #128	; 0x80
 800dd76:	f001 0107 	and.w	r1, r1, #7
 800dd7a:	fa42 f101 	asr.w	r1, r2, r1
 800dd7e:	5c1a      	ldrb	r2, [r3, r0]
 800dd80:	4311      	orrs	r1, r2
 800dd82:	5419      	strb	r1, [r3, r0]
 800dd84:	bd10      	pop	{r4, pc}

0800dd86 <GUI_USAGE_BM_GetNextDirty>:
 800dd86:	b570      	push	{r4, r5, r6, lr}
 800dd88:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800dd8c:	680b      	ldr	r3, [r1, #0]
 800dd8e:	8886      	ldrh	r6, [r0, #4]
 800dd90:	42a2      	cmp	r2, r4
 800dd92:	da41      	bge.n	800de18 <GUI_USAGE_BM_GetNextDirty+0x92>
 800dd94:	b236      	sxth	r6, r6
 800dd96:	42b3      	cmp	r3, r6
 800dd98:	6904      	ldr	r4, [r0, #16]
 800dd9a:	da3d      	bge.n	800de18 <GUI_USAGE_BM_GetNextDirty+0x92>
 800dd9c:	3014      	adds	r0, #20
 800dd9e:	fb04 0202 	mla	r2, r4, r2, r0
 800dda2:	10dd      	asrs	r5, r3, #3
 800dda4:	1e70      	subs	r0, r6, #1
 800dda6:	1954      	adds	r4, r2, r5
 800dda8:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800ddac:	5d55      	ldrb	r5, [r2, r5]
 800ddae:	f003 0207 	and.w	r2, r3, #7
 800ddb2:	fa05 f202 	lsl.w	r2, r5, r2
 800ddb6:	3401      	adds	r4, #1
 800ddb8:	b2d2      	uxtb	r2, r2
 800ddba:	b93a      	cbnz	r2, 800ddcc <GUI_USAGE_BM_GetNextDirty+0x46>
 800ddbc:	b368      	cbz	r0, 800de1a <GUI_USAGE_BM_GetNextDirty+0x94>
 800ddbe:	3308      	adds	r3, #8
 800ddc0:	f814 2b01 	ldrb.w	r2, [r4], #1
 800ddc4:	3801      	subs	r0, #1
 800ddc6:	f023 0307 	bic.w	r3, r3, #7
 800ddca:	e7f6      	b.n	800ddba <GUI_USAGE_BM_GetNextDirty+0x34>
 800ddcc:	0615      	lsls	r5, r2, #24
 800ddce:	d403      	bmi.n	800ddd8 <GUI_USAGE_BM_GetNextDirty+0x52>
 800ddd0:	0052      	lsls	r2, r2, #1
 800ddd2:	b2d2      	uxtb	r2, r2
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	e7f9      	b.n	800ddcc <GUI_USAGE_BM_GetNextDirty+0x46>
 800ddd8:	2aff      	cmp	r2, #255	; 0xff
 800ddda:	461d      	mov	r5, r3
 800dddc:	d005      	beq.n	800ddea <GUI_USAGE_BM_GetNextDirty+0x64>
 800ddde:	0656      	lsls	r6, r2, #25
 800dde0:	d504      	bpl.n	800ddec <GUI_USAGE_BM_GetNextDirty+0x66>
 800dde2:	0052      	lsls	r2, r2, #1
 800dde4:	b2d2      	uxtb	r2, r2
 800dde6:	3301      	adds	r3, #1
 800dde8:	e7f9      	b.n	800ddde <GUI_USAGE_BM_GetNextDirty+0x58>
 800ddea:	3307      	adds	r3, #7
 800ddec:	f003 0207 	and.w	r2, r3, #7
 800ddf0:	2a07      	cmp	r2, #7
 800ddf2:	d10d      	bne.n	800de10 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800ddf4:	3801      	subs	r0, #1
 800ddf6:	d40b      	bmi.n	800de10 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800ddf8:	f814 2b01 	ldrb.w	r2, [r4], #1
 800ddfc:	2aff      	cmp	r2, #255	; 0xff
 800ddfe:	d101      	bne.n	800de04 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800de00:	3308      	adds	r3, #8
 800de02:	e7f7      	b.n	800ddf4 <GUI_USAGE_BM_GetNextDirty+0x6e>
 800de04:	0610      	lsls	r0, r2, #24
 800de06:	d503      	bpl.n	800de10 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800de08:	0052      	lsls	r2, r2, #1
 800de0a:	b2d2      	uxtb	r2, r2
 800de0c:	3301      	adds	r3, #1
 800de0e:	e7f9      	b.n	800de04 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800de10:	1b58      	subs	r0, r3, r5
 800de12:	600d      	str	r5, [r1, #0]
 800de14:	3001      	adds	r0, #1
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	2000      	movs	r0, #0
 800de1a:	bd70      	pop	{r4, r5, r6, pc}

0800de1c <_GUI_USAGE_BM_Delete>:
 800de1c:	f7fa ba98 	b.w	8008350 <GUI_ALLOC_Free>

0800de20 <GUI_USAGE_BM_Clear>:
 800de20:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800de24:	6902      	ldr	r2, [r0, #16]
 800de26:	2100      	movs	r1, #0
 800de28:	3014      	adds	r0, #20
 800de2a:	435a      	muls	r2, r3
 800de2c:	f001 ba7b 	b.w	800f326 <memset>

0800de30 <GUI_USAGE_BM_AddHLine>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	f9b0 4000 	ldrsh.w	r4, [r0]
 800de36:	1b09      	subs	r1, r1, r4
 800de38:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800de3c:	42a1      	cmp	r1, r4
 800de3e:	da2f      	bge.n	800dea0 <GUI_USAGE_BM_AddHLine+0x70>
 800de40:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800de44:	440b      	add	r3, r1
 800de46:	f100 0414 	add.w	r4, r0, #20
 800de4a:	3b01      	subs	r3, #1
 800de4c:	6900      	ldr	r0, [r0, #16]
 800de4e:	1b52      	subs	r2, r2, r5
 800de50:	43de      	mvns	r6, r3
 800de52:	fb00 4202 	mla	r2, r0, r2, r4
 800de56:	f001 0707 	and.w	r7, r1, #7
 800de5a:	10cc      	asrs	r4, r1, #3
 800de5c:	f006 0607 	and.w	r6, r6, #7
 800de60:	21ff      	movs	r1, #255	; 0xff
 800de62:	fa41 f707 	asr.w	r7, r1, r7
 800de66:	fa01 f606 	lsl.w	r6, r1, r6
 800de6a:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800de6e:	eb02 0504 	add.w	r5, r2, r4
 800de72:	b2ff      	uxtb	r7, r7
 800de74:	b2f6      	uxtb	r6, r6
 800de76:	5d10      	ldrb	r0, [r2, r4]
 800de78:	d103      	bne.n	800de82 <GUI_USAGE_BM_AddHLine+0x52>
 800de7a:	403e      	ands	r6, r7
 800de7c:	4330      	orrs	r0, r6
 800de7e:	5510      	strb	r0, [r2, r4]
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de82:	4338      	orrs	r0, r7
 800de84:	5510      	strb	r0, [r2, r4]
 800de86:	1e5c      	subs	r4, r3, #1
 800de88:	2c00      	cmp	r4, #0
 800de8a:	f105 0501 	add.w	r5, r5, #1
 800de8e:	dd04      	ble.n	800de9a <GUI_USAGE_BM_AddHLine+0x6a>
 800de90:	4628      	mov	r0, r5
 800de92:	4622      	mov	r2, r4
 800de94:	f001 fa47 	bl	800f326 <memset>
 800de98:	4425      	add	r5, r4
 800de9a:	782b      	ldrb	r3, [r5, #0]
 800de9c:	431e      	orrs	r6, r3
 800de9e:	702e      	strb	r6, [r5, #0]
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dea4 <GUI_USAGE_BM_Create>:
 800dea4:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800dea8:	f102 060f 	add.w	r6, r2, #15
 800deac:	1136      	asrs	r6, r6, #4
 800deae:	0076      	lsls	r6, r6, #1
 800deb0:	4682      	mov	sl, r0
 800deb2:	fb06 f003 	mul.w	r0, r6, r3
 800deb6:	3014      	adds	r0, #20
 800deb8:	4689      	mov	r9, r1
 800deba:	4690      	mov	r8, r2
 800debc:	461f      	mov	r7, r3
 800debe:	f7ff f83d 	bl	800cf3c <GUI_ALLOC_AllocZero>
 800dec2:	4683      	mov	fp, r0
 800dec4:	b198      	cbz	r0, 800deee <GUI_USAGE_BM_Create+0x4a>
 800dec6:	f7fa fa15 	bl	80082f4 <GUI_ALLOC_LockH>
 800deca:	4604      	mov	r4, r0
 800decc:	4b0a      	ldr	r3, [pc, #40]	; (800def8 <GUI_USAGE_BM_Create+0x54>)
 800dece:	60a3      	str	r3, [r4, #8]
 800ded0:	a802      	add	r0, sp, #8
 800ded2:	2301      	movs	r3, #1
 800ded4:	f840 4d04 	str.w	r4, [r0, #-4]!
 800ded8:	f8a4 8004 	strh.w	r8, [r4, #4]
 800dedc:	f8a4 a000 	strh.w	sl, [r4]
 800dee0:	f8a4 9002 	strh.w	r9, [r4, #2]
 800dee4:	80e7      	strh	r7, [r4, #6]
 800dee6:	81a3      	strh	r3, [r4, #12]
 800dee8:	6126      	str	r6, [r4, #16]
 800deea:	f7fa fa11 	bl	8008310 <GUI_ALLOC_UnlockH>
 800deee:	4658      	mov	r0, fp
 800def0:	b002      	add	sp, #8
 800def2:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800def6:	bf00      	nop
 800def8:	08014224 	.word	0x08014224

0800defc <GUI_USAGE_DecUseCnt>:
 800defc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800defe:	4605      	mov	r5, r0
 800df00:	f7fa f9f8 	bl	80082f4 <GUI_ALLOC_LockH>
 800df04:	4602      	mov	r2, r0
 800df06:	a802      	add	r0, sp, #8
 800df08:	8994      	ldrh	r4, [r2, #12]
 800df0a:	f840 2d04 	str.w	r2, [r0, #-4]!
 800df0e:	3c01      	subs	r4, #1
 800df10:	b2a4      	uxth	r4, r4
 800df12:	8194      	strh	r4, [r2, #12]
 800df14:	f7fa f9fc 	bl	8008310 <GUI_ALLOC_UnlockH>
 800df18:	b914      	cbnz	r4, 800df20 <GUI_USAGE_DecUseCnt+0x24>
 800df1a:	4628      	mov	r0, r5
 800df1c:	f7fa fa18 	bl	8008350 <GUI_ALLOC_Free>
 800df20:	b003      	add	sp, #12
 800df22:	bd30      	pop	{r4, r5, pc}

0800df24 <GUI_USAGE_AddRect>:
 800df24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df28:	4605      	mov	r5, r0
 800df2a:	4688      	mov	r8, r1
 800df2c:	4617      	mov	r7, r2
 800df2e:	4699      	mov	r9, r3
 800df30:	68a8      	ldr	r0, [r5, #8]
 800df32:	464b      	mov	r3, r9
 800df34:	6846      	ldr	r6, [r0, #4]
 800df36:	4641      	mov	r1, r8
 800df38:	4628      	mov	r0, r5
 800df3a:	1c54      	adds	r4, r2, #1
 800df3c:	47b0      	blx	r6
 800df3e:	9b08      	ldr	r3, [sp, #32]
 800df40:	443b      	add	r3, r7
 800df42:	42a3      	cmp	r3, r4
 800df44:	d001      	beq.n	800df4a <GUI_USAGE_AddRect+0x26>
 800df46:	4622      	mov	r2, r4
 800df48:	e7f2      	b.n	800df30 <GUI_USAGE_AddRect+0xc>
 800df4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800df50 <GUI_MEMDEV_ReduceYSize>:
 800df50:	b513      	push	{r0, r1, r4, lr}
 800df52:	460c      	mov	r4, r1
 800df54:	b918      	cbnz	r0, 800df5e <GUI_MEMDEV_ReduceYSize+0xe>
 800df56:	4b08      	ldr	r3, [pc, #32]	; (800df78 <GUI_MEMDEV_ReduceYSize+0x28>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800df5c:	b150      	cbz	r0, 800df74 <GUI_MEMDEV_ReduceYSize+0x24>
 800df5e:	f7fa f9c9 	bl	80082f4 <GUI_ALLOC_LockH>
 800df62:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800df66:	9001      	str	r0, [sp, #4]
 800df68:	429c      	cmp	r4, r3
 800df6a:	bfb8      	it	lt
 800df6c:	8144      	strhlt	r4, [r0, #10]
 800df6e:	a801      	add	r0, sp, #4
 800df70:	f7fa f9ce 	bl	8008310 <GUI_ALLOC_UnlockH>
 800df74:	b002      	add	sp, #8
 800df76:	bd10      	pop	{r4, pc}
 800df78:	200001b0 	.word	0x200001b0

0800df7c <GUI_MEMDEV_Clear>:
 800df7c:	b513      	push	{r0, r1, r4, lr}
 800df7e:	b918      	cbnz	r0, 800df88 <GUI_MEMDEV_Clear+0xc>
 800df80:	4b0d      	ldr	r3, [pc, #52]	; (800dfb8 <GUI_MEMDEV_Clear+0x3c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800df86:	b1a8      	cbz	r0, 800dfb4 <GUI_MEMDEV_Clear+0x38>
 800df88:	f7fa f9b4 	bl	80082f4 <GUI_ALLOC_LockH>
 800df8c:	ab02      	add	r3, sp, #8
 800df8e:	6944      	ldr	r4, [r0, #20]
 800df90:	f843 0d08 	str.w	r0, [r3, #-8]!
 800df94:	4668      	mov	r0, sp
 800df96:	f7fa f9bb 	bl	8008310 <GUI_ALLOC_UnlockH>
 800df9a:	b15c      	cbz	r4, 800dfb4 <GUI_MEMDEV_Clear+0x38>
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7fa f9a9 	bl	80082f4 <GUI_ALLOC_LockH>
 800dfa2:	ac02      	add	r4, sp, #8
 800dfa4:	6883      	ldr	r3, [r0, #8]
 800dfa6:	f844 0d04 	str.w	r0, [r4, #-4]!
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	4798      	blx	r3
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7fa f9ae 	bl	8008310 <GUI_ALLOC_UnlockH>
 800dfb4:	b002      	add	sp, #8
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	200001b0 	.word	0x200001b0

0800dfbc <LCD_SelectLCD>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <LCD_SelectLCD+0x38>)
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	7c51      	ldrb	r1, [r2, #17]
 800dfc4:	4a0c      	ldr	r2, [pc, #48]	; (800dff8 <LCD_SelectLCD+0x3c>)
 800dfc6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800dfca:	461c      	mov	r4, r3
 800dfcc:	b140      	cbz	r0, 800dfe0 <LCD_SelectLCD+0x24>
 800dfce:	68c3      	ldr	r3, [r0, #12]
 800dfd0:	b113      	cbz	r3, 800dfd8 <LCD_SelectLCD+0x1c>
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b04      	cmp	r3, #4
 800dfd6:	d001      	beq.n	800dfdc <LCD_SelectLCD+0x20>
 800dfd8:	6800      	ldr	r0, [r0, #0]
 800dfda:	e7f7      	b.n	800dfcc <LCD_SelectLCD+0x10>
 800dfdc:	f7f9 fc68 	bl	80078b0 <GUI_DEVICE_Unlink>
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	661a      	str	r2, [r3, #96]	; 0x60
 800dfe6:	f103 0208 	add.w	r2, r3, #8
 800dfea:	615a      	str	r2, [r3, #20]
 800dfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dff0:	f7fe ba3a 	b.w	800c468 <LCD_SetClipRectMax>
 800dff4:	200001b0 	.word	0x200001b0
 800dff8:	2001af14 	.word	0x2001af14

0800dffc <LCD_ReadRectEx>:
 800dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	b087      	sub	sp, #28
 800e002:	4617      	mov	r7, r2
 800e004:	9304      	str	r3, [sp, #16]
 800e006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e008:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e00a:	68da      	ldr	r2, [r3, #12]
 800e00c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e00e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800e012:	4606      	mov	r6, r0
 800e014:	460d      	mov	r5, r1
 800e016:	b973      	cbnz	r3, 800e036 <LCD_ReadRectEx+0x3a>
 800e018:	4b71      	ldr	r3, [pc, #452]	; (800e1e0 <LCD_ReadRectEx+0x1e4>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	7c58      	ldrb	r0, [r3, #17]
 800e01e:	f7fd fe97 	bl	800bd50 <GUI_GetBitsPerPixelEx>
 800e022:	2808      	cmp	r0, #8
 800e024:	4682      	mov	sl, r0
 800e026:	dd15      	ble.n	800e054 <LCD_ReadRectEx+0x58>
 800e028:	2810      	cmp	r0, #16
 800e02a:	bfcc      	ite	gt
 800e02c:	f04f 0904 	movgt.w	r9, #4
 800e030:	f04f 0902 	movle.w	r9, #2
 800e034:	e010      	b.n	800e058 <LCD_ReadRectEx+0x5c>
 800e036:	a811      	add	r0, sp, #68	; 0x44
 800e038:	2101      	movs	r1, #1
 800e03a:	4798      	blx	r3
 800e03c:	4684      	mov	ip, r0
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0ea      	beq.n	800e018 <LCD_ReadRectEx+0x1c>
 800e042:	9b04      	ldr	r3, [sp, #16]
 800e044:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e046:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e04a:	4631      	mov	r1, r6
 800e04c:	462a      	mov	r2, r5
 800e04e:	463b      	mov	r3, r7
 800e050:	47e0      	blx	ip
 800e052:	e0c1      	b.n	800e1d8 <LCD_ReadRectEx+0x1dc>
 800e054:	f04f 0901 	mov.w	r9, #1
 800e058:	f04f 0b00 	mov.w	fp, #0
 800e05c:	9b04      	ldr	r3, [sp, #16]
 800e05e:	429d      	cmp	r5, r3
 800e060:	f300 80ba 	bgt.w	800e1d8 <LCD_ReadRectEx+0x1dc>
 800e064:	f1b9 0f02 	cmp.w	r9, #2
 800e068:	d009      	beq.n	800e07e <LCD_ReadRectEx+0x82>
 800e06a:	f1b9 0f04 	cmp.w	r9, #4
 800e06e:	d004      	beq.n	800e07a <LCD_ReadRectEx+0x7e>
 800e070:	f1b9 0f01 	cmp.w	r9, #1
 800e074:	f040 80ae 	bne.w	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e078:	e003      	b.n	800e082 <LCD_ReadRectEx+0x86>
 800e07a:	46b4      	mov	ip, r6
 800e07c:	e09b      	b.n	800e1b6 <LCD_ReadRectEx+0x1ba>
 800e07e:	46b4      	mov	ip, r6
 800e080:	e08a      	b.n	800e198 <LCD_ReadRectEx+0x19c>
 800e082:	f10a 32ff 	add.w	r2, sl, #4294967295
 800e086:	2a07      	cmp	r2, #7
 800e088:	f200 80a4 	bhi.w	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e08c:	e8df f002 	tbb	[pc, r2]
 800e090:	0606080a 	.word	0x0606080a
 800e094:	04040404 	.word	0x04040404
 800e098:	46b4      	mov	ip, r6
 800e09a:	e066      	b.n	800e16a <LCD_ReadRectEx+0x16e>
 800e09c:	46b4      	mov	ip, r6
 800e09e:	e047      	b.n	800e130 <LCD_ReadRectEx+0x134>
 800e0a0:	46b4      	mov	ip, r6
 800e0a2:	e022      	b.n	800e0ea <LCD_ReadRectEx+0xee>
 800e0a4:	46b4      	mov	ip, r6
 800e0a6:	45bc      	cmp	ip, r7
 800e0a8:	f300 8094 	bgt.w	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e0ac:	4661      	mov	r1, ip
 800e0ae:	462a      	mov	r2, r5
 800e0b0:	f8cd c00c 	str.w	ip, [sp, #12]
 800e0b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e0b6:	47c0      	blx	r8
 800e0b8:	f1cb 0207 	rsb	r2, fp, #7
 800e0bc:	fa00 f202 	lsl.w	r2, r0, r2
 800e0c0:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800e0c4:	7820      	ldrb	r0, [r4, #0]
 800e0c6:	fa41 f10b 	asr.w	r1, r1, fp
 800e0ca:	4001      	ands	r1, r0
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	7022      	strb	r2, [r4, #0]
 800e0d0:	f10b 0301 	add.w	r3, fp, #1
 800e0d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e0d8:	f023 0207 	bic.w	r2, r3, #7
 800e0dc:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800e0e0:	fa43 fb02 	asr.w	fp, r3, r2
 800e0e4:	f10c 0c01 	add.w	ip, ip, #1
 800e0e8:	e7dd      	b.n	800e0a6 <LCD_ReadRectEx+0xaa>
 800e0ea:	45bc      	cmp	ip, r7
 800e0ec:	dc72      	bgt.n	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e0ee:	4661      	mov	r1, ip
 800e0f0:	462a      	mov	r2, r5
 800e0f2:	f8cd c00c 	str.w	ip, [sp, #12]
 800e0f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e0f8:	47c0      	blx	r8
 800e0fa:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800e0fe:	f1c2 0106 	rsb	r1, r2, #6
 800e102:	fa00 f101 	lsl.w	r1, r0, r1
 800e106:	f64f 703f 	movw	r0, #65343	; 0xff3f
 800e10a:	fa40 f202 	asr.w	r2, r0, r2
 800e10e:	7820      	ldrb	r0, [r4, #0]
 800e110:	4002      	ands	r2, r0
 800e112:	4311      	orrs	r1, r2
 800e114:	7021      	strb	r1, [r4, #0]
 800e116:	f10b 0301 	add.w	r3, fp, #1
 800e11a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e11e:	f023 0203 	bic.w	r2, r3, #3
 800e122:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800e126:	fa43 fb02 	asr.w	fp, r3, r2
 800e12a:	f10c 0c01 	add.w	ip, ip, #1
 800e12e:	e7dc      	b.n	800e0ea <LCD_ReadRectEx+0xee>
 800e130:	45bc      	cmp	ip, r7
 800e132:	dc4f      	bgt.n	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e134:	4661      	mov	r1, ip
 800e136:	462a      	mov	r2, r5
 800e138:	f8cd c00c 	str.w	ip, [sp, #12]
 800e13c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e13e:	47c0      	blx	r8
 800e140:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800e144:	f1c2 0104 	rsb	r1, r2, #4
 800e148:	fa00 f101 	lsl.w	r1, r0, r1
 800e14c:	200f      	movs	r0, #15
 800e14e:	fa00 f202 	lsl.w	r2, r0, r2
 800e152:	7820      	ldrb	r0, [r4, #0]
 800e154:	4002      	ands	r2, r0
 800e156:	4311      	orrs	r1, r2
 800e158:	7021      	strb	r1, [r4, #0]
 800e15a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e15e:	445c      	add	r4, fp
 800e160:	f10c 0c01 	add.w	ip, ip, #1
 800e164:	f08b 0b01 	eor.w	fp, fp, #1
 800e168:	e7e2      	b.n	800e130 <LCD_ReadRectEx+0x134>
 800e16a:	4273      	negs	r3, r6
 800e16c:	1ba2      	subs	r2, r4, r6
 800e16e:	45bc      	cmp	ip, r7
 800e170:	9305      	str	r3, [sp, #20]
 800e172:	4462      	add	r2, ip
 800e174:	dc0e      	bgt.n	800e194 <LCD_ReadRectEx+0x198>
 800e176:	4661      	mov	r1, ip
 800e178:	462a      	mov	r2, r5
 800e17a:	f8cd c00c 	str.w	ip, [sp, #12]
 800e17e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e180:	47c0      	blx	r8
 800e182:	9a05      	ldr	r2, [sp, #20]
 800e184:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e188:	4422      	add	r2, r4
 800e18a:	f802 000c 	strb.w	r0, [r2, ip]
 800e18e:	f10c 0c01 	add.w	ip, ip, #1
 800e192:	e7ea      	b.n	800e16a <LCD_ReadRectEx+0x16e>
 800e194:	4614      	mov	r4, r2
 800e196:	e01d      	b.n	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e198:	45bc      	cmp	ip, r7
 800e19a:	dc1b      	bgt.n	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e19c:	4661      	mov	r1, ip
 800e19e:	f8cd c00c 	str.w	ip, [sp, #12]
 800e1a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e1a4:	462a      	mov	r2, r5
 800e1a6:	47c0      	blx	r8
 800e1a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e1ac:	f824 0b02 	strh.w	r0, [r4], #2
 800e1b0:	f10c 0c01 	add.w	ip, ip, #1
 800e1b4:	e7f0      	b.n	800e198 <LCD_ReadRectEx+0x19c>
 800e1b6:	45bc      	cmp	ip, r7
 800e1b8:	dc0c      	bgt.n	800e1d4 <LCD_ReadRectEx+0x1d8>
 800e1ba:	4661      	mov	r1, ip
 800e1bc:	f8cd c00c 	str.w	ip, [sp, #12]
 800e1c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e1c2:	462a      	mov	r2, r5
 800e1c4:	47c0      	blx	r8
 800e1c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800e1ca:	f844 0b04 	str.w	r0, [r4], #4
 800e1ce:	f10c 0c01 	add.w	ip, ip, #1
 800e1d2:	e7f0      	b.n	800e1b6 <LCD_ReadRectEx+0x1ba>
 800e1d4:	3501      	adds	r5, #1
 800e1d6:	e741      	b.n	800e05c <LCD_ReadRectEx+0x60>
 800e1d8:	b007      	add	sp, #28
 800e1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1de:	bf00      	nop
 800e1e0:	200001b0 	.word	0x200001b0

0800e1e4 <GUI_ReadRectEx>:
 800e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e6:	4d16      	ldr	r5, [pc, #88]	; (800e240 <GUI_ReadRectEx+0x5c>)
 800e1e8:	9e05      	ldr	r6, [sp, #20]
 800e1ea:	682d      	ldr	r5, [r5, #0]
 800e1ec:	9c06      	ldr	r4, [sp, #24]
 800e1ee:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800e1f2:	42b8      	cmp	r0, r7
 800e1f4:	bfb8      	it	lt
 800e1f6:	4638      	movlt	r0, r7
 800e1f8:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800e1fc:	42ba      	cmp	r2, r7
 800e1fe:	bfa8      	it	ge
 800e200:	463a      	movge	r2, r7
 800e202:	4282      	cmp	r2, r0
 800e204:	db1b      	blt.n	800e23e <GUI_ReadRectEx+0x5a>
 800e206:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800e20a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800e20e:	42b9      	cmp	r1, r7
 800e210:	bfb8      	it	lt
 800e212:	4639      	movlt	r1, r7
 800e214:	42ab      	cmp	r3, r5
 800e216:	bfa8      	it	ge
 800e218:	462b      	movge	r3, r5
 800e21a:	428b      	cmp	r3, r1
 800e21c:	db0f      	blt.n	800e23e <GUI_ReadRectEx+0x5a>
 800e21e:	68e5      	ldr	r5, [r4, #12]
 800e220:	682d      	ldr	r5, [r5, #0]
 800e222:	f035 0704 	bics.w	r7, r5, #4
 800e226:	d105      	bne.n	800e234 <GUI_ReadRectEx+0x50>
 800e228:	9605      	str	r6, [sp, #20]
 800e22a:	9406      	str	r4, [sp, #24]
 800e22c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e230:	f7ff bee4 	b.w	800dffc <LCD_ReadRectEx>
 800e234:	6825      	ldr	r5, [r4, #0]
 800e236:	2d00      	cmp	r5, #0
 800e238:	d0f6      	beq.n	800e228 <GUI_ReadRectEx+0x44>
 800e23a:	462c      	mov	r4, r5
 800e23c:	e7ef      	b.n	800e21e <GUI_ReadRectEx+0x3a>
 800e23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e240:	200001b0 	.word	0x200001b0

0800e244 <LCD_GetNumLayers>:
 800e244:	b510      	push	{r4, lr}
 800e246:	2000      	movs	r0, #0
 800e248:	f7f9 fafa 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800e24c:	1c04      	adds	r4, r0, #0
 800e24e:	f04f 0001 	mov.w	r0, #1
 800e252:	bf18      	it	ne
 800e254:	2401      	movne	r4, #1
 800e256:	f7f9 faf3 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800e25a:	b100      	cbz	r0, 800e25e <LCD_GetNumLayers+0x1a>
 800e25c:	3401      	adds	r4, #1
 800e25e:	4620      	mov	r0, r4
 800e260:	bd10      	pop	{r4, pc}
	...

0800e264 <LCD_GetBkColorIndex>:
 800e264:	4b02      	ldr	r3, [pc, #8]	; (800e270 <LCD_GetBkColorIndex+0xc>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	6818      	ldr	r0, [r3, #0]
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	200001b0 	.word	0x200001b0

0800e274 <LCD_GetColorIndex>:
 800e274:	4b02      	ldr	r3, [pc, #8]	; (800e280 <LCD_GetColorIndex+0xc>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e27a:	6818      	ldr	r0, [r3, #0]
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	200001b0 	.word	0x200001b0

0800e284 <LCD_AA_SetAndMask>:
 800e284:	4b02      	ldr	r3, [pc, #8]	; (800e290 <LCD_AA_SetAndMask+0xc>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	6018      	str	r0, [r3, #0]
 800e28a:	4610      	mov	r0, r2
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	200001cc 	.word	0x200001cc

0800e294 <GUI__ExpandPixelIndicesEx>:
 800e294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e298:	1e0c      	subs	r4, r1, #0
 800e29a:	4605      	mov	r5, r0
 800e29c:	f340 80b3 	ble.w	800e406 <GUI__ExpandPixelIndicesEx+0x172>
 800e2a0:	2a08      	cmp	r2, #8
 800e2a2:	685f      	ldr	r7, [r3, #4]
 800e2a4:	dd04      	ble.n	800e2b0 <GUI__ExpandPixelIndicesEx+0x1c>
 800e2a6:	2a10      	cmp	r2, #16
 800e2a8:	f340 8098 	ble.w	800e3dc <GUI__ExpandPixelIndicesEx+0x148>
 800e2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b0:	3a01      	subs	r2, #1
 800e2b2:	2a07      	cmp	r2, #7
 800e2b4:	f200 80a7 	bhi.w	800e406 <GUI__ExpandPixelIndicesEx+0x172>
 800e2b8:	e8df f002 	tbb	[pc, r2]
 800e2bc:	58a52d04 	.word	0x58a52d04
 800e2c0:	83a5a5a5 	.word	0x83a5a5a5
 800e2c4:	1e66      	subs	r6, r4, #1
 800e2c6:	10f2      	asrs	r2, r6, #3
 800e2c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	eb05 0802 	add.w	r8, r5, r2
 800e2d2:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800e2d6:	f006 0607 	and.w	r6, r6, #7
 800e2da:	f815 a002 	ldrb.w	sl, [r5, r2]
 800e2de:	2580      	movs	r5, #128	; 0x80
 800e2e0:	4135      	asrs	r5, r6
 800e2e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2e6:	b2ed      	uxtb	r5, r5
 800e2e8:	f1c6 0307 	rsb	r3, r6, #7
 800e2ec:	ea0a 0005 	and.w	r0, sl, r5
 800e2f0:	4118      	asrs	r0, r3
 800e2f2:	47b8      	blx	r7
 800e2f4:	f849 0904 	str.w	r0, [r9], #-4
 800e2f8:	b936      	cbnz	r6, 800e308 <GUI__ExpandPixelIndicesEx+0x74>
 800e2fa:	f898 a000 	ldrb.w	sl, [r8]
 800e2fe:	2501      	movs	r5, #1
 800e300:	f108 38ff 	add.w	r8, r8, #4294967295
 800e304:	2607      	movs	r6, #7
 800e306:	e002      	b.n	800e30e <GUI__ExpandPixelIndicesEx+0x7a>
 800e308:	006d      	lsls	r5, r5, #1
 800e30a:	3e01      	subs	r6, #1
 800e30c:	b2ed      	uxtb	r5, r5
 800e30e:	3c01      	subs	r4, #1
 800e310:	d1ea      	bne.n	800e2e8 <GUI__ExpandPixelIndicesEx+0x54>
 800e312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e316:	1e66      	subs	r6, r4, #1
 800e318:	10b2      	asrs	r2, r6, #2
 800e31a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800e31e:	3b01      	subs	r3, #1
 800e320:	f006 0603 	and.w	r6, r6, #3
 800e324:	eb05 0802 	add.w	r8, r5, r2
 800e328:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800e32c:	f815 a002 	ldrb.w	sl, [r5, r2]
 800e330:	0073      	lsls	r3, r6, #1
 800e332:	25c0      	movs	r5, #192	; 0xc0
 800e334:	411d      	asrs	r5, r3
 800e336:	f108 38ff 	add.w	r8, r8, #4294967295
 800e33a:	b2ed      	uxtb	r5, r5
 800e33c:	0073      	lsls	r3, r6, #1
 800e33e:	f1c3 0306 	rsb	r3, r3, #6
 800e342:	ea0a 0005 	and.w	r0, sl, r5
 800e346:	4118      	asrs	r0, r3
 800e348:	47b8      	blx	r7
 800e34a:	f849 0904 	str.w	r0, [r9], #-4
 800e34e:	b936      	cbnz	r6, 800e35e <GUI__ExpandPixelIndicesEx+0xca>
 800e350:	2503      	movs	r5, #3
 800e352:	f898 a000 	ldrb.w	sl, [r8]
 800e356:	462e      	mov	r6, r5
 800e358:	f108 38ff 	add.w	r8, r8, #4294967295
 800e35c:	e002      	b.n	800e364 <GUI__ExpandPixelIndicesEx+0xd0>
 800e35e:	00ad      	lsls	r5, r5, #2
 800e360:	3e01      	subs	r6, #1
 800e362:	b2ed      	uxtb	r5, r5
 800e364:	3c01      	subs	r4, #1
 800e366:	d1e9      	bne.n	800e33c <GUI__ExpandPixelIndicesEx+0xa8>
 800e368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36c:	1e66      	subs	r6, r4, #1
 800e36e:	1072      	asrs	r2, r6, #1
 800e370:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800e374:	3b01      	subs	r3, #1
 800e376:	f006 0601 	and.w	r6, r6, #1
 800e37a:	eb05 0802 	add.w	r8, r5, r2
 800e37e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800e382:	f815 a002 	ldrb.w	sl, [r5, r2]
 800e386:	00b3      	lsls	r3, r6, #2
 800e388:	25f0      	movs	r5, #240	; 0xf0
 800e38a:	411d      	asrs	r5, r3
 800e38c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e390:	b2ed      	uxtb	r5, r5
 800e392:	00b3      	lsls	r3, r6, #2
 800e394:	f1c3 0304 	rsb	r3, r3, #4
 800e398:	ea0a 0005 	and.w	r0, sl, r5
 800e39c:	4118      	asrs	r0, r3
 800e39e:	47b8      	blx	r7
 800e3a0:	f849 0904 	str.w	r0, [r9], #-4
 800e3a4:	b936      	cbnz	r6, 800e3b4 <GUI__ExpandPixelIndicesEx+0x120>
 800e3a6:	f898 a000 	ldrb.w	sl, [r8]
 800e3aa:	250f      	movs	r5, #15
 800e3ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3b0:	2601      	movs	r6, #1
 800e3b2:	e002      	b.n	800e3ba <GUI__ExpandPixelIndicesEx+0x126>
 800e3b4:	012d      	lsls	r5, r5, #4
 800e3b6:	b2ed      	uxtb	r5, r5
 800e3b8:	2600      	movs	r6, #0
 800e3ba:	3c01      	subs	r4, #1
 800e3bc:	d1e9      	bne.n	800e392 <GUI__ExpandPixelIndicesEx+0xfe>
 800e3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c2:	192e      	adds	r6, r5, r4
 800e3c4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800e3c8:	1b34      	subs	r4, r6, r4
 800e3ca:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800e3ce:	47b8      	blx	r7
 800e3d0:	42a6      	cmp	r6, r4
 800e3d2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e3d6:	d1f8      	bne.n	800e3ca <GUI__ExpandPixelIndicesEx+0x136>
 800e3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3dc:	695e      	ldr	r6, [r3, #20]
 800e3de:	b12e      	cbz	r6, 800e3ec <GUI__ExpandPixelIndicesEx+0x158>
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	47b0      	blx	r6
 800e3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ec:	0064      	lsls	r4, r4, #1
 800e3ee:	4425      	add	r5, r4
 800e3f0:	192e      	adds	r6, r5, r4
 800e3f2:	1b2c      	subs	r4, r5, r4
 800e3f4:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 800e3f8:	47b8      	blx	r7
 800e3fa:	42a5      	cmp	r5, r4
 800e3fc:	f846 0d04 	str.w	r0, [r6, #-4]!
 800e400:	d1f8      	bne.n	800e3f4 <GUI__ExpandPixelIndicesEx+0x160>
 800e402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e40a <GUI__CompactPixelIndices>:
 800e40a:	2a08      	cmp	r2, #8
 800e40c:	b510      	push	{r4, lr}
 800e40e:	dd0e      	ble.n	800e42e <GUI__CompactPixelIndices+0x24>
 800e410:	2a10      	cmp	r2, #16
 800e412:	dc0a      	bgt.n	800e42a <GUI__CompactPixelIndices+0x20>
 800e414:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e418:	4603      	mov	r3, r0
 800e41a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e41e:	f823 2b02 	strh.w	r2, [r3], #2
 800e422:	428b      	cmp	r3, r1
 800e424:	d1f9      	bne.n	800e41a <GUI__CompactPixelIndices+0x10>
 800e426:	2001      	movs	r0, #1
 800e428:	bd10      	pop	{r4, pc}
 800e42a:	2000      	movs	r0, #0
 800e42c:	bd10      	pop	{r4, pc}
 800e42e:	2a02      	cmp	r2, #2
 800e430:	d06d      	beq.n	800e50e <GUI__CompactPixelIndices+0x104>
 800e432:	2a04      	cmp	r2, #4
 800e434:	d054      	beq.n	800e4e0 <GUI__CompactPixelIndices+0xd6>
 800e436:	2a01      	cmp	r2, #1
 800e438:	f040 8095 	bne.w	800e566 <GUI__CompactPixelIndices+0x15c>
 800e43c:	4604      	mov	r4, r0
 800e43e:	6803      	ldr	r3, [r0, #0]
 800e440:	2901      	cmp	r1, #1
 800e442:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800e446:	b2db      	uxtb	r3, r3
 800e448:	d047      	beq.n	800e4da <GUI__CompactPixelIndices+0xd0>
 800e44a:	6842      	ldr	r2, [r0, #4]
 800e44c:	2902      	cmp	r1, #2
 800e44e:	f002 0201 	and.w	r2, r2, #1
 800e452:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e456:	d102      	bne.n	800e45e <GUI__CompactPixelIndices+0x54>
 800e458:	f100 0208 	add.w	r2, r0, #8
 800e45c:	e03e      	b.n	800e4dc <GUI__CompactPixelIndices+0xd2>
 800e45e:	6882      	ldr	r2, [r0, #8]
 800e460:	2903      	cmp	r1, #3
 800e462:	f002 0201 	and.w	r2, r2, #1
 800e466:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800e46a:	d102      	bne.n	800e472 <GUI__CompactPixelIndices+0x68>
 800e46c:	f100 020c 	add.w	r2, r0, #12
 800e470:	e034      	b.n	800e4dc <GUI__CompactPixelIndices+0xd2>
 800e472:	68c2      	ldr	r2, [r0, #12]
 800e474:	2904      	cmp	r1, #4
 800e476:	f002 0201 	and.w	r2, r2, #1
 800e47a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800e47e:	d102      	bne.n	800e486 <GUI__CompactPixelIndices+0x7c>
 800e480:	f100 0210 	add.w	r2, r0, #16
 800e484:	e02a      	b.n	800e4dc <GUI__CompactPixelIndices+0xd2>
 800e486:	6902      	ldr	r2, [r0, #16]
 800e488:	2905      	cmp	r1, #5
 800e48a:	f002 0201 	and.w	r2, r2, #1
 800e48e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e492:	d102      	bne.n	800e49a <GUI__CompactPixelIndices+0x90>
 800e494:	f100 0214 	add.w	r2, r0, #20
 800e498:	e020      	b.n	800e4dc <GUI__CompactPixelIndices+0xd2>
 800e49a:	6942      	ldr	r2, [r0, #20]
 800e49c:	2906      	cmp	r1, #6
 800e49e:	f002 0201 	and.w	r2, r2, #1
 800e4a2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800e4a6:	d102      	bne.n	800e4ae <GUI__CompactPixelIndices+0xa4>
 800e4a8:	f100 0218 	add.w	r2, r0, #24
 800e4ac:	e016      	b.n	800e4dc <GUI__CompactPixelIndices+0xd2>
 800e4ae:	6982      	ldr	r2, [r0, #24]
 800e4b0:	3907      	subs	r1, #7
 800e4b2:	f002 0201 	and.w	r2, r2, #1
 800e4b6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800e4ba:	d102      	bne.n	800e4c2 <GUI__CompactPixelIndices+0xb8>
 800e4bc:	f100 021c 	add.w	r2, r0, #28
 800e4c0:	e005      	b.n	800e4ce <GUI__CompactPixelIndices+0xc4>
 800e4c2:	f100 0220 	add.w	r2, r0, #32
 800e4c6:	69c0      	ldr	r0, [r0, #28]
 800e4c8:	f000 0001 	and.w	r0, r0, #1
 800e4cc:	4303      	orrs	r3, r0
 800e4ce:	f804 3b01 	strb.w	r3, [r4], #1
 800e4d2:	2900      	cmp	r1, #0
 800e4d4:	d0a7      	beq.n	800e426 <GUI__CompactPixelIndices+0x1c>
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	e7b1      	b.n	800e43e <GUI__CompactPixelIndices+0x34>
 800e4da:	1d02      	adds	r2, r0, #4
 800e4dc:	2100      	movs	r1, #0
 800e4de:	e7f6      	b.n	800e4ce <GUI__CompactPixelIndices+0xc4>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	6803      	ldr	r3, [r0, #0]
 800e4e4:	2901      	cmp	r1, #1
 800e4e6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	d102      	bne.n	800e4f4 <GUI__CompactPixelIndices+0xea>
 800e4ee:	1d04      	adds	r4, r0, #4
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	e006      	b.n	800e502 <GUI__CompactPixelIndices+0xf8>
 800e4f4:	f100 0408 	add.w	r4, r0, #8
 800e4f8:	6840      	ldr	r0, [r0, #4]
 800e4fa:	f000 000f 	and.w	r0, r0, #15
 800e4fe:	4303      	orrs	r3, r0
 800e500:	3902      	subs	r1, #2
 800e502:	f802 3b01 	strb.w	r3, [r2], #1
 800e506:	2900      	cmp	r1, #0
 800e508:	d08d      	beq.n	800e426 <GUI__CompactPixelIndices+0x1c>
 800e50a:	4620      	mov	r0, r4
 800e50c:	e7e9      	b.n	800e4e2 <GUI__CompactPixelIndices+0xd8>
 800e50e:	4604      	mov	r4, r0
 800e510:	6803      	ldr	r3, [r0, #0]
 800e512:	2901      	cmp	r1, #1
 800e514:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	d021      	beq.n	800e560 <GUI__CompactPixelIndices+0x156>
 800e51c:	6842      	ldr	r2, [r0, #4]
 800e51e:	2902      	cmp	r1, #2
 800e520:	f002 0203 	and.w	r2, r2, #3
 800e524:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800e528:	d102      	bne.n	800e530 <GUI__CompactPixelIndices+0x126>
 800e52a:	f100 0208 	add.w	r2, r0, #8
 800e52e:	e018      	b.n	800e562 <GUI__CompactPixelIndices+0x158>
 800e530:	6882      	ldr	r2, [r0, #8]
 800e532:	2903      	cmp	r1, #3
 800e534:	f002 0203 	and.w	r2, r2, #3
 800e538:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800e53c:	d102      	bne.n	800e544 <GUI__CompactPixelIndices+0x13a>
 800e53e:	f100 020c 	add.w	r2, r0, #12
 800e542:	e00e      	b.n	800e562 <GUI__CompactPixelIndices+0x158>
 800e544:	f100 0210 	add.w	r2, r0, #16
 800e548:	68c0      	ldr	r0, [r0, #12]
 800e54a:	f000 0003 	and.w	r0, r0, #3
 800e54e:	4303      	orrs	r3, r0
 800e550:	3904      	subs	r1, #4
 800e552:	f804 3b01 	strb.w	r3, [r4], #1
 800e556:	2900      	cmp	r1, #0
 800e558:	f43f af65 	beq.w	800e426 <GUI__CompactPixelIndices+0x1c>
 800e55c:	4610      	mov	r0, r2
 800e55e:	e7d7      	b.n	800e510 <GUI__CompactPixelIndices+0x106>
 800e560:	1d02      	adds	r2, r0, #4
 800e562:	2100      	movs	r1, #0
 800e564:	e7f5      	b.n	800e552 <GUI__CompactPixelIndices+0x148>
 800e566:	2300      	movs	r3, #0
 800e568:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800e56c:	54c2      	strb	r2, [r0, r3]
 800e56e:	3301      	adds	r3, #1
 800e570:	428b      	cmp	r3, r1
 800e572:	d1f9      	bne.n	800e568 <GUI__CompactPixelIndices+0x15e>
 800e574:	e757      	b.n	800e426 <GUI__CompactPixelIndices+0x1c>

0800e576 <GUI__ConvertColor2Index>:
 800e576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e57a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e57e:	681e      	ldr	r6, [r3, #0]
 800e580:	f1b8 0f00 	cmp.w	r8, #0
 800e584:	bf08      	it	eq
 800e586:	4680      	moveq	r8, r0
 800e588:	2a08      	cmp	r2, #8
 800e58a:	4604      	mov	r4, r0
 800e58c:	460d      	mov	r5, r1
 800e58e:	dd05      	ble.n	800e59c <GUI__ConvertColor2Index+0x26>
 800e590:	2a10      	cmp	r2, #16
 800e592:	f340 80b6 	ble.w	800e702 <GUI__ConvertColor2Index+0x18c>
 800e596:	2000      	movs	r0, #0
 800e598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59c:	3a01      	subs	r2, #1
 800e59e:	2a07      	cmp	r2, #7
 800e5a0:	f200 80a4 	bhi.w	800e6ec <GUI__ConvertColor2Index+0x176>
 800e5a4:	e8df f002 	tbb	[pc, r2]
 800e5a8:	87a26111 	.word	0x87a26111
 800e5ac:	92a2a2a2 	.word	0x92a2a2a2
 800e5b0:	69e0      	ldr	r0, [r4, #28]
 800e5b2:	47b0      	blx	r6
 800e5b4:	4338      	orrs	r0, r7
 800e5b6:	f104 0920 	add.w	r9, r4, #32
 800e5ba:	b2c7      	uxtb	r7, r0
 800e5bc:	3d08      	subs	r5, #8
 800e5be:	f808 7b01 	strb.w	r7, [r8], #1
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	f000 8092 	beq.w	800e6ec <GUI__ConvertColor2Index+0x176>
 800e5c8:	464c      	mov	r4, r9
 800e5ca:	6820      	ldr	r0, [r4, #0]
 800e5cc:	47b0      	blx	r6
 800e5ce:	2d01      	cmp	r5, #1
 800e5d0:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800e5d4:	b2c7      	uxtb	r7, r0
 800e5d6:	f000 808c 	beq.w	800e6f2 <GUI__ConvertColor2Index+0x17c>
 800e5da:	6860      	ldr	r0, [r4, #4]
 800e5dc:	47b0      	blx	r6
 800e5de:	2d02      	cmp	r5, #2
 800e5e0:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 800e5e4:	b2c7      	uxtb	r7, r0
 800e5e6:	d102      	bne.n	800e5ee <GUI__ConvertColor2Index+0x78>
 800e5e8:	f104 0908 	add.w	r9, r4, #8
 800e5ec:	e083      	b.n	800e6f6 <GUI__ConvertColor2Index+0x180>
 800e5ee:	68a0      	ldr	r0, [r4, #8]
 800e5f0:	47b0      	blx	r6
 800e5f2:	2d03      	cmp	r5, #3
 800e5f4:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 800e5f8:	b2c7      	uxtb	r7, r0
 800e5fa:	d102      	bne.n	800e602 <GUI__ConvertColor2Index+0x8c>
 800e5fc:	f104 090c 	add.w	r9, r4, #12
 800e600:	e079      	b.n	800e6f6 <GUI__ConvertColor2Index+0x180>
 800e602:	68e0      	ldr	r0, [r4, #12]
 800e604:	47b0      	blx	r6
 800e606:	2d04      	cmp	r5, #4
 800e608:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800e60c:	b2c7      	uxtb	r7, r0
 800e60e:	d102      	bne.n	800e616 <GUI__ConvertColor2Index+0xa0>
 800e610:	f104 0910 	add.w	r9, r4, #16
 800e614:	e06f      	b.n	800e6f6 <GUI__ConvertColor2Index+0x180>
 800e616:	6920      	ldr	r0, [r4, #16]
 800e618:	47b0      	blx	r6
 800e61a:	2d05      	cmp	r5, #5
 800e61c:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 800e620:	b2c7      	uxtb	r7, r0
 800e622:	d102      	bne.n	800e62a <GUI__ConvertColor2Index+0xb4>
 800e624:	f104 0914 	add.w	r9, r4, #20
 800e628:	e065      	b.n	800e6f6 <GUI__ConvertColor2Index+0x180>
 800e62a:	6960      	ldr	r0, [r4, #20]
 800e62c:	47b0      	blx	r6
 800e62e:	2d06      	cmp	r5, #6
 800e630:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800e634:	b2c7      	uxtb	r7, r0
 800e636:	d102      	bne.n	800e63e <GUI__ConvertColor2Index+0xc8>
 800e638:	f104 0918 	add.w	r9, r4, #24
 800e63c:	e05b      	b.n	800e6f6 <GUI__ConvertColor2Index+0x180>
 800e63e:	69a0      	ldr	r0, [r4, #24]
 800e640:	47b0      	blx	r6
 800e642:	2d07      	cmp	r5, #7
 800e644:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 800e648:	b2c7      	uxtb	r7, r0
 800e64a:	d1b1      	bne.n	800e5b0 <GUI__ConvertColor2Index+0x3a>
 800e64c:	f104 091c 	add.w	r9, r4, #28
 800e650:	e051      	b.n	800e6f6 <GUI__ConvertColor2Index+0x180>
 800e652:	68e0      	ldr	r0, [r4, #12]
 800e654:	47b0      	blx	r6
 800e656:	4338      	orrs	r0, r7
 800e658:	f104 0910 	add.w	r9, r4, #16
 800e65c:	b2c7      	uxtb	r7, r0
 800e65e:	3d04      	subs	r5, #4
 800e660:	f808 7b01 	strb.w	r7, [r8], #1
 800e664:	2d00      	cmp	r5, #0
 800e666:	d041      	beq.n	800e6ec <GUI__ConvertColor2Index+0x176>
 800e668:	464c      	mov	r4, r9
 800e66a:	6820      	ldr	r0, [r4, #0]
 800e66c:	47b0      	blx	r6
 800e66e:	2d01      	cmp	r5, #1
 800e670:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800e674:	b2c7      	uxtb	r7, r0
 800e676:	d040      	beq.n	800e6fa <GUI__ConvertColor2Index+0x184>
 800e678:	6860      	ldr	r0, [r4, #4]
 800e67a:	47b0      	blx	r6
 800e67c:	2d02      	cmp	r5, #2
 800e67e:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800e682:	b2c7      	uxtb	r7, r0
 800e684:	d102      	bne.n	800e68c <GUI__ConvertColor2Index+0x116>
 800e686:	f104 0908 	add.w	r9, r4, #8
 800e68a:	e038      	b.n	800e6fe <GUI__ConvertColor2Index+0x188>
 800e68c:	68a0      	ldr	r0, [r4, #8]
 800e68e:	47b0      	blx	r6
 800e690:	2d03      	cmp	r5, #3
 800e692:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800e696:	b2c7      	uxtb	r7, r0
 800e698:	d1db      	bne.n	800e652 <GUI__ConvertColor2Index+0xdc>
 800e69a:	f104 090c 	add.w	r9, r4, #12
 800e69e:	e02e      	b.n	800e6fe <GUI__ConvertColor2Index+0x188>
 800e6a0:	6860      	ldr	r0, [r4, #4]
 800e6a2:	47b0      	blx	r6
 800e6a4:	4338      	orrs	r0, r7
 800e6a6:	f104 0908 	add.w	r9, r4, #8
 800e6aa:	b2c7      	uxtb	r7, r0
 800e6ac:	3d02      	subs	r5, #2
 800e6ae:	f808 7b01 	strb.w	r7, [r8], #1
 800e6b2:	b1dd      	cbz	r5, 800e6ec <GUI__ConvertColor2Index+0x176>
 800e6b4:	464c      	mov	r4, r9
 800e6b6:	6820      	ldr	r0, [r4, #0]
 800e6b8:	47b0      	blx	r6
 800e6ba:	2d01      	cmp	r5, #1
 800e6bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800e6c0:	b2c7      	uxtb	r7, r0
 800e6c2:	d1ed      	bne.n	800e6a0 <GUI__ConvertColor2Index+0x12a>
 800e6c4:	f104 0904 	add.w	r9, r4, #4
 800e6c8:	2500      	movs	r5, #0
 800e6ca:	e7f0      	b.n	800e6ae <GUI__ConvertColor2Index+0x138>
 800e6cc:	691f      	ldr	r7, [r3, #16]
 800e6ce:	b12f      	cbz	r7, 800e6dc <GUI__ConvertColor2Index+0x166>
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	4641      	mov	r1, r8
 800e6d4:	462a      	mov	r2, r5
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	47b8      	blx	r7
 800e6da:	e007      	b.n	800e6ec <GUI__ConvertColor2Index+0x176>
 800e6dc:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 800e6e0:	47b0      	blx	r6
 800e6e2:	f808 0007 	strb.w	r0, [r8, r7]
 800e6e6:	3701      	adds	r7, #1
 800e6e8:	42bd      	cmp	r5, r7
 800e6ea:	d1f7      	bne.n	800e6dc <GUI__ConvertColor2Index+0x166>
 800e6ec:	2001      	movs	r0, #1
 800e6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f2:	f104 0904 	add.w	r9, r4, #4
 800e6f6:	2500      	movs	r5, #0
 800e6f8:	e761      	b.n	800e5be <GUI__ConvertColor2Index+0x48>
 800e6fa:	f104 0904 	add.w	r9, r4, #4
 800e6fe:	2500      	movs	r5, #0
 800e700:	e7ae      	b.n	800e660 <GUI__ConvertColor2Index+0xea>
 800e702:	691f      	ldr	r7, [r3, #16]
 800e704:	b11f      	cbz	r7, 800e70e <GUI__ConvertColor2Index+0x198>
 800e706:	4641      	mov	r1, r8
 800e708:	462a      	mov	r2, r5
 800e70a:	2302      	movs	r3, #2
 800e70c:	e7e4      	b.n	800e6d8 <GUI__ConvertColor2Index+0x162>
 800e70e:	f854 0b04 	ldr.w	r0, [r4], #4
 800e712:	47b0      	blx	r6
 800e714:	3d01      	subs	r5, #1
 800e716:	f828 0b02 	strh.w	r0, [r8], #2
 800e71a:	d1f8      	bne.n	800e70e <GUI__ConvertColor2Index+0x198>
 800e71c:	e7e6      	b.n	800e6ec <GUI__ConvertColor2Index+0x176>

0800e71e <GUI__CompactPixelIndicesEx>:
 800e71e:	b513      	push	{r0, r1, r4, lr}
 800e720:	2400      	movs	r4, #0
 800e722:	9400      	str	r4, [sp, #0]
 800e724:	f7ff ff27 	bl	800e576 <GUI__ConvertColor2Index>
 800e728:	b002      	add	sp, #8
 800e72a:	bd10      	pop	{r4, pc}

0800e72c <GUI_SetTextMode>:
 800e72c:	4b03      	ldr	r3, [pc, #12]	; (800e73c <GUI_SetTextMode+0x10>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800e734:	8558      	strh	r0, [r3, #42]	; 0x2a
 800e736:	4610      	mov	r0, r2
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	200001b0 	.word	0x200001b0

0800e740 <GUI_SetTextAlign>:
 800e740:	4b03      	ldr	r3, [pc, #12]	; (800e750 <GUI_SetTextAlign+0x10>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e748:	8598      	strh	r0, [r3, #44]	; 0x2c
 800e74a:	4610      	mov	r0, r2
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	200001b0 	.word	0x200001b0

0800e754 <GUI_SetLineStyle>:
 800e754:	4b02      	ldr	r3, [pc, #8]	; (800e760 <GUI_SetLineStyle+0xc>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	7e9a      	ldrb	r2, [r3, #26]
 800e75a:	7698      	strb	r0, [r3, #26]
 800e75c:	4610      	mov	r0, r2
 800e75e:	4770      	bx	lr
 800e760:	200001b0 	.word	0x200001b0

0800e764 <_CreateBuffer>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	6943      	ldr	r3, [r0, #20]
 800e768:	4605      	mov	r5, r0
 800e76a:	8818      	ldrh	r0, [r3, #0]
 800e76c:	300d      	adds	r0, #13
 800e76e:	0080      	lsls	r0, r0, #2
 800e770:	460e      	mov	r6, r1
 800e772:	f7fa f807 	bl	8008784 <GUI_ALLOC_AllocNoInit>
 800e776:	4607      	mov	r7, r0
 800e778:	b908      	cbnz	r0, 800e77e <_CreateBuffer+0x1a>
 800e77a:	2000      	movs	r0, #0
 800e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e77e:	f7f9 fdb9 	bl	80082f4 <GUI_ALLOC_LockH>
 800e782:	682b      	ldr	r3, [r5, #0]
 800e784:	4604      	mov	r4, r0
 800e786:	6998      	ldr	r0, [r3, #24]
 800e788:	f7f9 f85a 	bl	8007840 <GUI_DEVICE__GetpDriver>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d0f4      	beq.n	800e77a <_CreateBuffer+0x16>
 800e790:	68c3      	ldr	r3, [r0, #12]
 800e792:	2108      	movs	r1, #8
 800e794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e796:	4798      	blx	r3
 800e798:	2802      	cmp	r0, #2
 800e79a:	dd0b      	ble.n	800e7b4 <_CreateBuffer+0x50>
 800e79c:	2804      	cmp	r0, #4
 800e79e:	dd06      	ble.n	800e7ae <_CreateBuffer+0x4a>
 800e7a0:	2808      	cmp	r0, #8
 800e7a2:	dd06      	ble.n	800e7b2 <_CreateBuffer+0x4e>
 800e7a4:	2811      	cmp	r0, #17
 800e7a6:	bfb4      	ite	lt
 800e7a8:	2010      	movlt	r0, #16
 800e7aa:	2020      	movge	r0, #32
 800e7ac:	e002      	b.n	800e7b4 <_CreateBuffer+0x50>
 800e7ae:	2004      	movs	r0, #4
 800e7b0:	e000      	b.n	800e7b4 <_CreateBuffer+0x50>
 800e7b2:	2008      	movs	r0, #8
 800e7b4:	2808      	cmp	r0, #8
 800e7b6:	61a0      	str	r0, [r4, #24]
 800e7b8:	dd04      	ble.n	800e7c4 <_CreateBuffer+0x60>
 800e7ba:	2810      	cmp	r0, #16
 800e7bc:	bfcc      	ite	gt
 800e7be:	2304      	movgt	r3, #4
 800e7c0:	2302      	movle	r3, #2
 800e7c2:	e000      	b.n	800e7c6 <_CreateBuffer+0x62>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	696a      	ldr	r2, [r5, #20]
 800e7c8:	6123      	str	r3, [r4, #16]
 800e7ca:	8812      	ldrh	r2, [r2, #0]
 800e7cc:	61e2      	str	r2, [r4, #28]
 800e7ce:	4353      	muls	r3, r2
 800e7d0:	6163      	str	r3, [r4, #20]
 800e7d2:	f7f9 ff2d 	bl	8008630 <GUI_ALLOC_GetMaxSize>
 800e7d6:	6963      	ldr	r3, [r4, #20]
 800e7d8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 800e7dc:	4283      	cmp	r3, r0
 800e7de:	f04f 0200 	mov.w	r2, #0
 800e7e2:	bfc8      	it	gt
 800e7e4:	6160      	strgt	r0, [r4, #20]
 800e7e6:	2e01      	cmp	r6, #1
 800e7e8:	60e2      	str	r2, [r4, #12]
 800e7ea:	bf18      	it	ne
 800e7ec:	69e2      	ldrne	r2, [r4, #28]
 800e7ee:	60a7      	str	r7, [r4, #8]
 800e7f0:	bf18      	it	ne
 800e7f2:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 800e7f6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800e7fa:	bf18      	it	ne
 800e7fc:	f102 32ff 	addne.w	r2, r2, #4294967295
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	bf18      	it	ne
 800e804:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	4620      	mov	r0, r4
 800e80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e80e <_GetBkIndex.isra.0>:
 800e80e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e812:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 800e816:	4540      	cmp	r0, r8
 800e818:	4606      	mov	r6, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	4691      	mov	r9, r2
 800e81e:	461c      	mov	r4, r3
 800e820:	da04      	bge.n	800e82c <_GetBkIndex.isra.0+0x1e>
 800e822:	f8d9 0000 	ldr.w	r0, [r9]
 800e826:	bb28      	cbnz	r0, 800e874 <_GetBkIndex.isra.0+0x66>
 800e828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e82c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e830:	4298      	cmp	r0, r3
 800e832:	dcf6      	bgt.n	800e822 <_GetBkIndex.isra.0+0x14>
 800e834:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 800e838:	42b9      	cmp	r1, r7
 800e83a:	dbf2      	blt.n	800e822 <_GetBkIndex.isra.0+0x14>
 800e83c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e840:	4299      	cmp	r1, r3
 800e842:	dcee      	bgt.n	800e822 <_GetBkIndex.isra.0+0x14>
 800e844:	ebc8 0800 	rsb	r8, r8, r0
 800e848:	1bcf      	subs	r7, r1, r7
 800e84a:	6960      	ldr	r0, [r4, #20]
 800e84c:	4641      	mov	r1, r8
 800e84e:	463a      	mov	r2, r7
 800e850:	f000 fba4 	bl	800ef9c <GUI_GetBitmapPixelIndex>
 800e854:	2800      	cmp	r0, #0
 800e856:	d0e4      	beq.n	800e822 <_GetBkIndex.isra.0+0x14>
 800e858:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800e85c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e860:	1a8a      	subs	r2, r1, r2
 800e862:	fb02 7707 	mla	r7, r2, r7, r7
 800e866:	f104 0320 	add.w	r3, r4, #32
 800e86a:	44b8      	add	r8, r7
 800e86c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e874:	68c3      	ldr	r3, [r0, #12]
 800e876:	4631      	mov	r1, r6
 800e878:	695b      	ldr	r3, [r3, #20]
 800e87a:	462a      	mov	r2, r5
 800e87c:	4798      	blx	r3
 800e87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e882 <_GetBkIndexAlpha.isra.2>:
 800e882:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e886:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800e88a:	42b0      	cmp	r0, r6
 800e88c:	4680      	mov	r8, r0
 800e88e:	460f      	mov	r7, r1
 800e890:	4691      	mov	r9, r2
 800e892:	461d      	mov	r5, r3
 800e894:	db14      	blt.n	800e8c0 <_GetBkIndexAlpha.isra.2+0x3e>
 800e896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e89a:	4298      	cmp	r0, r3
 800e89c:	dc10      	bgt.n	800e8c0 <_GetBkIndexAlpha.isra.2+0x3e>
 800e89e:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 800e8a2:	42a1      	cmp	r1, r4
 800e8a4:	db0c      	blt.n	800e8c0 <_GetBkIndexAlpha.isra.2+0x3e>
 800e8a6:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 800e8aa:	4299      	cmp	r1, r3
 800e8ac:	dc08      	bgt.n	800e8c0 <_GetBkIndexAlpha.isra.2+0x3e>
 800e8ae:	1b86      	subs	r6, r0, r6
 800e8b0:	6968      	ldr	r0, [r5, #20]
 800e8b2:	1b0c      	subs	r4, r1, r4
 800e8b4:	b130      	cbz	r0, 800e8c4 <_GetBkIndexAlpha.isra.2+0x42>
 800e8b6:	4631      	mov	r1, r6
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	f000 fb6f 	bl	800ef9c <GUI_GetBitmapPixelIndex>
 800e8be:	e003      	b.n	800e8c8 <_GetBkIndexAlpha.isra.2+0x46>
 800e8c0:	2400      	movs	r4, #0
 800e8c2:	4626      	mov	r6, r4
 800e8c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800e8c8:	0e00      	lsrs	r0, r0, #24
 800e8ca:	28ff      	cmp	r0, #255	; 0xff
 800e8cc:	d109      	bne.n	800e8e2 <_GetBkIndexAlpha.isra.2+0x60>
 800e8ce:	f8d9 0000 	ldr.w	r0, [r9]
 800e8d2:	b190      	cbz	r0, 800e8fa <_GetBkIndexAlpha.isra.2+0x78>
 800e8d4:	68c3      	ldr	r3, [r0, #12]
 800e8d6:	4641      	mov	r1, r8
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	463a      	mov	r2, r7
 800e8dc:	4798      	blx	r3
 800e8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8e2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e8e6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e8ea:	1a8a      	subs	r2, r1, r2
 800e8ec:	fb02 4404 	mla	r4, r2, r4, r4
 800e8f0:	f105 0320 	add.w	r3, r5, #32
 800e8f4:	4426      	add	r6, r4
 800e8f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800e900 <_GetDeviceRect>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4a0c      	ldr	r2, [pc, #48]	; (800e934 <_GetDeviceRect+0x34>)
 800e904:	6983      	ldr	r3, [r0, #24]
 800e906:	56d2      	ldrsb	r2, [r2, r3]
 800e908:	2a01      	cmp	r2, #1
 800e90a:	4605      	mov	r5, r0
 800e90c:	460c      	mov	r4, r1
 800e90e:	dd0d      	ble.n	800e92c <_GetDeviceRect+0x2c>
 800e910:	2200      	movs	r2, #0
 800e912:	804a      	strh	r2, [r1, #2]
 800e914:	800a      	strh	r2, [r1, #0]
 800e916:	4618      	mov	r0, r3
 800e918:	f7fd f9f0 	bl	800bcfc <LCD_GetXSizeEx>
 800e91c:	3801      	subs	r0, #1
 800e91e:	80a0      	strh	r0, [r4, #4]
 800e920:	69a8      	ldr	r0, [r5, #24]
 800e922:	f7fd f9ee 	bl	800bd02 <LCD_GetYSizeEx>
 800e926:	3801      	subs	r0, #1
 800e928:	80e0      	strh	r0, [r4, #6]
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	68c3      	ldr	r3, [r0, #12]
 800e92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e930:	4798      	blx	r3
 800e932:	bd38      	pop	{r3, r4, r5, pc}
 800e934:	2001aee4 	.word	0x2001aee4

0800e938 <_FlushBuffer.isra.5>:
 800e938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93a:	460c      	mov	r4, r1
 800e93c:	68c9      	ldr	r1, [r1, #12]
 800e93e:	b087      	sub	sp, #28
 800e940:	2900      	cmp	r1, #0
 800e942:	d030      	beq.n	800e9a6 <_FlushBuffer.isra.5+0x6e>
 800e944:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800e948:	6822      	ldr	r2, [r4, #0]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d103      	bne.n	800e956 <_FlushBuffer.isra.5+0x1e>
 800e94e:	4615      	mov	r5, r2
 800e950:	6062      	str	r2, [r4, #4]
 800e952:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e954:	e009      	b.n	800e96a <_FlushBuffer.isra.5+0x32>
 800e956:	69e3      	ldr	r3, [r4, #28]
 800e958:	6865      	ldr	r5, [r4, #4]
 800e95a:	6a27      	ldr	r7, [r4, #32]
 800e95c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e960:	3b01      	subs	r3, #1
 800e962:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e966:	3504      	adds	r5, #4
 800e968:	6063      	str	r3, [r4, #4]
 800e96a:	6806      	ldr	r6, [r0, #0]
 800e96c:	b1b6      	cbz	r6, 800e99c <_FlushBuffer.isra.5+0x64>
 800e96e:	69a2      	ldr	r2, [r4, #24]
 800e970:	4628      	mov	r0, r5
 800e972:	f7ff fd4a 	bl	800e40a <GUI__CompactPixelIndices>
 800e976:	2301      	movs	r3, #1
 800e978:	68f2      	ldr	r2, [r6, #12]
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	69a3      	ldr	r3, [r4, #24]
 800e97e:	9301      	str	r3, [sp, #4]
 800e980:	9503      	str	r5, [sp, #12]
 800e982:	6963      	ldr	r3, [r4, #20]
 800e984:	9302      	str	r3, [sp, #8]
 800e986:	2500      	movs	r5, #0
 800e988:	9504      	str	r5, [sp, #16]
 800e98a:	9505      	str	r5, [sp, #20]
 800e98c:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800e990:	68e3      	ldr	r3, [r4, #12]
 800e992:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e994:	4630      	mov	r0, r6
 800e996:	4639      	mov	r1, r7
 800e998:	47e0      	blx	ip
 800e99a:	e000      	b.n	800e99e <_FlushBuffer.isra.5+0x66>
 800e99c:	2501      	movs	r5, #1
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60e3      	str	r3, [r4, #12]
 800e9a2:	b2e8      	uxtb	r0, r5
 800e9a4:	e000      	b.n	800e9a8 <_FlushBuffer.isra.5+0x70>
 800e9a6:	4608      	mov	r0, r1
 800e9a8:	b007      	add	sp, #28
 800e9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9ac <_SetBkIndexBuffered>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	9c06      	ldr	r4, [sp, #24]
 800e9b0:	460d      	mov	r5, r1
 800e9b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e9b4:	428d      	cmp	r5, r1
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	4617      	mov	r7, r2
 800e9ba:	d105      	bne.n	800e9c8 <_SetBkIndexBuffered+0x1c>
 800e9bc:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800e9c0:	6a21      	ldr	r1, [r4, #32]
 800e9c2:	4411      	add	r1, r2
 800e9c4:	4288      	cmp	r0, r1
 800e9c6:	d003      	beq.n	800e9d0 <_SetBkIndexBuffered+0x24>
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	f7ff ffb4 	bl	800e938 <_FlushBuffer.isra.5>
 800e9d0:	6863      	ldr	r3, [r4, #4]
 800e9d2:	601f      	str	r7, [r3, #0]
 800e9d4:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800e9d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e9dc:	6063      	str	r3, [r4, #4]
 800e9de:	68e3      	ldr	r3, [r4, #12]
 800e9e0:	b90b      	cbnz	r3, 800e9e6 <_SetBkIndexBuffered+0x3a>
 800e9e2:	62a6      	str	r6, [r4, #40]	; 0x28
 800e9e4:	62e5      	str	r5, [r4, #44]	; 0x2c
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60e3      	str	r3, [r4, #12]
 800e9ea:	6226      	str	r6, [r4, #32]
 800e9ec:	6265      	str	r5, [r4, #36]	; 0x24
 800e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9f0 <_ReleaseBuffer.isra.6>:
 800e9f0:	b513      	push	{r0, r1, r4, lr}
 800e9f2:	9101      	str	r1, [sp, #4]
 800e9f4:	f7ff ffa0 	bl	800e938 <_FlushBuffer.isra.5>
 800e9f8:	a802      	add	r0, sp, #8
 800e9fa:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800e9fe:	6894      	ldr	r4, [r2, #8]
 800ea00:	f7f9 fc86 	bl	8008310 <GUI_ALLOC_UnlockH>
 800ea04:	4620      	mov	r0, r4
 800ea06:	f7f9 fca3 	bl	8008350 <GUI_ALLOC_Free>
 800ea0a:	b002      	add	sp, #8
 800ea0c:	bd10      	pop	{r4, pc}
	...

0800ea10 <GUI_SPRITE_SetPosition>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	b0a7      	sub	sp, #156	; 0x9c
 800ea16:	9116      	str	r1, [sp, #88]	; 0x58
 800ea18:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	f000 8275 	beq.w	800ef0a <GUI_SPRITE_SetPosition+0x4fa>
 800ea20:	f7f9 fc68 	bl	80082f4 <GUI_ALLOC_LockH>
 800ea24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea26:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ea2a:	6801      	ldr	r1, [r0, #0]
 800ea2c:	9023      	str	r0, [sp, #140]	; 0x8c
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	9106      	str	r1, [sp, #24]
 800ea32:	d106      	bne.n	800ea42 <GUI_SPRITE_SetPosition+0x32>
 800ea34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ea38:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800ea3c:	459e      	cmp	lr, r3
 800ea3e:	f000 8239 	beq.w	800eeb4 <GUI_SPRITE_SetPosition+0x4a4>
 800ea42:	2000      	movs	r0, #0
 800ea44:	f7fd f892 	bl	800bb6c <GUI_MEMDEV_Select>
 800ea48:	4ba0      	ldr	r3, [pc, #640]	; (800eccc <GUI_SPRITE_SetPosition+0x2bc>)
 800ea4a:	9906      	ldr	r1, [sp, #24]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6989      	ldr	r1, [r1, #24]
 800ea50:	7c5a      	ldrb	r2, [r3, #17]
 800ea52:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800ea54:	9108      	str	r1, [sp, #32]
 800ea56:	4291      	cmp	r1, r2
 800ea58:	bf18      	it	ne
 800ea5a:	7459      	strbne	r1, [r3, #17]
 800ea5c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ea60:	9310      	str	r3, [sp, #64]	; 0x40
 800ea62:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800ea66:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800ea6a:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 800ea6e:	921a      	str	r2, [sp, #104]	; 0x68
 800ea70:	ebce 0303 	rsb	r3, lr, r3
 800ea74:	1c59      	adds	r1, r3, #1
 800ea76:	9307      	str	r3, [sp, #28]
 800ea78:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 800ea7c:	901f      	str	r0, [sp, #124]	; 0x7c
 800ea7e:	1b9b      	subs	r3, r3, r6
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	930e      	str	r3, [sp, #56]	; 0x38
 800ea84:	8a2b      	ldrh	r3, [r5, #16]
 800ea86:	910d      	str	r1, [sp, #52]	; 0x34
 800ea88:	079b      	lsls	r3, r3, #30
 800ea8a:	921e      	str	r2, [sp, #120]	; 0x78
 800ea8c:	f140 81f7 	bpl.w	800ee7e <GUI_SPRITE_SetPosition+0x46e>
 800ea90:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ea94:	696b      	ldr	r3, [r5, #20]
 800ea96:	9311      	str	r3, [sp, #68]	; 0x44
 800ea98:	ebce 0a01 	rsb	sl, lr, r1
 800ea9c:	f1ba 0f00 	cmp.w	sl, #0
 800eaa0:	ebc6 0902 	rsb	r9, r6, r2
 800eaa4:	dc0c      	bgt.n	800eac0 <GUI_SPRITE_SetPosition+0xb0>
 800eaa6:	9b07      	ldr	r3, [sp, #28]
 800eaa8:	930a      	str	r3, [sp, #40]	; 0x28
 800eaaa:	469e      	mov	lr, r3
 800eaac:	f04f 32ff 	mov.w	r2, #4294967295
 800eab0:	44d6      	add	lr, sl
 800eab2:	2100      	movs	r1, #0
 800eab4:	f8cd e01c 	str.w	lr, [sp, #28]
 800eab8:	911c      	str	r1, [sp, #112]	; 0x70
 800eaba:	9214      	str	r2, [sp, #80]	; 0x50
 800eabc:	9204      	str	r2, [sp, #16]
 800eabe:	e009      	b.n	800ead4 <GUI_SPRITE_SetPosition+0xc4>
 800eac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eac2:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 800eac6:	f04f 0e01 	mov.w	lr, #1
 800eaca:	2100      	movs	r1, #0
 800eacc:	9314      	str	r3, [sp, #80]	; 0x50
 800eace:	f8cd e010 	str.w	lr, [sp, #16]
 800ead2:	910a      	str	r1, [sp, #40]	; 0x28
 800ead4:	f1b9 0f00 	cmp.w	r9, #0
 800ead8:	dc0c      	bgt.n	800eaf4 <GUI_SPRITE_SetPosition+0xe4>
 800eada:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800eadc:	4622      	mov	r2, r4
 800eade:	f04f 3eff 	mov.w	lr, #4294967295
 800eae2:	444a      	add	r2, r9
 800eae4:	2300      	movs	r3, #0
 800eae6:	920e      	str	r2, [sp, #56]	; 0x38
 800eae8:	931b      	str	r3, [sp, #108]	; 0x6c
 800eaea:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 800eaee:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800eaf2:	e006      	b.n	800eb02 <GUI_SPRITE_SetPosition+0xf2>
 800eaf4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eaf6:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 800eafa:	2301      	movs	r3, #1
 800eafc:	9215      	str	r2, [sp, #84]	; 0x54
 800eafe:	9309      	str	r3, [sp, #36]	; 0x24
 800eb00:	2400      	movs	r4, #0
 800eb02:	9806      	ldr	r0, [sp, #24]
 800eb04:	a924      	add	r1, sp, #144	; 0x90
 800eb06:	f7ff fefb 	bl	800e900 <_GetDeviceRect>
 800eb0a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800eb0c:	9904      	ldr	r1, [sp, #16]
 800eb0e:	f7ff fe29 	bl	800e764 <_CreateBuffer>
 800eb12:	9012      	str	r0, [sp, #72]	; 0x48
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f000 81b2 	beq.w	800ee7e <GUI_SPRITE_SetPosition+0x46e>
 800eb1a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800eb1c:	9904      	ldr	r1, [sp, #16]
 800eb1e:	f7ff fe21 	bl	800e764 <_CreateBuffer>
 800eb22:	9013      	str	r0, [sp, #76]	; 0x4c
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f000 81a5 	beq.w	800ee74 <GUI_SPRITE_SetPosition+0x464>
 800eb2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eb2c:	68d8      	ldr	r0, [r3, #12]
 800eb2e:	4426      	add	r6, r4
 800eb30:	b990      	cbnz	r0, 800eb58 <GUI_SPRITE_SetPosition+0x148>
 800eb32:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800eb36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb3a:	9019      	str	r0, [sp, #100]	; 0x64
 800eb3c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800eb40:	434b      	muls	r3, r1
 800eb42:	9321      	str	r3, [sp, #132]	; 0x84
 800eb44:	fb0e 2304 	mla	r3, lr, r4, r2
 800eb48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800eb4c:	930c      	str	r3, [sp, #48]	; 0x30
 800eb4e:	9b04      	ldr	r3, [sp, #16]
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	444e      	add	r6, r9
 800eb54:	9320      	str	r3, [sp, #128]	; 0x80
 800eb56:	e0db      	b.n	800ed10 <GUI_SPRITE_SetPosition+0x300>
 800eb58:	f7f9 fbcc 	bl	80082f4 <GUI_ALLOC_LockH>
 800eb5c:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800eb60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb64:	9022      	str	r0, [sp, #136]	; 0x88
 800eb66:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800eb6a:	434b      	muls	r3, r1
 800eb6c:	9319      	str	r3, [sp, #100]	; 0x64
 800eb6e:	fb0e 2304 	mla	r3, lr, r4, r2
 800eb72:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800eb76:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb78:	9b04      	ldr	r3, [sp, #16]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	444e      	add	r6, r9
 800eb7e:	931d      	str	r3, [sp, #116]	; 0x74
 800eb80:	9915      	ldr	r1, [sp, #84]	; 0x54
 800eb82:	428c      	cmp	r4, r1
 800eb84:	f000 809e 	beq.w	800ecc4 <GUI_SPRITE_SetPosition+0x2b4>
 800eb88:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800eb8c:	4574      	cmp	r4, lr
 800eb8e:	db05      	blt.n	800eb9c <GUI_SPRITE_SetPosition+0x18c>
 800eb90:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eb92:	428c      	cmp	r4, r1
 800eb94:	bfcc      	ite	gt
 800eb96:	2300      	movgt	r3, #0
 800eb98:	2301      	movle	r3, #1
 800eb9a:	e000      	b.n	800eb9e <GUI_SPRITE_SetPosition+0x18e>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	9318      	str	r3, [sp, #96]	; 0x60
 800eba2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800eba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eba8:	9105      	str	r1, [sp, #20]
 800ebaa:	ebc9 0206 	rsb	r2, r9, r6
 800ebae:	441f      	add	r7, r3
 800ebb0:	920c      	str	r2, [sp, #48]	; 0x30
 800ebb2:	4457      	add	r7, sl
 800ebb4:	461d      	mov	r5, r3
 800ebb6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ebb8:	428d      	cmp	r5, r1
 800ebba:	d07a      	beq.n	800ecb2 <GUI_SPRITE_SetPosition+0x2a2>
 800ebbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4622      	mov	r2, r4
 800ebc2:	f000 f9eb 	bl	800ef9c <GUI_GetBitmapPixelIndex>
 800ebc6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d069      	beq.n	800eca0 <GUI_SPRITE_SetPosition+0x290>
 800ebcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ebce:	4295      	cmp	r5, r2
 800ebd0:	ebca 0c07 	rsb	ip, sl, r7
 800ebd4:	db07      	blt.n	800ebe6 <GUI_SPRITE_SetPosition+0x1d6>
 800ebd6:	9b07      	ldr	r3, [sp, #28]
 800ebd8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800ebdc:	429d      	cmp	r5, r3
 800ebde:	bfc8      	it	gt
 800ebe0:	f04f 0b00 	movgt.w	fp, #0
 800ebe4:	e001      	b.n	800ebea <GUI_SPRITE_SetPosition+0x1da>
 800ebe6:	f04f 0b00 	mov.w	fp, #0
 800ebea:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800ebee:	429f      	cmp	r7, r3
 800ebf0:	fa5f fb8b 	uxtb.w	fp, fp
 800ebf4:	db17      	blt.n	800ec26 <GUI_SPRITE_SetPosition+0x216>
 800ebf6:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800ebfa:	429e      	cmp	r6, r3
 800ebfc:	db13      	blt.n	800ec26 <GUI_SPRITE_SetPosition+0x216>
 800ebfe:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800ec02:	429f      	cmp	r7, r3
 800ec04:	dc0f      	bgt.n	800ec26 <GUI_SPRITE_SetPosition+0x216>
 800ec06:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800ec0a:	429e      	cmp	r6, r3
 800ec0c:	dc0b      	bgt.n	800ec26 <GUI_SPRITE_SetPosition+0x216>
 800ec0e:	4638      	mov	r0, r7
 800ec10:	4631      	mov	r1, r6
 800ec12:	9a06      	ldr	r2, [sp, #24]
 800ec14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec16:	f8cd c00c 	str.w	ip, [sp, #12]
 800ec1a:	f7ff fdf8 	bl	800e80e <_GetBkIndex.isra.0>
 800ec1e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ec22:	4680      	mov	r8, r0
 800ec24:	e001      	b.n	800ec2a <GUI_SPRITE_SetPosition+0x21a>
 800ec26:	f04f 0800 	mov.w	r8, #0
 800ec2a:	f1bb 0f00 	cmp.w	fp, #0
 800ec2e:	d00d      	beq.n	800ec4c <GUI_SPRITE_SetPosition+0x23c>
 800ec30:	ebb5 010a 	subs.w	r1, r5, sl
 800ec34:	d415      	bmi.n	800ec62 <GUI_SPRITE_SetPosition+0x252>
 800ec36:	ebb4 0209 	subs.w	r2, r4, r9
 800ec3a:	d412      	bmi.n	800ec62 <GUI_SPRITE_SetPosition+0x252>
 800ec3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ec3e:	f8cd c00c 	str.w	ip, [sp, #12]
 800ec42:	f000 f9ab 	bl	800ef9c <GUI_GetBitmapPixelIndex>
 800ec46:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ec4a:	b950      	cbnz	r0, 800ec62 <GUI_SPRITE_SetPosition+0x252>
 800ec4c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800ec50:	459c      	cmp	ip, r3
 800ec52:	db06      	blt.n	800ec62 <GUI_SPRITE_SetPosition+0x252>
 800ec54:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800ec58:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800ec5c:	459e      	cmp	lr, r3
 800ec5e:	f280 812d 	bge.w	800eebc <GUI_SPRITE_SetPosition+0x4ac>
 800ec62:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800ec66:	429f      	cmp	r7, r3
 800ec68:	db17      	blt.n	800ec9a <GUI_SPRITE_SetPosition+0x28a>
 800ec6a:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800ec6e:	429e      	cmp	r6, r3
 800ec70:	db13      	blt.n	800ec9a <GUI_SPRITE_SetPosition+0x28a>
 800ec72:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800ec76:	429f      	cmp	r7, r3
 800ec78:	dc0f      	bgt.n	800ec9a <GUI_SPRITE_SetPosition+0x28a>
 800ec7a:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800ec7e:	429e      	cmp	r6, r3
 800ec80:	dc0b      	bgt.n	800ec9a <GUI_SPRITE_SetPosition+0x28a>
 800ec82:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec86:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 800ec8a:	9100      	str	r1, [sp, #0]
 800ec8c:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 800ec90:	9b06      	ldr	r3, [sp, #24]
 800ec92:	4638      	mov	r0, r7
 800ec94:	4631      	mov	r1, r6
 800ec96:	f7ff fe89 	bl	800e9ac <_SetBkIndexBuffered>
 800ec9a:	9905      	ldr	r1, [sp, #20]
 800ec9c:	f8c1 8020 	str.w	r8, [r1, #32]
 800eca0:	9b05      	ldr	r3, [sp, #20]
 800eca2:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 800eca6:	9a04      	ldr	r2, [sp, #16]
 800eca8:	4473      	add	r3, lr
 800ecaa:	4415      	add	r5, r2
 800ecac:	9305      	str	r3, [sp, #20]
 800ecae:	4417      	add	r7, r2
 800ecb0:	e781      	b.n	800ebb6 <GUI_SPRITE_SetPosition+0x1a6>
 800ecb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecb4:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 800ecb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecba:	4473      	add	r3, lr
 800ecbc:	4414      	add	r4, r2
 800ecbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecc0:	4416      	add	r6, r2
 800ecc2:	e75d      	b.n	800eb80 <GUI_SPRITE_SetPosition+0x170>
 800ecc4:	a822      	add	r0, sp, #136	; 0x88
 800ecc6:	f7f9 fb23 	bl	8008310 <GUI_ALLOC_UnlockH>
 800ecca:	e0ce      	b.n	800ee6a <GUI_SPRITE_SetPosition+0x45a>
 800eccc:	200001b0 	.word	0x200001b0
 800ecd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ecd2:	4294      	cmp	r4, r2
 800ecd4:	db20      	blt.n	800ed18 <GUI_SPRITE_SetPosition+0x308>
 800ecd6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800ecda:	4574      	cmp	r4, lr
 800ecdc:	bfcc      	ite	gt
 800ecde:	2300      	movgt	r3, #0
 800ece0:	2301      	movle	r3, #1
 800ece2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ece4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	931d      	str	r3, [sp, #116]	; 0x74
 800ecea:	ebc9 0106 	rsb	r1, r9, r6
 800ecee:	4417      	add	r7, r2
 800ecf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecf2:	910f      	str	r1, [sp, #60]	; 0x3c
 800ecf4:	4457      	add	r7, sl
 800ecf6:	9305      	str	r3, [sp, #20]
 800ecf8:	4615      	mov	r5, r2
 800ecfa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ecfc:	428d      	cmp	r5, r1
 800ecfe:	d10d      	bne.n	800ed1c <GUI_SPRITE_SetPosition+0x30c>
 800ed00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed02:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 800ed06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed08:	4473      	add	r3, lr
 800ed0a:	4414      	add	r4, r2
 800ed0c:	930c      	str	r3, [sp, #48]	; 0x30
 800ed0e:	4416      	add	r6, r2
 800ed10:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ed12:	428c      	cmp	r4, r1
 800ed14:	d1dc      	bne.n	800ecd0 <GUI_SPRITE_SetPosition+0x2c0>
 800ed16:	e0a8      	b.n	800ee6a <GUI_SPRITE_SetPosition+0x45a>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e7e2      	b.n	800ece2 <GUI_SPRITE_SetPosition+0x2d2>
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ed20:	4622      	mov	r2, r4
 800ed22:	f000 f93b 	bl	800ef9c <GUI_GetBitmapPixelIndex>
 800ed26:	0e01      	lsrs	r1, r0, #24
 800ed28:	29ff      	cmp	r1, #255	; 0xff
 800ed2a:	9018      	str	r0, [sp, #96]	; 0x60
 800ed2c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ed2e:	f000 8093 	beq.w	800ee58 <GUI_SPRITE_SetPosition+0x448>
 800ed32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed34:	4295      	cmp	r5, r2
 800ed36:	ebca 0c07 	rsb	ip, sl, r7
 800ed3a:	db07      	blt.n	800ed4c <GUI_SPRITE_SetPosition+0x33c>
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800ed42:	429d      	cmp	r5, r3
 800ed44:	bfc8      	it	gt
 800ed46:	f04f 0b00 	movgt.w	fp, #0
 800ed4a:	e001      	b.n	800ed50 <GUI_SPRITE_SetPosition+0x340>
 800ed4c:	f04f 0b00 	mov.w	fp, #0
 800ed50:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800ed54:	429f      	cmp	r7, r3
 800ed56:	fa5f fb8b 	uxtb.w	fp, fp
 800ed5a:	db22      	blt.n	800eda2 <GUI_SPRITE_SetPosition+0x392>
 800ed5c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800ed60:	429e      	cmp	r6, r3
 800ed62:	db1e      	blt.n	800eda2 <GUI_SPRITE_SetPosition+0x392>
 800ed64:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800ed68:	429f      	cmp	r7, r3
 800ed6a:	dc1a      	bgt.n	800eda2 <GUI_SPRITE_SetPosition+0x392>
 800ed6c:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800ed70:	429e      	cmp	r6, r3
 800ed72:	dc16      	bgt.n	800eda2 <GUI_SPRITE_SetPosition+0x392>
 800ed74:	4631      	mov	r1, r6
 800ed76:	9a06      	ldr	r2, [sp, #24]
 800ed78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed7a:	f8cd c00c 	str.w	ip, [sp, #12]
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7ff fd7f 	bl	800e882 <_GetBkIndexAlpha.isra.2>
 800ed84:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ed88:	4b61      	ldr	r3, [pc, #388]	; (800ef10 <GUI_SPRITE_SetPosition+0x500>)
 800ed8a:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	4680      	mov	r8, r0
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ed98:	4798      	blx	r3
 800ed9a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ed9e:	9019      	str	r0, [sp, #100]	; 0x64
 800eda0:	e001      	b.n	800eda6 <GUI_SPRITE_SetPosition+0x396>
 800eda2:	f04f 0800 	mov.w	r8, #0
 800eda6:	f1bb 0f00 	cmp.w	fp, #0
 800edaa:	d00f      	beq.n	800edcc <GUI_SPRITE_SetPosition+0x3bc>
 800edac:	ebb5 010a 	subs.w	r1, r5, sl
 800edb0:	d416      	bmi.n	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800edb2:	ebb4 0209 	subs.w	r2, r4, r9
 800edb6:	d413      	bmi.n	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800edb8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800edba:	f8cd c00c 	str.w	ip, [sp, #12]
 800edbe:	f000 f8ed 	bl	800ef9c <GUI_GetBitmapPixelIndex>
 800edc2:	0e00      	lsrs	r0, r0, #24
 800edc4:	28ff      	cmp	r0, #255	; 0xff
 800edc6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800edca:	d109      	bne.n	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800edcc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800edd0:	459c      	cmp	ip, r3
 800edd2:	db05      	blt.n	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800edd4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800edd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800edda:	4299      	cmp	r1, r3
 800eddc:	f280 8082 	bge.w	800eee4 <GUI_SPRITE_SetPosition+0x4d4>
 800ede0:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 800ede4:	429f      	cmp	r7, r3
 800ede6:	db34      	blt.n	800ee52 <GUI_SPRITE_SetPosition+0x442>
 800ede8:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 800edec:	429e      	cmp	r6, r3
 800edee:	db30      	blt.n	800ee52 <GUI_SPRITE_SetPosition+0x442>
 800edf0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800edf4:	429f      	cmp	r7, r3
 800edf6:	dc2c      	bgt.n	800ee52 <GUI_SPRITE_SetPosition+0x442>
 800edf8:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800edfc:	429e      	cmp	r6, r3
 800edfe:	dc28      	bgt.n	800ee52 <GUI_SPRITE_SetPosition+0x442>
 800ee00:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 800ee04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee06:	f8df b108 	ldr.w	fp, [pc, #264]	; 800ef10 <GUI_SPRITE_SetPosition+0x500>
 800ee0a:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 800ee0e:	b191      	cbz	r1, 800ee36 <GUI_SPRITE_SetPosition+0x426>
 800ee10:	9a08      	ldr	r2, [sp, #32]
 800ee12:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	4798      	blx	r3
 800ee1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee1e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ee20:	43da      	mvns	r2, r3
 800ee22:	b2d2      	uxtb	r2, r2
 800ee24:	f7fd fcae 	bl	800c784 <GUI__MixColors>
 800ee28:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ee2c:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 800ee30:	691b      	ldr	r3, [r3, #16]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	e004      	b.n	800ee40 <GUI_SPRITE_SetPosition+0x430>
 800ee36:	9908      	ldr	r1, [sp, #32]
 800ee38:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	4798      	blx	r3
 800ee42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	4602      	mov	r2, r0
 800ee48:	4631      	mov	r1, r6
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	9b06      	ldr	r3, [sp, #24]
 800ee4e:	f7ff fdad 	bl	800e9ac <_SetBkIndexBuffered>
 800ee52:	9905      	ldr	r1, [sp, #20]
 800ee54:	f8c1 8020 	str.w	r8, [r1, #32]
 800ee58:	9b05      	ldr	r3, [sp, #20]
 800ee5a:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 800ee5e:	9a04      	ldr	r2, [sp, #16]
 800ee60:	4473      	add	r3, lr
 800ee62:	4415      	add	r5, r2
 800ee64:	9305      	str	r3, [sp, #20]
 800ee66:	4417      	add	r7, r2
 800ee68:	e747      	b.n	800ecfa <GUI_SPRITE_SetPosition+0x2ea>
 800ee6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ee6e:	6818      	ldr	r0, [r3, #0]
 800ee70:	f7ff fdbe 	bl	800e9f0 <_ReleaseBuffer.isra.6>
 800ee74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee76:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ee78:	6818      	ldr	r0, [r3, #0]
 800ee7a:	f7ff fdb9 	bl	800e9f0 <_ReleaseBuffer.isra.6>
 800ee7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ee82:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ee84:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800ee88:	809a      	strh	r2, [r3, #4]
 800ee8a:	440a      	add	r2, r1
 800ee8c:	3a01      	subs	r2, #1
 800ee8e:	f8a3 e006 	strh.w	lr, [r3, #6]
 800ee92:	811a      	strh	r2, [r3, #8]
 800ee94:	f10e 32ff 	add.w	r2, lr, #4294967295
 800ee98:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 800ee9c:	9908      	ldr	r1, [sp, #32]
 800ee9e:	4472      	add	r2, lr
 800eea0:	815a      	strh	r2, [r3, #10]
 800eea2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eea4:	4291      	cmp	r1, r2
 800eea6:	d002      	beq.n	800eeae <GUI_SPRITE_SetPosition+0x49e>
 800eea8:	4b1a      	ldr	r3, [pc, #104]	; (800ef14 <GUI_SPRITE_SetPosition+0x504>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	745a      	strb	r2, [r3, #17]
 800eeae:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800eeb0:	f7fc fe5c 	bl	800bb6c <GUI_MEMDEV_Select>
 800eeb4:	a823      	add	r0, sp, #140	; 0x8c
 800eeb6:	f7f9 fa2b 	bl	8008310 <GUI_ALLOC_UnlockH>
 800eeba:	e026      	b.n	800ef0a <GUI_SPRITE_SetPosition+0x4fa>
 800eebc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800eec0:	459c      	cmp	ip, r3
 800eec2:	f73f aece 	bgt.w	800ec62 <GUI_SPRITE_SetPosition+0x252>
 800eec6:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800eeca:	459e      	cmp	lr, r3
 800eecc:	f73f aec9 	bgt.w	800ec62 <GUI_SPRITE_SetPosition+0x252>
 800eed0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800eed2:	9b05      	ldr	r3, [sp, #20]
 800eed4:	9100      	str	r1, [sp, #0]
 800eed6:	6a1a      	ldr	r2, [r3, #32]
 800eed8:	9b06      	ldr	r3, [sp, #24]
 800eeda:	4660      	mov	r0, ip
 800eedc:	4671      	mov	r1, lr
 800eede:	f7ff fd65 	bl	800e9ac <_SetBkIndexBuffered>
 800eee2:	e6be      	b.n	800ec62 <GUI_SPRITE_SetPosition+0x252>
 800eee4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800eee8:	459c      	cmp	ip, r3
 800eeea:	f73f af79 	bgt.w	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800eeee:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800eef2:	4299      	cmp	r1, r3
 800eef4:	f73f af74 	bgt.w	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800eef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eefa:	9b05      	ldr	r3, [sp, #20]
 800eefc:	9200      	str	r2, [sp, #0]
 800eefe:	6a1a      	ldr	r2, [r3, #32]
 800ef00:	9b06      	ldr	r3, [sp, #24]
 800ef02:	4660      	mov	r0, ip
 800ef04:	f7ff fd52 	bl	800e9ac <_SetBkIndexBuffered>
 800ef08:	e76a      	b.n	800ede0 <GUI_SPRITE_SetPosition+0x3d0>
 800ef0a:	b027      	add	sp, #156	; 0x9c
 800ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef10:	2001af14 	.word	0x2001af14
 800ef14:	200001b0 	.word	0x200001b0

0800ef18 <GUI_GetBitmapPixelIndexEx>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	2804      	cmp	r0, #4
 800ef1c:	9c02      	ldr	r4, [sp, #8]
 800ef1e:	d025      	beq.n	800ef6c <GUI_GetBitmapPixelIndexEx+0x54>
 800ef20:	dc0f      	bgt.n	800ef42 <GUI_GetBitmapPixelIndexEx+0x2a>
 800ef22:	2801      	cmp	r0, #1
 800ef24:	d017      	beq.n	800ef56 <GUI_GetBitmapPixelIndexEx+0x3e>
 800ef26:	2802      	cmp	r0, #2
 800ef28:	d136      	bne.n	800ef98 <GUI_GetBitmapPixelIndexEx+0x80>
 800ef2a:	0898      	lsrs	r0, r3, #2
 800ef2c:	fb04 2101 	mla	r1, r4, r1, r2
 800ef30:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 800ef34:	5c08      	ldrb	r0, [r1, r0]
 800ef36:	f003 0306 	and.w	r3, r3, #6
 800ef3a:	40d8      	lsrs	r0, r3
 800ef3c:	f000 0003 	and.w	r0, r0, #3
 800ef40:	bd10      	pop	{r4, pc}
 800ef42:	2810      	cmp	r0, #16
 800ef44:	d01c      	beq.n	800ef80 <GUI_GetBitmapPixelIndexEx+0x68>
 800ef46:	2820      	cmp	r0, #32
 800ef48:	d020      	beq.n	800ef8c <GUI_GetBitmapPixelIndexEx+0x74>
 800ef4a:	2808      	cmp	r0, #8
 800ef4c:	d124      	bne.n	800ef98 <GUI_GetBitmapPixelIndexEx+0x80>
 800ef4e:	fb04 2101 	mla	r1, r4, r1, r2
 800ef52:	5cc8      	ldrb	r0, [r1, r3]
 800ef54:	bd10      	pop	{r4, pc}
 800ef56:	08d8      	lsrs	r0, r3, #3
 800ef58:	fb04 2101 	mla	r1, r4, r1, r2
 800ef5c:	43db      	mvns	r3, r3
 800ef5e:	5c08      	ldrb	r0, [r1, r0]
 800ef60:	f003 0307 	and.w	r3, r3, #7
 800ef64:	40d8      	lsrs	r0, r3
 800ef66:	f000 0001 	and.w	r0, r0, #1
 800ef6a:	bd10      	pop	{r4, pc}
 800ef6c:	0858      	lsrs	r0, r3, #1
 800ef6e:	fb04 2101 	mla	r1, r4, r1, r2
 800ef72:	07db      	lsls	r3, r3, #31
 800ef74:	5c08      	ldrb	r0, [r1, r0]
 800ef76:	bf4c      	ite	mi
 800ef78:	f000 000f 	andmi.w	r0, r0, #15
 800ef7c:	0900      	lsrpl	r0, r0, #4
 800ef7e:	bd10      	pop	{r4, pc}
 800ef80:	1049      	asrs	r1, r1, #1
 800ef82:	fb04 3301 	mla	r3, r4, r1, r3
 800ef86:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800ef8a:	bd10      	pop	{r4, pc}
 800ef8c:	1089      	asrs	r1, r1, #2
 800ef8e:	fb04 3301 	mla	r3, r4, r1, r3
 800ef92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ef96:	bd10      	pop	{r4, pc}
 800ef98:	2000      	movs	r0, #0
 800ef9a:	bd10      	pop	{r4, pc}

0800ef9c <GUI_GetBitmapPixelIndex>:
 800ef9c:	b513      	push	{r0, r1, r4, lr}
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4604      	mov	r4, r0
 800efa2:	b130      	cbz	r0, 800efb2 <GUI_GetBitmapPixelIndex+0x16>
 800efa4:	88c0      	ldrh	r0, [r0, #6]
 800efa6:	88a1      	ldrh	r1, [r4, #4]
 800efa8:	9200      	str	r2, [sp, #0]
 800efaa:	68a2      	ldr	r2, [r4, #8]
 800efac:	f7ff ffb4 	bl	800ef18 <GUI_GetBitmapPixelIndexEx>
 800efb0:	e7ff      	b.n	800efb2 <GUI_GetBitmapPixelIndex+0x16>
 800efb2:	b002      	add	sp, #8
 800efb4:	bd10      	pop	{r4, pc}

0800efb6 <GUI_CalcColorDist>:
 800efb6:	b2cb      	uxtb	r3, r1
 800efb8:	b2c2      	uxtb	r2, r0
 800efba:	1ad2      	subs	r2, r2, r3
 800efbc:	b292      	uxth	r2, r2
 800efbe:	b293      	uxth	r3, r2
 800efc0:	b530      	push	{r4, r5, lr}
 800efc2:	041c      	lsls	r4, r3, #16
 800efc4:	bf48      	it	mi
 800efc6:	4253      	negmi	r3, r2
 800efc8:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800efcc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800efd0:	ebc5 0202 	rsb	r2, r5, r2
 800efd4:	bf48      	it	mi
 800efd6:	b29b      	uxthmi	r3, r3
 800efd8:	b292      	uxth	r2, r2
 800efda:	0c09      	lsrs	r1, r1, #16
 800efdc:	fb13 f403 	smulbb	r4, r3, r3
 800efe0:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800efe4:	b293      	uxth	r3, r2
 800efe6:	041d      	lsls	r5, r3, #16
 800efe8:	b289      	uxth	r1, r1
 800efea:	b288      	uxth	r0, r1
 800efec:	bf44      	itt	mi
 800efee:	4253      	negmi	r3, r2
 800eff0:	b29b      	uxthmi	r3, r3
 800eff2:	0402      	lsls	r2, r0, #16
 800eff4:	bf48      	it	mi
 800eff6:	4248      	negmi	r0, r1
 800eff8:	fb13 4303 	smlabb	r3, r3, r3, r4
 800effc:	bf48      	it	mi
 800effe:	b280      	uxthmi	r0, r0
 800f000:	fb00 3000 	mla	r0, r0, r0, r3
 800f004:	bd30      	pop	{r4, r5, pc}

0800f006 <WM__UpdateChildPositions>:
 800f006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00a:	b087      	sub	sp, #28
 800f00c:	69c4      	ldr	r4, [r0, #28]
 800f00e:	9303      	str	r3, [sp, #12]
 800f010:	468a      	mov	sl, r1
 800f012:	4693      	mov	fp, r2
 800f014:	2c00      	cmp	r4, #0
 800f016:	d06d      	beq.n	800f0f4 <WM__UpdateChildPositions+0xee>
 800f018:	4620      	mov	r0, r4
 800f01a:	f7f9 f96b 	bl	80082f4 <GUI_ALLOC_LockH>
 800f01e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f020:	9005      	str	r0, [sp, #20]
 800f022:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800f026:	2b80      	cmp	r3, #128	; 0x80
 800f028:	f8b0 8000 	ldrh.w	r8, [r0]
 800f02c:	8842      	ldrh	r2, [r0, #2]
 800f02e:	8886      	ldrh	r6, [r0, #4]
 800f030:	88c5      	ldrh	r5, [r0, #6]
 800f032:	d008      	beq.n	800f046 <WM__UpdateChildPositions+0x40>
 800f034:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f038:	d108      	bne.n	800f04c <WM__UpdateChildPositions+0x46>
 800f03a:	eb08 090a 	add.w	r9, r8, sl
 800f03e:	fa1f f989 	uxth.w	r9, r9
 800f042:	9b03      	ldr	r3, [sp, #12]
 800f044:	e008      	b.n	800f058 <WM__UpdateChildPositions+0x52>
 800f046:	9803      	ldr	r0, [sp, #12]
 800f048:	b283      	uxth	r3, r0
 800f04a:	e001      	b.n	800f050 <WM__UpdateChildPositions+0x4a>
 800f04c:	fa1f f38a 	uxth.w	r3, sl
 800f050:	eb03 0908 	add.w	r9, r3, r8
 800f054:	fa1f f989 	uxth.w	r9, r9
 800f058:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800f05c:	4433      	add	r3, r6
 800f05e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f062:	b29b      	uxth	r3, r3
 800f064:	d008      	beq.n	800f078 <WM__UpdateChildPositions+0x72>
 800f066:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800f06a:	d108      	bne.n	800f07e <WM__UpdateChildPositions+0x78>
 800f06c:	eb02 0c0b 	add.w	ip, r2, fp
 800f070:	fa1f fc8c 	uxth.w	ip, ip
 800f074:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f076:	e008      	b.n	800f08a <WM__UpdateChildPositions+0x84>
 800f078:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f07a:	b28f      	uxth	r7, r1
 800f07c:	e001      	b.n	800f082 <WM__UpdateChildPositions+0x7c>
 800f07e:	fa1f f78b 	uxth.w	r7, fp
 800f082:	eb07 0c02 	add.w	ip, r7, r2
 800f086:	fa1f fc8c 	uxth.w	ip, ip
 800f08a:	fa0f f989 	sxth.w	r9, r9
 800f08e:	fa0f f888 	sxth.w	r8, r8
 800f092:	b212      	sxth	r2, r2
 800f094:	442f      	add	r7, r5
 800f096:	fa0f fc8c 	sxth.w	ip, ip
 800f09a:	ebb9 0108 	subs.w	r1, r9, r8
 800f09e:	9202      	str	r2, [sp, #8]
 800f0a0:	b2bf      	uxth	r7, r7
 800f0a2:	ebc2 020c 	rsb	r2, r2, ip
 800f0a6:	d100      	bne.n	800f0aa <WM__UpdateChildPositions+0xa4>
 800f0a8:	b142      	cbz	r2, 800f0bc <WM__UpdateChildPositions+0xb6>
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	9301      	str	r3, [sp, #4]
 800f0ae:	f8cd c000 	str.w	ip, [sp]
 800f0b2:	f000 f8c8 	bl	800f246 <WM_MoveWindow>
 800f0b6:	f8dd c000 	ldr.w	ip, [sp]
 800f0ba:	9b01      	ldr	r3, [sp, #4]
 800f0bc:	b21b      	sxth	r3, r3
 800f0be:	ebc9 0903 	rsb	r9, r9, r3
 800f0c2:	b236      	sxth	r6, r6
 800f0c4:	9b02      	ldr	r3, [sp, #8]
 800f0c6:	ebc6 0808 	rsb	r8, r6, r8
 800f0ca:	b23f      	sxth	r7, r7
 800f0cc:	b22d      	sxth	r5, r5
 800f0ce:	ebcc 0c07 	rsb	ip, ip, r7
 800f0d2:	1b5d      	subs	r5, r3, r5
 800f0d4:	eb19 0108 	adds.w	r1, r9, r8
 800f0d8:	eb0c 0205 	add.w	r2, ip, r5
 800f0dc:	d100      	bne.n	800f0e0 <WM__UpdateChildPositions+0xda>
 800f0de:	b112      	cbz	r2, 800f0e6 <WM__UpdateChildPositions+0xe0>
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f7fe f881 	bl	800d1e8 <WM_ResizeWindow>
 800f0e6:	a806      	add	r0, sp, #24
 800f0e8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800f0ec:	6a1c      	ldr	r4, [r3, #32]
 800f0ee:	f7f9 f90f 	bl	8008310 <GUI_ALLOC_UnlockH>
 800f0f2:	e78f      	b.n	800f014 <WM__UpdateChildPositions+0xe>
 800f0f4:	b007      	add	sp, #28
 800f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0fa <WM__GetPrevSibling>:
 800f0fa:	b538      	push	{r3, r4, r5, lr}
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	f000 f80f 	bl	800f120 <WM__GetFirstSibling>
 800f102:	4604      	mov	r4, r0
 800f104:	b154      	cbz	r4, 800f11c <WM__GetPrevSibling+0x22>
 800f106:	42ac      	cmp	r4, r5
 800f108:	d007      	beq.n	800f11a <WM__GetPrevSibling+0x20>
 800f10a:	4620      	mov	r0, r4
 800f10c:	f7f9 f8e8 	bl	80082e0 <GUI_ALLOC_h2p>
 800f110:	6a03      	ldr	r3, [r0, #32]
 800f112:	42ab      	cmp	r3, r5
 800f114:	d002      	beq.n	800f11c <WM__GetPrevSibling+0x22>
 800f116:	461c      	mov	r4, r3
 800f118:	e7f4      	b.n	800f104 <WM__GetPrevSibling+0xa>
 800f11a:	2400      	movs	r4, #0
 800f11c:	4620      	mov	r0, r4
 800f11e:	bd38      	pop	{r3, r4, r5, pc}

0800f120 <WM__GetFirstSibling>:
 800f120:	b508      	push	{r3, lr}
 800f122:	f7f9 fe7d 	bl	8008e20 <WM_GetParent>
 800f126:	b118      	cbz	r0, 800f130 <WM__GetFirstSibling+0x10>
 800f128:	f7f9 f8da 	bl	80082e0 <GUI_ALLOC_h2p>
 800f12c:	69c0      	ldr	r0, [r0, #28]
 800f12e:	bd08      	pop	{r3, pc}
 800f130:	bd08      	pop	{r3, pc}

0800f132 <_MoveDescendents>:
 800f132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	4606      	mov	r6, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	4615      	mov	r5, r2
 800f13e:	a804      	add	r0, sp, #16
 800f140:	2100      	movs	r1, #0
 800f142:	2210      	movs	r2, #16
 800f144:	f000 f8ef 	bl	800f326 <memset>
 800f148:	b336      	cbz	r6, 800f198 <_MoveDescendents+0x66>
 800f14a:	4630      	mov	r0, r6
 800f14c:	f7f9 f8d2 	bl	80082f4 <GUI_ALLOC_LockH>
 800f150:	4621      	mov	r1, r4
 800f152:	462a      	mov	r2, r5
 800f154:	9001      	str	r0, [sp, #4]
 800f156:	f7fd fe5d 	bl	800ce14 <GUI_MoveRect>
 800f15a:	9801      	ldr	r0, [sp, #4]
 800f15c:	4621      	mov	r1, r4
 800f15e:	3008      	adds	r0, #8
 800f160:	462a      	mov	r2, r5
 800f162:	f7fd fe57 	bl	800ce14 <GUI_MoveRect>
 800f166:	a808      	add	r0, sp, #32
 800f168:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 800f16c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800f170:	6a17      	ldr	r7, [r2, #32]
 800f172:	f7f9 f8cd 	bl	8008310 <GUI_ALLOC_UnlockH>
 800f176:	4640      	mov	r0, r8
 800f178:	4621      	mov	r1, r4
 800f17a:	462a      	mov	r2, r5
 800f17c:	f7ff ffd9 	bl	800f132 <_MoveDescendents>
 800f180:	2303      	movs	r3, #3
 800f182:	9304      	str	r3, [sp, #16]
 800f184:	4630      	mov	r0, r6
 800f186:	ab02      	add	r3, sp, #8
 800f188:	a904      	add	r1, sp, #16
 800f18a:	9307      	str	r3, [sp, #28]
 800f18c:	9402      	str	r4, [sp, #8]
 800f18e:	9503      	str	r5, [sp, #12]
 800f190:	463e      	mov	r6, r7
 800f192:	f7fd ff85 	bl	800d0a0 <WM__SendMessage>
 800f196:	e7d7      	b.n	800f148 <_MoveDescendents+0x16>
 800f198:	b008      	add	sp, #32
 800f19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f19e <WM__MoveWindow>:
 800f19e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1a2:	b08b      	sub	sp, #44	; 0x2c
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	460d      	mov	r5, r1
 800f1a8:	4614      	mov	r4, r2
 800f1aa:	a806      	add	r0, sp, #24
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	2210      	movs	r2, #16
 800f1b0:	f000 f8b9 	bl	800f326 <memset>
 800f1b4:	2e00      	cmp	r6, #0
 800f1b6:	d043      	beq.n	800f240 <WM__MoveWindow+0xa2>
 800f1b8:	b90d      	cbnz	r5, 800f1be <WM__MoveWindow+0x20>
 800f1ba:	2c00      	cmp	r4, #0
 800f1bc:	d040      	beq.n	800f240 <WM__MoveWindow+0xa2>
 800f1be:	4630      	mov	r0, r6
 800f1c0:	f7f9 f898 	bl	80082f4 <GUI_ALLOC_LockH>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	9001      	str	r0, [sp, #4]
 800f1c8:	c803      	ldmia	r0, {r0, r1}
 800f1ca:	f10d 0808 	add.w	r8, sp, #8
 800f1ce:	e888 0003 	stmia.w	r8, {r0, r1}
 800f1d2:	4622      	mov	r2, r4
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	f7fd fe1c 	bl	800ce14 <GUI_MoveRect>
 800f1dc:	9801      	ldr	r0, [sp, #4]
 800f1de:	af0a      	add	r7, sp, #40	; 0x28
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	3008      	adds	r0, #8
 800f1e6:	f7fd fe15 	bl	800ce14 <GUI_MoveRect>
 800f1ea:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800f1ee:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800f1f2:	4638      	mov	r0, r7
 800f1f4:	f7f9 f88c 	bl	8008310 <GUI_ALLOC_UnlockH>
 800f1f8:	4622      	mov	r2, r4
 800f1fa:	4648      	mov	r0, r9
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	f7ff ff98 	bl	800f132 <_MoveDescendents>
 800f202:	4630      	mov	r0, r6
 800f204:	f7f9 f876 	bl	80082f4 <GUI_ALLOC_LockH>
 800f208:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f20a:	9001      	str	r0, [sp, #4]
 800f20c:	0792      	lsls	r2, r2, #30
 800f20e:	d50a      	bpl.n	800f226 <WM__MoveWindow+0x88>
 800f210:	6981      	ldr	r1, [r0, #24]
 800f212:	b141      	cbz	r1, 800f226 <WM__MoveWindow+0x88>
 800f214:	6a02      	ldr	r2, [r0, #32]
 800f216:	f7fa fa56 	bl	80096c6 <WM__InvalidateParent>
 800f21a:	9b01      	ldr	r3, [sp, #4]
 800f21c:	4640      	mov	r0, r8
 800f21e:	6999      	ldr	r1, [r3, #24]
 800f220:	6a1a      	ldr	r2, [r3, #32]
 800f222:	f7fa fa50 	bl	80096c6 <WM__InvalidateParent>
 800f226:	4638      	mov	r0, r7
 800f228:	f7f9 f872 	bl	8008310 <GUI_ALLOC_UnlockH>
 800f22c:	2303      	movs	r3, #3
 800f22e:	9306      	str	r3, [sp, #24]
 800f230:	4630      	mov	r0, r6
 800f232:	ab04      	add	r3, sp, #16
 800f234:	a906      	add	r1, sp, #24
 800f236:	9309      	str	r3, [sp, #36]	; 0x24
 800f238:	9504      	str	r5, [sp, #16]
 800f23a:	9405      	str	r4, [sp, #20]
 800f23c:	f7fd ff30 	bl	800d0a0 <WM__SendMessage>
 800f240:	b00b      	add	sp, #44	; 0x2c
 800f242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f246 <WM_MoveWindow>:
 800f246:	f7ff bfaa 	b.w	800f19e <WM__MoveWindow>
	...

0800f24c <__errno>:
 800f24c:	4b01      	ldr	r3, [pc, #4]	; (800f254 <__errno+0x8>)
 800f24e:	6818      	ldr	r0, [r3, #0]
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	200001d0 	.word	0x200001d0

0800f258 <__libc_init_array>:
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	4e0d      	ldr	r6, [pc, #52]	; (800f290 <__libc_init_array+0x38>)
 800f25c:	4c0d      	ldr	r4, [pc, #52]	; (800f294 <__libc_init_array+0x3c>)
 800f25e:	1ba4      	subs	r4, r4, r6
 800f260:	10a4      	asrs	r4, r4, #2
 800f262:	2500      	movs	r5, #0
 800f264:	42a5      	cmp	r5, r4
 800f266:	d109      	bne.n	800f27c <__libc_init_array+0x24>
 800f268:	4e0b      	ldr	r6, [pc, #44]	; (800f298 <__libc_init_array+0x40>)
 800f26a:	4c0c      	ldr	r4, [pc, #48]	; (800f29c <__libc_init_array+0x44>)
 800f26c:	f000 fc46 	bl	800fafc <_init>
 800f270:	1ba4      	subs	r4, r4, r6
 800f272:	10a4      	asrs	r4, r4, #2
 800f274:	2500      	movs	r5, #0
 800f276:	42a5      	cmp	r5, r4
 800f278:	d105      	bne.n	800f286 <__libc_init_array+0x2e>
 800f27a:	bd70      	pop	{r4, r5, r6, pc}
 800f27c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f280:	4798      	blx	r3
 800f282:	3501      	adds	r5, #1
 800f284:	e7ee      	b.n	800f264 <__libc_init_array+0xc>
 800f286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f28a:	4798      	blx	r3
 800f28c:	3501      	adds	r5, #1
 800f28e:	e7f2      	b.n	800f276 <__libc_init_array+0x1e>
 800f290:	08014278 	.word	0x08014278
 800f294:	08014278 	.word	0x08014278
 800f298:	08014278 	.word	0x08014278
 800f29c:	0801427c 	.word	0x0801427c

0800f2a0 <malloc>:
 800f2a0:	4b02      	ldr	r3, [pc, #8]	; (800f2ac <malloc+0xc>)
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	f000 b895 	b.w	800f3d4 <_malloc_r>
 800f2aa:	bf00      	nop
 800f2ac:	200001d0 	.word	0x200001d0

0800f2b0 <free>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	; (800f2bc <free+0xc>)
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	f000 b83f 	b.w	800f338 <_free_r>
 800f2ba:	bf00      	nop
 800f2bc:	200001d0 	.word	0x200001d0

0800f2c0 <memcmp>:
 800f2c0:	b530      	push	{r4, r5, lr}
 800f2c2:	2400      	movs	r4, #0
 800f2c4:	42a2      	cmp	r2, r4
 800f2c6:	d101      	bne.n	800f2cc <memcmp+0xc>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	e007      	b.n	800f2dc <memcmp+0x1c>
 800f2cc:	5d03      	ldrb	r3, [r0, r4]
 800f2ce:	3401      	adds	r4, #1
 800f2d0:	190d      	adds	r5, r1, r4
 800f2d2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f2d6:	42ab      	cmp	r3, r5
 800f2d8:	d0f4      	beq.n	800f2c4 <memcmp+0x4>
 800f2da:	1b58      	subs	r0, r3, r5
 800f2dc:	bd30      	pop	{r4, r5, pc}

0800f2de <memcpy>:
 800f2de:	b510      	push	{r4, lr}
 800f2e0:	1e43      	subs	r3, r0, #1
 800f2e2:	440a      	add	r2, r1
 800f2e4:	4291      	cmp	r1, r2
 800f2e6:	d100      	bne.n	800f2ea <memcpy+0xc>
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2f2:	e7f7      	b.n	800f2e4 <memcpy+0x6>

0800f2f4 <memmove>:
 800f2f4:	4288      	cmp	r0, r1
 800f2f6:	b510      	push	{r4, lr}
 800f2f8:	eb01 0302 	add.w	r3, r1, r2
 800f2fc:	d807      	bhi.n	800f30e <memmove+0x1a>
 800f2fe:	1e42      	subs	r2, r0, #1
 800f300:	4299      	cmp	r1, r3
 800f302:	d00a      	beq.n	800f31a <memmove+0x26>
 800f304:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f308:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f30c:	e7f8      	b.n	800f300 <memmove+0xc>
 800f30e:	4283      	cmp	r3, r0
 800f310:	d9f5      	bls.n	800f2fe <memmove+0xa>
 800f312:	1881      	adds	r1, r0, r2
 800f314:	1ad2      	subs	r2, r2, r3
 800f316:	42d3      	cmn	r3, r2
 800f318:	d100      	bne.n	800f31c <memmove+0x28>
 800f31a:	bd10      	pop	{r4, pc}
 800f31c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f320:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f324:	e7f7      	b.n	800f316 <memmove+0x22>

0800f326 <memset>:
 800f326:	4402      	add	r2, r0
 800f328:	4603      	mov	r3, r0
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d100      	bne.n	800f330 <memset+0xa>
 800f32e:	4770      	bx	lr
 800f330:	f803 1b01 	strb.w	r1, [r3], #1
 800f334:	e7f9      	b.n	800f32a <memset+0x4>
	...

0800f338 <_free_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4605      	mov	r5, r0
 800f33c:	2900      	cmp	r1, #0
 800f33e:	d045      	beq.n	800f3cc <_free_r+0x94>
 800f340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f344:	1f0c      	subs	r4, r1, #4
 800f346:	2b00      	cmp	r3, #0
 800f348:	bfb8      	it	lt
 800f34a:	18e4      	addlt	r4, r4, r3
 800f34c:	f000 f8cc 	bl	800f4e8 <__malloc_lock>
 800f350:	4a1f      	ldr	r2, [pc, #124]	; (800f3d0 <_free_r+0x98>)
 800f352:	6813      	ldr	r3, [r2, #0]
 800f354:	4610      	mov	r0, r2
 800f356:	b933      	cbnz	r3, 800f366 <_free_r+0x2e>
 800f358:	6063      	str	r3, [r4, #4]
 800f35a:	6014      	str	r4, [r2, #0]
 800f35c:	4628      	mov	r0, r5
 800f35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f362:	f000 b8c2 	b.w	800f4ea <__malloc_unlock>
 800f366:	42a3      	cmp	r3, r4
 800f368:	d90c      	bls.n	800f384 <_free_r+0x4c>
 800f36a:	6821      	ldr	r1, [r4, #0]
 800f36c:	1862      	adds	r2, r4, r1
 800f36e:	4293      	cmp	r3, r2
 800f370:	bf04      	itt	eq
 800f372:	681a      	ldreq	r2, [r3, #0]
 800f374:	685b      	ldreq	r3, [r3, #4]
 800f376:	6063      	str	r3, [r4, #4]
 800f378:	bf04      	itt	eq
 800f37a:	1852      	addeq	r2, r2, r1
 800f37c:	6022      	streq	r2, [r4, #0]
 800f37e:	6004      	str	r4, [r0, #0]
 800f380:	e7ec      	b.n	800f35c <_free_r+0x24>
 800f382:	4613      	mov	r3, r2
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	b10a      	cbz	r2, 800f38c <_free_r+0x54>
 800f388:	42a2      	cmp	r2, r4
 800f38a:	d9fa      	bls.n	800f382 <_free_r+0x4a>
 800f38c:	6819      	ldr	r1, [r3, #0]
 800f38e:	1858      	adds	r0, r3, r1
 800f390:	42a0      	cmp	r0, r4
 800f392:	d10b      	bne.n	800f3ac <_free_r+0x74>
 800f394:	6820      	ldr	r0, [r4, #0]
 800f396:	4401      	add	r1, r0
 800f398:	1858      	adds	r0, r3, r1
 800f39a:	4282      	cmp	r2, r0
 800f39c:	6019      	str	r1, [r3, #0]
 800f39e:	d1dd      	bne.n	800f35c <_free_r+0x24>
 800f3a0:	6810      	ldr	r0, [r2, #0]
 800f3a2:	6852      	ldr	r2, [r2, #4]
 800f3a4:	605a      	str	r2, [r3, #4]
 800f3a6:	4401      	add	r1, r0
 800f3a8:	6019      	str	r1, [r3, #0]
 800f3aa:	e7d7      	b.n	800f35c <_free_r+0x24>
 800f3ac:	d902      	bls.n	800f3b4 <_free_r+0x7c>
 800f3ae:	230c      	movs	r3, #12
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	e7d3      	b.n	800f35c <_free_r+0x24>
 800f3b4:	6820      	ldr	r0, [r4, #0]
 800f3b6:	1821      	adds	r1, r4, r0
 800f3b8:	428a      	cmp	r2, r1
 800f3ba:	bf04      	itt	eq
 800f3bc:	6811      	ldreq	r1, [r2, #0]
 800f3be:	6852      	ldreq	r2, [r2, #4]
 800f3c0:	6062      	str	r2, [r4, #4]
 800f3c2:	bf04      	itt	eq
 800f3c4:	1809      	addeq	r1, r1, r0
 800f3c6:	6021      	streq	r1, [r4, #0]
 800f3c8:	605c      	str	r4, [r3, #4]
 800f3ca:	e7c7      	b.n	800f35c <_free_r+0x24>
 800f3cc:	bd38      	pop	{r3, r4, r5, pc}
 800f3ce:	bf00      	nop
 800f3d0:	2001951c 	.word	0x2001951c

0800f3d4 <_malloc_r>:
 800f3d4:	b570      	push	{r4, r5, r6, lr}
 800f3d6:	1ccd      	adds	r5, r1, #3
 800f3d8:	f025 0503 	bic.w	r5, r5, #3
 800f3dc:	3508      	adds	r5, #8
 800f3de:	2d0c      	cmp	r5, #12
 800f3e0:	bf38      	it	cc
 800f3e2:	250c      	movcc	r5, #12
 800f3e4:	2d00      	cmp	r5, #0
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	db01      	blt.n	800f3ee <_malloc_r+0x1a>
 800f3ea:	42a9      	cmp	r1, r5
 800f3ec:	d903      	bls.n	800f3f6 <_malloc_r+0x22>
 800f3ee:	230c      	movs	r3, #12
 800f3f0:	6033      	str	r3, [r6, #0]
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	bd70      	pop	{r4, r5, r6, pc}
 800f3f6:	f000 f877 	bl	800f4e8 <__malloc_lock>
 800f3fa:	4a21      	ldr	r2, [pc, #132]	; (800f480 <_malloc_r+0xac>)
 800f3fc:	6814      	ldr	r4, [r2, #0]
 800f3fe:	4621      	mov	r1, r4
 800f400:	b991      	cbnz	r1, 800f428 <_malloc_r+0x54>
 800f402:	4c20      	ldr	r4, [pc, #128]	; (800f484 <_malloc_r+0xb0>)
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	b91b      	cbnz	r3, 800f410 <_malloc_r+0x3c>
 800f408:	4630      	mov	r0, r6
 800f40a:	f000 f83d 	bl	800f488 <_sbrk_r>
 800f40e:	6020      	str	r0, [r4, #0]
 800f410:	4629      	mov	r1, r5
 800f412:	4630      	mov	r0, r6
 800f414:	f000 f838 	bl	800f488 <_sbrk_r>
 800f418:	1c43      	adds	r3, r0, #1
 800f41a:	d124      	bne.n	800f466 <_malloc_r+0x92>
 800f41c:	230c      	movs	r3, #12
 800f41e:	6033      	str	r3, [r6, #0]
 800f420:	4630      	mov	r0, r6
 800f422:	f000 f862 	bl	800f4ea <__malloc_unlock>
 800f426:	e7e4      	b.n	800f3f2 <_malloc_r+0x1e>
 800f428:	680b      	ldr	r3, [r1, #0]
 800f42a:	1b5b      	subs	r3, r3, r5
 800f42c:	d418      	bmi.n	800f460 <_malloc_r+0x8c>
 800f42e:	2b0b      	cmp	r3, #11
 800f430:	d90f      	bls.n	800f452 <_malloc_r+0x7e>
 800f432:	600b      	str	r3, [r1, #0]
 800f434:	50cd      	str	r5, [r1, r3]
 800f436:	18cc      	adds	r4, r1, r3
 800f438:	4630      	mov	r0, r6
 800f43a:	f000 f856 	bl	800f4ea <__malloc_unlock>
 800f43e:	f104 000b 	add.w	r0, r4, #11
 800f442:	1d23      	adds	r3, r4, #4
 800f444:	f020 0007 	bic.w	r0, r0, #7
 800f448:	1ac3      	subs	r3, r0, r3
 800f44a:	d0d3      	beq.n	800f3f4 <_malloc_r+0x20>
 800f44c:	425a      	negs	r2, r3
 800f44e:	50e2      	str	r2, [r4, r3]
 800f450:	e7d0      	b.n	800f3f4 <_malloc_r+0x20>
 800f452:	428c      	cmp	r4, r1
 800f454:	684b      	ldr	r3, [r1, #4]
 800f456:	bf16      	itet	ne
 800f458:	6063      	strne	r3, [r4, #4]
 800f45a:	6013      	streq	r3, [r2, #0]
 800f45c:	460c      	movne	r4, r1
 800f45e:	e7eb      	b.n	800f438 <_malloc_r+0x64>
 800f460:	460c      	mov	r4, r1
 800f462:	6849      	ldr	r1, [r1, #4]
 800f464:	e7cc      	b.n	800f400 <_malloc_r+0x2c>
 800f466:	1cc4      	adds	r4, r0, #3
 800f468:	f024 0403 	bic.w	r4, r4, #3
 800f46c:	42a0      	cmp	r0, r4
 800f46e:	d005      	beq.n	800f47c <_malloc_r+0xa8>
 800f470:	1a21      	subs	r1, r4, r0
 800f472:	4630      	mov	r0, r6
 800f474:	f000 f808 	bl	800f488 <_sbrk_r>
 800f478:	3001      	adds	r0, #1
 800f47a:	d0cf      	beq.n	800f41c <_malloc_r+0x48>
 800f47c:	6025      	str	r5, [r4, #0]
 800f47e:	e7db      	b.n	800f438 <_malloc_r+0x64>
 800f480:	2001951c 	.word	0x2001951c
 800f484:	20019520 	.word	0x20019520

0800f488 <_sbrk_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4c06      	ldr	r4, [pc, #24]	; (800f4a4 <_sbrk_r+0x1c>)
 800f48c:	2300      	movs	r3, #0
 800f48e:	4605      	mov	r5, r0
 800f490:	4608      	mov	r0, r1
 800f492:	6023      	str	r3, [r4, #0]
 800f494:	f7f6 f87a 	bl	800558c <_sbrk>
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	d102      	bne.n	800f4a2 <_sbrk_r+0x1a>
 800f49c:	6823      	ldr	r3, [r4, #0]
 800f49e:	b103      	cbz	r3, 800f4a2 <_sbrk_r+0x1a>
 800f4a0:	602b      	str	r3, [r5, #0]
 800f4a2:	bd38      	pop	{r3, r4, r5, pc}
 800f4a4:	2001b06c 	.word	0x2001b06c

0800f4a8 <siprintf>:
 800f4a8:	b40e      	push	{r1, r2, r3}
 800f4aa:	b500      	push	{lr}
 800f4ac:	b09c      	sub	sp, #112	; 0x70
 800f4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800f4b0:	9002      	str	r0, [sp, #8]
 800f4b2:	9006      	str	r0, [sp, #24]
 800f4b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4b8:	4809      	ldr	r0, [pc, #36]	; (800f4e0 <siprintf+0x38>)
 800f4ba:	9107      	str	r1, [sp, #28]
 800f4bc:	9104      	str	r1, [sp, #16]
 800f4be:	4909      	ldr	r1, [pc, #36]	; (800f4e4 <siprintf+0x3c>)
 800f4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4c4:	9105      	str	r1, [sp, #20]
 800f4c6:	6800      	ldr	r0, [r0, #0]
 800f4c8:	9301      	str	r3, [sp, #4]
 800f4ca:	a902      	add	r1, sp, #8
 800f4cc:	f000 f868 	bl	800f5a0 <_svfiprintf_r>
 800f4d0:	9b02      	ldr	r3, [sp, #8]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	701a      	strb	r2, [r3, #0]
 800f4d6:	b01c      	add	sp, #112	; 0x70
 800f4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4dc:	b003      	add	sp, #12
 800f4de:	4770      	bx	lr
 800f4e0:	200001d0 	.word	0x200001d0
 800f4e4:	ffff0208 	.word	0xffff0208

0800f4e8 <__malloc_lock>:
 800f4e8:	4770      	bx	lr

0800f4ea <__malloc_unlock>:
 800f4ea:	4770      	bx	lr

0800f4ec <__ssputs_r>:
 800f4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f0:	688e      	ldr	r6, [r1, #8]
 800f4f2:	429e      	cmp	r6, r3
 800f4f4:	4682      	mov	sl, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	4690      	mov	r8, r2
 800f4fa:	4699      	mov	r9, r3
 800f4fc:	d837      	bhi.n	800f56e <__ssputs_r+0x82>
 800f4fe:	898a      	ldrh	r2, [r1, #12]
 800f500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f504:	d031      	beq.n	800f56a <__ssputs_r+0x7e>
 800f506:	6825      	ldr	r5, [r4, #0]
 800f508:	6909      	ldr	r1, [r1, #16]
 800f50a:	1a6f      	subs	r7, r5, r1
 800f50c:	6965      	ldr	r5, [r4, #20]
 800f50e:	2302      	movs	r3, #2
 800f510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f514:	fb95 f5f3 	sdiv	r5, r5, r3
 800f518:	f109 0301 	add.w	r3, r9, #1
 800f51c:	443b      	add	r3, r7
 800f51e:	429d      	cmp	r5, r3
 800f520:	bf38      	it	cc
 800f522:	461d      	movcc	r5, r3
 800f524:	0553      	lsls	r3, r2, #21
 800f526:	d530      	bpl.n	800f58a <__ssputs_r+0x9e>
 800f528:	4629      	mov	r1, r5
 800f52a:	f7ff ff53 	bl	800f3d4 <_malloc_r>
 800f52e:	4606      	mov	r6, r0
 800f530:	b950      	cbnz	r0, 800f548 <__ssputs_r+0x5c>
 800f532:	230c      	movs	r3, #12
 800f534:	f8ca 3000 	str.w	r3, [sl]
 800f538:	89a3      	ldrh	r3, [r4, #12]
 800f53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f53e:	81a3      	strh	r3, [r4, #12]
 800f540:	f04f 30ff 	mov.w	r0, #4294967295
 800f544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f548:	463a      	mov	r2, r7
 800f54a:	6921      	ldr	r1, [r4, #16]
 800f54c:	f7ff fec7 	bl	800f2de <memcpy>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	6126      	str	r6, [r4, #16]
 800f55e:	6165      	str	r5, [r4, #20]
 800f560:	443e      	add	r6, r7
 800f562:	1bed      	subs	r5, r5, r7
 800f564:	6026      	str	r6, [r4, #0]
 800f566:	60a5      	str	r5, [r4, #8]
 800f568:	464e      	mov	r6, r9
 800f56a:	454e      	cmp	r6, r9
 800f56c:	d900      	bls.n	800f570 <__ssputs_r+0x84>
 800f56e:	464e      	mov	r6, r9
 800f570:	4632      	mov	r2, r6
 800f572:	4641      	mov	r1, r8
 800f574:	6820      	ldr	r0, [r4, #0]
 800f576:	f7ff febd 	bl	800f2f4 <memmove>
 800f57a:	68a3      	ldr	r3, [r4, #8]
 800f57c:	1b9b      	subs	r3, r3, r6
 800f57e:	60a3      	str	r3, [r4, #8]
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	441e      	add	r6, r3
 800f584:	6026      	str	r6, [r4, #0]
 800f586:	2000      	movs	r0, #0
 800f588:	e7dc      	b.n	800f544 <__ssputs_r+0x58>
 800f58a:	462a      	mov	r2, r5
 800f58c:	f000 fa88 	bl	800faa0 <_realloc_r>
 800f590:	4606      	mov	r6, r0
 800f592:	2800      	cmp	r0, #0
 800f594:	d1e2      	bne.n	800f55c <__ssputs_r+0x70>
 800f596:	6921      	ldr	r1, [r4, #16]
 800f598:	4650      	mov	r0, sl
 800f59a:	f7ff fecd 	bl	800f338 <_free_r>
 800f59e:	e7c8      	b.n	800f532 <__ssputs_r+0x46>

0800f5a0 <_svfiprintf_r>:
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	461d      	mov	r5, r3
 800f5a6:	898b      	ldrh	r3, [r1, #12]
 800f5a8:	061f      	lsls	r7, r3, #24
 800f5aa:	b09d      	sub	sp, #116	; 0x74
 800f5ac:	4680      	mov	r8, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	4616      	mov	r6, r2
 800f5b2:	d50f      	bpl.n	800f5d4 <_svfiprintf_r+0x34>
 800f5b4:	690b      	ldr	r3, [r1, #16]
 800f5b6:	b96b      	cbnz	r3, 800f5d4 <_svfiprintf_r+0x34>
 800f5b8:	2140      	movs	r1, #64	; 0x40
 800f5ba:	f7ff ff0b 	bl	800f3d4 <_malloc_r>
 800f5be:	6020      	str	r0, [r4, #0]
 800f5c0:	6120      	str	r0, [r4, #16]
 800f5c2:	b928      	cbnz	r0, 800f5d0 <_svfiprintf_r+0x30>
 800f5c4:	230c      	movs	r3, #12
 800f5c6:	f8c8 3000 	str.w	r3, [r8]
 800f5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ce:	e0c8      	b.n	800f762 <_svfiprintf_r+0x1c2>
 800f5d0:	2340      	movs	r3, #64	; 0x40
 800f5d2:	6163      	str	r3, [r4, #20]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d8:	2320      	movs	r3, #32
 800f5da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5de:	2330      	movs	r3, #48	; 0x30
 800f5e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5e4:	9503      	str	r5, [sp, #12]
 800f5e6:	f04f 0b01 	mov.w	fp, #1
 800f5ea:	4637      	mov	r7, r6
 800f5ec:	463d      	mov	r5, r7
 800f5ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5f2:	b10b      	cbz	r3, 800f5f8 <_svfiprintf_r+0x58>
 800f5f4:	2b25      	cmp	r3, #37	; 0x25
 800f5f6:	d13e      	bne.n	800f676 <_svfiprintf_r+0xd6>
 800f5f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800f5fc:	d00b      	beq.n	800f616 <_svfiprintf_r+0x76>
 800f5fe:	4653      	mov	r3, sl
 800f600:	4632      	mov	r2, r6
 800f602:	4621      	mov	r1, r4
 800f604:	4640      	mov	r0, r8
 800f606:	f7ff ff71 	bl	800f4ec <__ssputs_r>
 800f60a:	3001      	adds	r0, #1
 800f60c:	f000 80a4 	beq.w	800f758 <_svfiprintf_r+0x1b8>
 800f610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f612:	4453      	add	r3, sl
 800f614:	9309      	str	r3, [sp, #36]	; 0x24
 800f616:	783b      	ldrb	r3, [r7, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 809d 	beq.w	800f758 <_svfiprintf_r+0x1b8>
 800f61e:	2300      	movs	r3, #0
 800f620:	f04f 32ff 	mov.w	r2, #4294967295
 800f624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	9307      	str	r3, [sp, #28]
 800f62c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f630:	931a      	str	r3, [sp, #104]	; 0x68
 800f632:	462f      	mov	r7, r5
 800f634:	2205      	movs	r2, #5
 800f636:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f63a:	4850      	ldr	r0, [pc, #320]	; (800f77c <_svfiprintf_r+0x1dc>)
 800f63c:	f7f0 fde8 	bl	8000210 <memchr>
 800f640:	9b04      	ldr	r3, [sp, #16]
 800f642:	b9d0      	cbnz	r0, 800f67a <_svfiprintf_r+0xda>
 800f644:	06d9      	lsls	r1, r3, #27
 800f646:	bf44      	itt	mi
 800f648:	2220      	movmi	r2, #32
 800f64a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f64e:	071a      	lsls	r2, r3, #28
 800f650:	bf44      	itt	mi
 800f652:	222b      	movmi	r2, #43	; 0x2b
 800f654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f658:	782a      	ldrb	r2, [r5, #0]
 800f65a:	2a2a      	cmp	r2, #42	; 0x2a
 800f65c:	d015      	beq.n	800f68a <_svfiprintf_r+0xea>
 800f65e:	9a07      	ldr	r2, [sp, #28]
 800f660:	462f      	mov	r7, r5
 800f662:	2000      	movs	r0, #0
 800f664:	250a      	movs	r5, #10
 800f666:	4639      	mov	r1, r7
 800f668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f66c:	3b30      	subs	r3, #48	; 0x30
 800f66e:	2b09      	cmp	r3, #9
 800f670:	d94d      	bls.n	800f70e <_svfiprintf_r+0x16e>
 800f672:	b1b8      	cbz	r0, 800f6a4 <_svfiprintf_r+0x104>
 800f674:	e00f      	b.n	800f696 <_svfiprintf_r+0xf6>
 800f676:	462f      	mov	r7, r5
 800f678:	e7b8      	b.n	800f5ec <_svfiprintf_r+0x4c>
 800f67a:	4a40      	ldr	r2, [pc, #256]	; (800f77c <_svfiprintf_r+0x1dc>)
 800f67c:	1a80      	subs	r0, r0, r2
 800f67e:	fa0b f000 	lsl.w	r0, fp, r0
 800f682:	4318      	orrs	r0, r3
 800f684:	9004      	str	r0, [sp, #16]
 800f686:	463d      	mov	r5, r7
 800f688:	e7d3      	b.n	800f632 <_svfiprintf_r+0x92>
 800f68a:	9a03      	ldr	r2, [sp, #12]
 800f68c:	1d11      	adds	r1, r2, #4
 800f68e:	6812      	ldr	r2, [r2, #0]
 800f690:	9103      	str	r1, [sp, #12]
 800f692:	2a00      	cmp	r2, #0
 800f694:	db01      	blt.n	800f69a <_svfiprintf_r+0xfa>
 800f696:	9207      	str	r2, [sp, #28]
 800f698:	e004      	b.n	800f6a4 <_svfiprintf_r+0x104>
 800f69a:	4252      	negs	r2, r2
 800f69c:	f043 0302 	orr.w	r3, r3, #2
 800f6a0:	9207      	str	r2, [sp, #28]
 800f6a2:	9304      	str	r3, [sp, #16]
 800f6a4:	783b      	ldrb	r3, [r7, #0]
 800f6a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f6a8:	d10c      	bne.n	800f6c4 <_svfiprintf_r+0x124>
 800f6aa:	787b      	ldrb	r3, [r7, #1]
 800f6ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f6ae:	d133      	bne.n	800f718 <_svfiprintf_r+0x178>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d1a      	adds	r2, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9203      	str	r2, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfb8      	it	lt
 800f6bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6c0:	3702      	adds	r7, #2
 800f6c2:	9305      	str	r3, [sp, #20]
 800f6c4:	4d2e      	ldr	r5, [pc, #184]	; (800f780 <_svfiprintf_r+0x1e0>)
 800f6c6:	7839      	ldrb	r1, [r7, #0]
 800f6c8:	2203      	movs	r2, #3
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f7f0 fda0 	bl	8000210 <memchr>
 800f6d0:	b138      	cbz	r0, 800f6e2 <_svfiprintf_r+0x142>
 800f6d2:	2340      	movs	r3, #64	; 0x40
 800f6d4:	1b40      	subs	r0, r0, r5
 800f6d6:	fa03 f000 	lsl.w	r0, r3, r0
 800f6da:	9b04      	ldr	r3, [sp, #16]
 800f6dc:	4303      	orrs	r3, r0
 800f6de:	3701      	adds	r7, #1
 800f6e0:	9304      	str	r3, [sp, #16]
 800f6e2:	7839      	ldrb	r1, [r7, #0]
 800f6e4:	4827      	ldr	r0, [pc, #156]	; (800f784 <_svfiprintf_r+0x1e4>)
 800f6e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6ea:	2206      	movs	r2, #6
 800f6ec:	1c7e      	adds	r6, r7, #1
 800f6ee:	f7f0 fd8f 	bl	8000210 <memchr>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d038      	beq.n	800f768 <_svfiprintf_r+0x1c8>
 800f6f6:	4b24      	ldr	r3, [pc, #144]	; (800f788 <_svfiprintf_r+0x1e8>)
 800f6f8:	bb13      	cbnz	r3, 800f740 <_svfiprintf_r+0x1a0>
 800f6fa:	9b03      	ldr	r3, [sp, #12]
 800f6fc:	3307      	adds	r3, #7
 800f6fe:	f023 0307 	bic.w	r3, r3, #7
 800f702:	3308      	adds	r3, #8
 800f704:	9303      	str	r3, [sp, #12]
 800f706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f708:	444b      	add	r3, r9
 800f70a:	9309      	str	r3, [sp, #36]	; 0x24
 800f70c:	e76d      	b.n	800f5ea <_svfiprintf_r+0x4a>
 800f70e:	fb05 3202 	mla	r2, r5, r2, r3
 800f712:	2001      	movs	r0, #1
 800f714:	460f      	mov	r7, r1
 800f716:	e7a6      	b.n	800f666 <_svfiprintf_r+0xc6>
 800f718:	2300      	movs	r3, #0
 800f71a:	3701      	adds	r7, #1
 800f71c:	9305      	str	r3, [sp, #20]
 800f71e:	4619      	mov	r1, r3
 800f720:	250a      	movs	r5, #10
 800f722:	4638      	mov	r0, r7
 800f724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f728:	3a30      	subs	r2, #48	; 0x30
 800f72a:	2a09      	cmp	r2, #9
 800f72c:	d903      	bls.n	800f736 <_svfiprintf_r+0x196>
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0c8      	beq.n	800f6c4 <_svfiprintf_r+0x124>
 800f732:	9105      	str	r1, [sp, #20]
 800f734:	e7c6      	b.n	800f6c4 <_svfiprintf_r+0x124>
 800f736:	fb05 2101 	mla	r1, r5, r1, r2
 800f73a:	2301      	movs	r3, #1
 800f73c:	4607      	mov	r7, r0
 800f73e:	e7f0      	b.n	800f722 <_svfiprintf_r+0x182>
 800f740:	ab03      	add	r3, sp, #12
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	4622      	mov	r2, r4
 800f746:	4b11      	ldr	r3, [pc, #68]	; (800f78c <_svfiprintf_r+0x1ec>)
 800f748:	a904      	add	r1, sp, #16
 800f74a:	4640      	mov	r0, r8
 800f74c:	f3af 8000 	nop.w
 800f750:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f754:	4681      	mov	r9, r0
 800f756:	d1d6      	bne.n	800f706 <_svfiprintf_r+0x166>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	065b      	lsls	r3, r3, #25
 800f75c:	f53f af35 	bmi.w	800f5ca <_svfiprintf_r+0x2a>
 800f760:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f762:	b01d      	add	sp, #116	; 0x74
 800f764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f768:	ab03      	add	r3, sp, #12
 800f76a:	9300      	str	r3, [sp, #0]
 800f76c:	4622      	mov	r2, r4
 800f76e:	4b07      	ldr	r3, [pc, #28]	; (800f78c <_svfiprintf_r+0x1ec>)
 800f770:	a904      	add	r1, sp, #16
 800f772:	4640      	mov	r0, r8
 800f774:	f000 f882 	bl	800f87c <_printf_i>
 800f778:	e7ea      	b.n	800f750 <_svfiprintf_r+0x1b0>
 800f77a:	bf00      	nop
 800f77c:	0801423c 	.word	0x0801423c
 800f780:	08014242 	.word	0x08014242
 800f784:	08014246 	.word	0x08014246
 800f788:	00000000 	.word	0x00000000
 800f78c:	0800f4ed 	.word	0x0800f4ed

0800f790 <_printf_common>:
 800f790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f794:	4691      	mov	r9, r2
 800f796:	461f      	mov	r7, r3
 800f798:	688a      	ldr	r2, [r1, #8]
 800f79a:	690b      	ldr	r3, [r1, #16]
 800f79c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	bfb8      	it	lt
 800f7a4:	4613      	movlt	r3, r2
 800f7a6:	f8c9 3000 	str.w	r3, [r9]
 800f7aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	b112      	cbz	r2, 800f7ba <_printf_common+0x2a>
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	f8c9 3000 	str.w	r3, [r9]
 800f7ba:	6823      	ldr	r3, [r4, #0]
 800f7bc:	0699      	lsls	r1, r3, #26
 800f7be:	bf42      	ittt	mi
 800f7c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f7c4:	3302      	addmi	r3, #2
 800f7c6:	f8c9 3000 	strmi.w	r3, [r9]
 800f7ca:	6825      	ldr	r5, [r4, #0]
 800f7cc:	f015 0506 	ands.w	r5, r5, #6
 800f7d0:	d107      	bne.n	800f7e2 <_printf_common+0x52>
 800f7d2:	f104 0a19 	add.w	sl, r4, #25
 800f7d6:	68e3      	ldr	r3, [r4, #12]
 800f7d8:	f8d9 2000 	ldr.w	r2, [r9]
 800f7dc:	1a9b      	subs	r3, r3, r2
 800f7de:	42ab      	cmp	r3, r5
 800f7e0:	dc28      	bgt.n	800f834 <_printf_common+0xa4>
 800f7e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f7e6:	6822      	ldr	r2, [r4, #0]
 800f7e8:	3300      	adds	r3, #0
 800f7ea:	bf18      	it	ne
 800f7ec:	2301      	movne	r3, #1
 800f7ee:	0692      	lsls	r2, r2, #26
 800f7f0:	d42d      	bmi.n	800f84e <_printf_common+0xbe>
 800f7f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7f6:	4639      	mov	r1, r7
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	47c0      	blx	r8
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	d020      	beq.n	800f842 <_printf_common+0xb2>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	68e5      	ldr	r5, [r4, #12]
 800f804:	f8d9 2000 	ldr.w	r2, [r9]
 800f808:	f003 0306 	and.w	r3, r3, #6
 800f80c:	2b04      	cmp	r3, #4
 800f80e:	bf08      	it	eq
 800f810:	1aad      	subeq	r5, r5, r2
 800f812:	68a3      	ldr	r3, [r4, #8]
 800f814:	6922      	ldr	r2, [r4, #16]
 800f816:	bf0c      	ite	eq
 800f818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f81c:	2500      	movne	r5, #0
 800f81e:	4293      	cmp	r3, r2
 800f820:	bfc4      	itt	gt
 800f822:	1a9b      	subgt	r3, r3, r2
 800f824:	18ed      	addgt	r5, r5, r3
 800f826:	f04f 0900 	mov.w	r9, #0
 800f82a:	341a      	adds	r4, #26
 800f82c:	454d      	cmp	r5, r9
 800f82e:	d11a      	bne.n	800f866 <_printf_common+0xd6>
 800f830:	2000      	movs	r0, #0
 800f832:	e008      	b.n	800f846 <_printf_common+0xb6>
 800f834:	2301      	movs	r3, #1
 800f836:	4652      	mov	r2, sl
 800f838:	4639      	mov	r1, r7
 800f83a:	4630      	mov	r0, r6
 800f83c:	47c0      	blx	r8
 800f83e:	3001      	adds	r0, #1
 800f840:	d103      	bne.n	800f84a <_printf_common+0xba>
 800f842:	f04f 30ff 	mov.w	r0, #4294967295
 800f846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f84a:	3501      	adds	r5, #1
 800f84c:	e7c3      	b.n	800f7d6 <_printf_common+0x46>
 800f84e:	18e1      	adds	r1, r4, r3
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	2030      	movs	r0, #48	; 0x30
 800f854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f858:	4422      	add	r2, r4
 800f85a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f85e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f862:	3302      	adds	r3, #2
 800f864:	e7c5      	b.n	800f7f2 <_printf_common+0x62>
 800f866:	2301      	movs	r3, #1
 800f868:	4622      	mov	r2, r4
 800f86a:	4639      	mov	r1, r7
 800f86c:	4630      	mov	r0, r6
 800f86e:	47c0      	blx	r8
 800f870:	3001      	adds	r0, #1
 800f872:	d0e6      	beq.n	800f842 <_printf_common+0xb2>
 800f874:	f109 0901 	add.w	r9, r9, #1
 800f878:	e7d8      	b.n	800f82c <_printf_common+0x9c>
	...

0800f87c <_printf_i>:
 800f87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f880:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f884:	460c      	mov	r4, r1
 800f886:	7e09      	ldrb	r1, [r1, #24]
 800f888:	b085      	sub	sp, #20
 800f88a:	296e      	cmp	r1, #110	; 0x6e
 800f88c:	4617      	mov	r7, r2
 800f88e:	4606      	mov	r6, r0
 800f890:	4698      	mov	r8, r3
 800f892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f894:	f000 80b3 	beq.w	800f9fe <_printf_i+0x182>
 800f898:	d822      	bhi.n	800f8e0 <_printf_i+0x64>
 800f89a:	2963      	cmp	r1, #99	; 0x63
 800f89c:	d036      	beq.n	800f90c <_printf_i+0x90>
 800f89e:	d80a      	bhi.n	800f8b6 <_printf_i+0x3a>
 800f8a0:	2900      	cmp	r1, #0
 800f8a2:	f000 80b9 	beq.w	800fa18 <_printf_i+0x19c>
 800f8a6:	2958      	cmp	r1, #88	; 0x58
 800f8a8:	f000 8083 	beq.w	800f9b2 <_printf_i+0x136>
 800f8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f8b4:	e032      	b.n	800f91c <_printf_i+0xa0>
 800f8b6:	2964      	cmp	r1, #100	; 0x64
 800f8b8:	d001      	beq.n	800f8be <_printf_i+0x42>
 800f8ba:	2969      	cmp	r1, #105	; 0x69
 800f8bc:	d1f6      	bne.n	800f8ac <_printf_i+0x30>
 800f8be:	6820      	ldr	r0, [r4, #0]
 800f8c0:	6813      	ldr	r3, [r2, #0]
 800f8c2:	0605      	lsls	r5, r0, #24
 800f8c4:	f103 0104 	add.w	r1, r3, #4
 800f8c8:	d52a      	bpl.n	800f920 <_printf_i+0xa4>
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	6011      	str	r1, [r2, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	da03      	bge.n	800f8da <_printf_i+0x5e>
 800f8d2:	222d      	movs	r2, #45	; 0x2d
 800f8d4:	425b      	negs	r3, r3
 800f8d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f8da:	486f      	ldr	r0, [pc, #444]	; (800fa98 <_printf_i+0x21c>)
 800f8dc:	220a      	movs	r2, #10
 800f8de:	e039      	b.n	800f954 <_printf_i+0xd8>
 800f8e0:	2973      	cmp	r1, #115	; 0x73
 800f8e2:	f000 809d 	beq.w	800fa20 <_printf_i+0x1a4>
 800f8e6:	d808      	bhi.n	800f8fa <_printf_i+0x7e>
 800f8e8:	296f      	cmp	r1, #111	; 0x6f
 800f8ea:	d020      	beq.n	800f92e <_printf_i+0xb2>
 800f8ec:	2970      	cmp	r1, #112	; 0x70
 800f8ee:	d1dd      	bne.n	800f8ac <_printf_i+0x30>
 800f8f0:	6823      	ldr	r3, [r4, #0]
 800f8f2:	f043 0320 	orr.w	r3, r3, #32
 800f8f6:	6023      	str	r3, [r4, #0]
 800f8f8:	e003      	b.n	800f902 <_printf_i+0x86>
 800f8fa:	2975      	cmp	r1, #117	; 0x75
 800f8fc:	d017      	beq.n	800f92e <_printf_i+0xb2>
 800f8fe:	2978      	cmp	r1, #120	; 0x78
 800f900:	d1d4      	bne.n	800f8ac <_printf_i+0x30>
 800f902:	2378      	movs	r3, #120	; 0x78
 800f904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f908:	4864      	ldr	r0, [pc, #400]	; (800fa9c <_printf_i+0x220>)
 800f90a:	e055      	b.n	800f9b8 <_printf_i+0x13c>
 800f90c:	6813      	ldr	r3, [r2, #0]
 800f90e:	1d19      	adds	r1, r3, #4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	6011      	str	r1, [r2, #0]
 800f914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f91c:	2301      	movs	r3, #1
 800f91e:	e08c      	b.n	800fa3a <_printf_i+0x1be>
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	6011      	str	r1, [r2, #0]
 800f924:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f928:	bf18      	it	ne
 800f92a:	b21b      	sxthne	r3, r3
 800f92c:	e7cf      	b.n	800f8ce <_printf_i+0x52>
 800f92e:	6813      	ldr	r3, [r2, #0]
 800f930:	6825      	ldr	r5, [r4, #0]
 800f932:	1d18      	adds	r0, r3, #4
 800f934:	6010      	str	r0, [r2, #0]
 800f936:	0628      	lsls	r0, r5, #24
 800f938:	d501      	bpl.n	800f93e <_printf_i+0xc2>
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	e002      	b.n	800f944 <_printf_i+0xc8>
 800f93e:	0668      	lsls	r0, r5, #25
 800f940:	d5fb      	bpl.n	800f93a <_printf_i+0xbe>
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	4854      	ldr	r0, [pc, #336]	; (800fa98 <_printf_i+0x21c>)
 800f946:	296f      	cmp	r1, #111	; 0x6f
 800f948:	bf14      	ite	ne
 800f94a:	220a      	movne	r2, #10
 800f94c:	2208      	moveq	r2, #8
 800f94e:	2100      	movs	r1, #0
 800f950:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f954:	6865      	ldr	r5, [r4, #4]
 800f956:	60a5      	str	r5, [r4, #8]
 800f958:	2d00      	cmp	r5, #0
 800f95a:	f2c0 8095 	blt.w	800fa88 <_printf_i+0x20c>
 800f95e:	6821      	ldr	r1, [r4, #0]
 800f960:	f021 0104 	bic.w	r1, r1, #4
 800f964:	6021      	str	r1, [r4, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d13d      	bne.n	800f9e6 <_printf_i+0x16a>
 800f96a:	2d00      	cmp	r5, #0
 800f96c:	f040 808e 	bne.w	800fa8c <_printf_i+0x210>
 800f970:	4665      	mov	r5, ip
 800f972:	2a08      	cmp	r2, #8
 800f974:	d10b      	bne.n	800f98e <_printf_i+0x112>
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	07db      	lsls	r3, r3, #31
 800f97a:	d508      	bpl.n	800f98e <_printf_i+0x112>
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	6862      	ldr	r2, [r4, #4]
 800f980:	429a      	cmp	r2, r3
 800f982:	bfde      	ittt	le
 800f984:	2330      	movle	r3, #48	; 0x30
 800f986:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f98a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f98e:	ebac 0305 	sub.w	r3, ip, r5
 800f992:	6123      	str	r3, [r4, #16]
 800f994:	f8cd 8000 	str.w	r8, [sp]
 800f998:	463b      	mov	r3, r7
 800f99a:	aa03      	add	r2, sp, #12
 800f99c:	4621      	mov	r1, r4
 800f99e:	4630      	mov	r0, r6
 800f9a0:	f7ff fef6 	bl	800f790 <_printf_common>
 800f9a4:	3001      	adds	r0, #1
 800f9a6:	d14d      	bne.n	800fa44 <_printf_i+0x1c8>
 800f9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ac:	b005      	add	sp, #20
 800f9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b2:	4839      	ldr	r0, [pc, #228]	; (800fa98 <_printf_i+0x21c>)
 800f9b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f9b8:	6813      	ldr	r3, [r2, #0]
 800f9ba:	6821      	ldr	r1, [r4, #0]
 800f9bc:	1d1d      	adds	r5, r3, #4
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6015      	str	r5, [r2, #0]
 800f9c2:	060a      	lsls	r2, r1, #24
 800f9c4:	d50b      	bpl.n	800f9de <_printf_i+0x162>
 800f9c6:	07ca      	lsls	r2, r1, #31
 800f9c8:	bf44      	itt	mi
 800f9ca:	f041 0120 	orrmi.w	r1, r1, #32
 800f9ce:	6021      	strmi	r1, [r4, #0]
 800f9d0:	b91b      	cbnz	r3, 800f9da <_printf_i+0x15e>
 800f9d2:	6822      	ldr	r2, [r4, #0]
 800f9d4:	f022 0220 	bic.w	r2, r2, #32
 800f9d8:	6022      	str	r2, [r4, #0]
 800f9da:	2210      	movs	r2, #16
 800f9dc:	e7b7      	b.n	800f94e <_printf_i+0xd2>
 800f9de:	064d      	lsls	r5, r1, #25
 800f9e0:	bf48      	it	mi
 800f9e2:	b29b      	uxthmi	r3, r3
 800f9e4:	e7ef      	b.n	800f9c6 <_printf_i+0x14a>
 800f9e6:	4665      	mov	r5, ip
 800f9e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9ec:	fb02 3311 	mls	r3, r2, r1, r3
 800f9f0:	5cc3      	ldrb	r3, [r0, r3]
 800f9f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	2900      	cmp	r1, #0
 800f9fa:	d1f5      	bne.n	800f9e8 <_printf_i+0x16c>
 800f9fc:	e7b9      	b.n	800f972 <_printf_i+0xf6>
 800f9fe:	6813      	ldr	r3, [r2, #0]
 800fa00:	6825      	ldr	r5, [r4, #0]
 800fa02:	6961      	ldr	r1, [r4, #20]
 800fa04:	1d18      	adds	r0, r3, #4
 800fa06:	6010      	str	r0, [r2, #0]
 800fa08:	0628      	lsls	r0, r5, #24
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	d501      	bpl.n	800fa12 <_printf_i+0x196>
 800fa0e:	6019      	str	r1, [r3, #0]
 800fa10:	e002      	b.n	800fa18 <_printf_i+0x19c>
 800fa12:	066a      	lsls	r2, r5, #25
 800fa14:	d5fb      	bpl.n	800fa0e <_printf_i+0x192>
 800fa16:	8019      	strh	r1, [r3, #0]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	6123      	str	r3, [r4, #16]
 800fa1c:	4665      	mov	r5, ip
 800fa1e:	e7b9      	b.n	800f994 <_printf_i+0x118>
 800fa20:	6813      	ldr	r3, [r2, #0]
 800fa22:	1d19      	adds	r1, r3, #4
 800fa24:	6011      	str	r1, [r2, #0]
 800fa26:	681d      	ldr	r5, [r3, #0]
 800fa28:	6862      	ldr	r2, [r4, #4]
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f7f0 fbef 	bl	8000210 <memchr>
 800fa32:	b108      	cbz	r0, 800fa38 <_printf_i+0x1bc>
 800fa34:	1b40      	subs	r0, r0, r5
 800fa36:	6060      	str	r0, [r4, #4]
 800fa38:	6863      	ldr	r3, [r4, #4]
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa42:	e7a7      	b.n	800f994 <_printf_i+0x118>
 800fa44:	6923      	ldr	r3, [r4, #16]
 800fa46:	462a      	mov	r2, r5
 800fa48:	4639      	mov	r1, r7
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	47c0      	blx	r8
 800fa4e:	3001      	adds	r0, #1
 800fa50:	d0aa      	beq.n	800f9a8 <_printf_i+0x12c>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	079b      	lsls	r3, r3, #30
 800fa56:	d413      	bmi.n	800fa80 <_printf_i+0x204>
 800fa58:	68e0      	ldr	r0, [r4, #12]
 800fa5a:	9b03      	ldr	r3, [sp, #12]
 800fa5c:	4298      	cmp	r0, r3
 800fa5e:	bfb8      	it	lt
 800fa60:	4618      	movlt	r0, r3
 800fa62:	e7a3      	b.n	800f9ac <_printf_i+0x130>
 800fa64:	2301      	movs	r3, #1
 800fa66:	464a      	mov	r2, r9
 800fa68:	4639      	mov	r1, r7
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	47c0      	blx	r8
 800fa6e:	3001      	adds	r0, #1
 800fa70:	d09a      	beq.n	800f9a8 <_printf_i+0x12c>
 800fa72:	3501      	adds	r5, #1
 800fa74:	68e3      	ldr	r3, [r4, #12]
 800fa76:	9a03      	ldr	r2, [sp, #12]
 800fa78:	1a9b      	subs	r3, r3, r2
 800fa7a:	42ab      	cmp	r3, r5
 800fa7c:	dcf2      	bgt.n	800fa64 <_printf_i+0x1e8>
 800fa7e:	e7eb      	b.n	800fa58 <_printf_i+0x1dc>
 800fa80:	2500      	movs	r5, #0
 800fa82:	f104 0919 	add.w	r9, r4, #25
 800fa86:	e7f5      	b.n	800fa74 <_printf_i+0x1f8>
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1ac      	bne.n	800f9e6 <_printf_i+0x16a>
 800fa8c:	7803      	ldrb	r3, [r0, #0]
 800fa8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa96:	e76c      	b.n	800f972 <_printf_i+0xf6>
 800fa98:	0801424d 	.word	0x0801424d
 800fa9c:	0801425e 	.word	0x0801425e

0800faa0 <_realloc_r>:
 800faa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faa2:	4607      	mov	r7, r0
 800faa4:	4614      	mov	r4, r2
 800faa6:	460e      	mov	r6, r1
 800faa8:	b921      	cbnz	r1, 800fab4 <_realloc_r+0x14>
 800faaa:	4611      	mov	r1, r2
 800faac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fab0:	f7ff bc90 	b.w	800f3d4 <_malloc_r>
 800fab4:	b922      	cbnz	r2, 800fac0 <_realloc_r+0x20>
 800fab6:	f7ff fc3f 	bl	800f338 <_free_r>
 800faba:	4625      	mov	r5, r4
 800fabc:	4628      	mov	r0, r5
 800fabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fac0:	f000 f814 	bl	800faec <_malloc_usable_size_r>
 800fac4:	42a0      	cmp	r0, r4
 800fac6:	d20f      	bcs.n	800fae8 <_realloc_r+0x48>
 800fac8:	4621      	mov	r1, r4
 800faca:	4638      	mov	r0, r7
 800facc:	f7ff fc82 	bl	800f3d4 <_malloc_r>
 800fad0:	4605      	mov	r5, r0
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d0f2      	beq.n	800fabc <_realloc_r+0x1c>
 800fad6:	4631      	mov	r1, r6
 800fad8:	4622      	mov	r2, r4
 800fada:	f7ff fc00 	bl	800f2de <memcpy>
 800fade:	4631      	mov	r1, r6
 800fae0:	4638      	mov	r0, r7
 800fae2:	f7ff fc29 	bl	800f338 <_free_r>
 800fae6:	e7e9      	b.n	800fabc <_realloc_r+0x1c>
 800fae8:	4635      	mov	r5, r6
 800faea:	e7e7      	b.n	800fabc <_realloc_r+0x1c>

0800faec <_malloc_usable_size_r>:
 800faec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faf0:	1f18      	subs	r0, r3, #4
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bfbc      	itt	lt
 800faf6:	580b      	ldrlt	r3, [r1, r0]
 800faf8:	18c0      	addlt	r0, r0, r3
 800fafa:	4770      	bx	lr

0800fafc <_init>:
 800fafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafe:	bf00      	nop
 800fb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb02:	bc08      	pop	{r3}
 800fb04:	469e      	mov	lr, r3
 800fb06:	4770      	bx	lr

0800fb08 <_fini>:
 800fb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0a:	bf00      	nop
 800fb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb0e:	bc08      	pop	{r3}
 800fb10:	469e      	mov	lr, r3
 800fb12:	4770      	bx	lr
